[
 {
  "shortname": "UtilsTester1_test",
  "longname": "UtilsTester1_test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"utils.py\" 154) static_id 0) \nstorage ()\nstorage_type ((unknown 3))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 42) (((\"smartpy_utils.py\" 286) define_local \"utils_19\" ((\"smartpy_utils.py\" 286) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 287) define_local \"utils_20\" ((\"smartpy_utils.py\" 287) list ) True) ((\"smartpy_utils.py\" 289) if_block ((\"smartpy_utils.py\" 289) eq ((\"smartpy_utils.py\" 289) get_local \"utils_19\") ((\"smartpy_utils.py\" 289) literal (intOrNat 0))) (((\"smartpy_utils.py\" 290) set ((\"smartpy_utils.py\" 290) get_local \"utils_20\") ((\"smartpy_utils.py\" 290) cons ((\"smartpy_utils.py\" 290) literal (string \"0\")) ((\"smartpy_utils.py\" 290) get_local \"utils_20\"))))) ((\"smartpy_utils.py\" 291) while_block ((\"smartpy_utils.py\" 291) gt ((\"smartpy_utils.py\" 291) get_local \"utils_19\") ((\"smartpy_utils.py\" 291) literal (intOrNat 0))) (((\"smartpy_utils.py\" 292) set ((\"smartpy_utils.py\" 292) get_local \"utils_20\") ((\"smartpy_utils.py\" 292) cons ((\"smartpy_utils.py\" 292) get_item ((\"smartpy_utils.py\" 284) map (((\"utils.py\" 154) literal (intOrNat 0)) ((\"utils.py\" 154) literal (string \"0\"))) (((\"utils.py\" 154) literal (intOrNat 1)) ((\"utils.py\" 154) literal (string \"1\"))) (((\"utils.py\" 154) literal (intOrNat 2)) ((\"utils.py\" 154) literal (string \"2\"))) (((\"utils.py\" 154) literal (intOrNat 3)) ((\"utils.py\" 154) literal (string \"3\"))) (((\"utils.py\" 154) literal (intOrNat 4)) ((\"utils.py\" 154) literal (string \"4\"))) (((\"utils.py\" 154) literal (intOrNat 5)) ((\"utils.py\" 154) literal (string \"5\"))) (((\"utils.py\" 154) literal (intOrNat 6)) ((\"utils.py\" 154) literal (string \"6\"))) (((\"utils.py\" 154) literal (intOrNat 7)) ((\"utils.py\" 154) literal (string \"7\"))) (((\"utils.py\" 154) literal (intOrNat 8)) ((\"utils.py\" 154) literal (string \"8\"))) (((\"utils.py\" 154) literal (intOrNat 9)) ((\"utils.py\" 154) literal (string \"9\")))) ((\"smartpy_utils.py\" 292) mod ((\"smartpy_utils.py\" 292) get_local \"utils_19\") ((\"smartpy_utils.py\" 292) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 292) get_local \"utils_20\"))) ((\"smartpy_utils.py\" 293) set ((\"utils.py\" 154) get_local \"utils_19\") ((\"smartpy_utils.py\" 293) div ((\"smartpy_utils.py\" 293) get_local \"utils_19\") ((\"smartpy_utils.py\" 293) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 295) define_local \"utils_21\" ((\"smartpy_utils.py\" 295) concat ((\"smartpy_utils.py\" 295) get_local \"utils_20\")) True) ((\"smartpy_utils.py\" 296) if_block ((\"smartpy_utils.py\" 296) literal (bool True)) (((\"smartpy_utils.py\" 297) set ((\"utils.py\" 154) get_local \"utils_21\") ((\"smartpy_utils.py\" 297) add ((\"smartpy_utils.py\" 297) literal (string \"-\")) ((\"smartpy_utils.py\" 297) get_local \"utils_21\"))))) ((\"utils.py\" 43) verify ((\"utils.py\" 43) eq ((\"smartpy_utils.py\" 299) get_local \"utils_21\") ((\"utils.py\" 43) literal (string \"-1\")))) ((\"smartpy_utils.py\" 286) define_local \"utils_22\" ((\"smartpy_utils.py\" 286) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 287) define_local \"utils_23\" ((\"smartpy_utils.py\" 287) list ) True) ((\"smartpy_utils.py\" 289) if_block ((\"smartpy_utils.py\" 289) eq ((\"smartpy_utils.py\" 289) get_local \"utils_22\") ((\"smartpy_utils.py\" 289) literal (intOrNat 0))) (((\"smartpy_utils.py\" 290) set ((\"smartpy_utils.py\" 290) get_local \"utils_23\") ((\"smartpy_utils.py\" 290) cons ((\"smartpy_utils.py\" 290) literal (string \"0\")) ((\"smartpy_utils.py\" 290) get_local \"utils_23\"))))) ((\"smartpy_utils.py\" 291) while_block ((\"smartpy_utils.py\" 291) gt ((\"smartpy_utils.py\" 291) get_local \"utils_22\") ((\"smartpy_utils.py\" 291) literal (intOrNat 0))) (((\"smartpy_utils.py\" 292) set ((\"smartpy_utils.py\" 292) get_local \"utils_23\") ((\"smartpy_utils.py\" 292) cons ((\"smartpy_utils.py\" 292) get_item ((\"smartpy_utils.py\" 284) map (((\"utils.py\" 154) literal (intOrNat 0)) ((\"utils.py\" 154) literal (string \"0\"))) (((\"utils.py\" 154) literal (intOrNat 1)) ((\"utils.py\" 154) literal (string \"1\"))) (((\"utils.py\" 154) literal (intOrNat 2)) ((\"utils.py\" 154) literal (string \"2\"))) (((\"utils.py\" 154) literal (intOrNat 3)) ((\"utils.py\" 154) literal (string \"3\"))) (((\"utils.py\" 154) literal (intOrNat 4)) ((\"utils.py\" 154) literal (string \"4\"))) (((\"utils.py\" 154) literal (intOrNat 5)) ((\"utils.py\" 154) literal (string \"5\"))) (((\"utils.py\" 154) literal (intOrNat 6)) ((\"utils.py\" 154) literal (string \"6\"))) (((\"utils.py\" 154) literal (intOrNat 7)) ((\"utils.py\" 154) literal (string \"7\"))) (((\"utils.py\" 154) literal (intOrNat 8)) ((\"utils.py\" 154) literal (string \"8\"))) (((\"utils.py\" 154) literal (intOrNat 9)) ((\"utils.py\" 154) literal (string \"9\")))) ((\"smartpy_utils.py\" 292) mod ((\"smartpy_utils.py\" 292) get_local \"utils_22\") ((\"smartpy_utils.py\" 292) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 292) get_local \"utils_23\"))) ((\"smartpy_utils.py\" 293) set ((\"utils.py\" 154) get_local \"utils_22\") ((\"smartpy_utils.py\" 293) div ((\"smartpy_utils.py\" 293) get_local \"utils_22\") ((\"smartpy_utils.py\" 293) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 295) define_local \"utils_24\" ((\"smartpy_utils.py\" 295) concat ((\"smartpy_utils.py\" 295) get_local \"utils_23\")) True) ((\"smartpy_utils.py\" 296) if_block ((\"smartpy_utils.py\" 296) literal (bool False)) (((\"smartpy_utils.py\" 297) set ((\"utils.py\" 154) get_local \"utils_24\") ((\"smartpy_utils.py\" 297) add ((\"smartpy_utils.py\" 297) literal (string \"-\")) ((\"smartpy_utils.py\" 297) get_local \"utils_24\"))))) ((\"utils.py\" 44) verify ((\"utils.py\" 44) eq ((\"smartpy_utils.py\" 299) get_local \"utils_24\") ((\"utils.py\" 44) literal (string \"1\")))) ((\"utils.py\" 45) verify ((\"utils.py\" 45) eq ((\"utils.py\" 45) call_lambda ((\"smartpy/tests/utils.py\" 10) private \"string_of_int\") ((\"utils.py\" 45) literal (intOrNat 2))) ((\"utils.py\" 45) literal (string \"2\")))) ((\"smartpy_utils.py\" 324) define_local \"utils_25\" ((\"smartpy_utils.py\" 324) literal (string \"1\")) True) ((\"smartpy_utils.py\" 325) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"smartpy_utils.py\" 234) literal (string \"1\"))) (((\"smartpy_utils.py\" 326) set ((\"utils.py\" 154) get_local \"utils_25\") ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) slice ((\"smartpy_utils.py\" 326) literal (intOrNat 1)) ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) is_nat ((\"smartpy_utils.py\" 326) sub ((\"smartpy_utils.py\" 326) size ((\"smartpy_utils.py\" 326) literal (string \"1\"))) ((\"smartpy_utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 326) literal (string \"1\"))) \"Some\" ((\"smartpy_utils.py\" 326) literal (string \"\")))))) ((\"smartpy_utils.py\" 328) define_local \"utils_26\" ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 329) for_group \"utils_27\" ((\"smartpy_utils.py\" 329) range ((\"smartpy_utils.py\" 329) literal (intOrNat 0)) ((\"smartpy_utils.py\" 329) size ((\"smartpy_utils.py\" 329) get_local \"utils_25\")) ((\"smartpy_utils.py\" 329) literal (intOrNat 1))) (((\"smartpy_utils.py\" 330) set ((\"utils.py\" 154) get_local \"utils_26\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) literal (intOrNat 10)) ((\"smartpy_utils.py\" 330) get_local \"utils_26\")) ((\"smartpy_utils.py\" 330) get_item ((\"smartpy_utils.py\" 321) map (((\"utils.py\" 154) literal (string \"0\")) ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 154) literal (string \"1\")) ((\"utils.py\" 154) literal (intOrNat 1))) (((\"utils.py\" 154) literal (string \"2\")) ((\"utils.py\" 154) literal (intOrNat 2))) (((\"utils.py\" 154) literal (string \"3\")) ((\"utils.py\" 154) literal (intOrNat 3))) (((\"utils.py\" 154) literal (string \"4\")) ((\"utils.py\" 154) literal (intOrNat 4))) (((\"utils.py\" 154) literal (string \"5\")) ((\"utils.py\" 154) literal (intOrNat 5))) (((\"utils.py\" 154) literal (string \"6\")) ((\"utils.py\" 154) literal (intOrNat 6))) (((\"utils.py\" 154) literal (string \"7\")) ((\"utils.py\" 154) literal (intOrNat 7))) (((\"utils.py\" 154) literal (string \"8\")) ((\"utils.py\" 154) literal (intOrNat 8))) (((\"utils.py\" 154) literal (string \"9\")) ((\"utils.py\" 154) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) slice ((\"smartpy_utils.py\" 329) iter \"utils_27\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1)) ((\"smartpy_utils.py\" 330) get_local \"utils_25\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 332) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"smartpy_utils.py\" 234) literal (string \"1\"))) (((\"smartpy_utils.py\" 333) set ((\"utils.py\" 154) get_local \"utils_26\") ((\"smartpy_utils.py\" 333) mul_homo ((\"smartpy_utils.py\" 333) get_local \"utils_26\") ((\"smartpy_utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 47) verify ((\"utils.py\" 47) eq ((\"smartpy_utils.py\" 335) get_local \"utils_26\") ((\"utils.py\" 47) literal (intOrNat 1)))) ((\"smartpy_utils.py\" 324) define_local \"utils_28\" ((\"smartpy_utils.py\" 324) literal (string \"-1\")) True) ((\"smartpy_utils.py\" 325) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"smartpy_utils.py\" 234) literal (string \"-1\"))) (((\"smartpy_utils.py\" 326) set ((\"utils.py\" 154) get_local \"utils_28\") ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) slice ((\"smartpy_utils.py\" 326) literal (intOrNat 1)) ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) is_nat ((\"smartpy_utils.py\" 326) sub ((\"smartpy_utils.py\" 326) size ((\"smartpy_utils.py\" 326) literal (string \"-1\"))) ((\"smartpy_utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 326) literal (string \"-1\"))) \"Some\" ((\"smartpy_utils.py\" 326) literal (string \"\")))))) ((\"smartpy_utils.py\" 328) define_local \"utils_29\" ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 329) for_group \"utils_30\" ((\"smartpy_utils.py\" 329) range ((\"smartpy_utils.py\" 329) literal (intOrNat 0)) ((\"smartpy_utils.py\" 329) size ((\"smartpy_utils.py\" 329) get_local \"utils_28\")) ((\"smartpy_utils.py\" 329) literal (intOrNat 1))) (((\"smartpy_utils.py\" 330) set ((\"utils.py\" 154) get_local \"utils_29\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) literal (intOrNat 10)) ((\"smartpy_utils.py\" 330) get_local \"utils_29\")) ((\"smartpy_utils.py\" 330) get_item ((\"smartpy_utils.py\" 321) map (((\"utils.py\" 154) literal (string \"0\")) ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 154) literal (string \"1\")) ((\"utils.py\" 154) literal (intOrNat 1))) (((\"utils.py\" 154) literal (string \"2\")) ((\"utils.py\" 154) literal (intOrNat 2))) (((\"utils.py\" 154) literal (string \"3\")) ((\"utils.py\" 154) literal (intOrNat 3))) (((\"utils.py\" 154) literal (string \"4\")) ((\"utils.py\" 154) literal (intOrNat 4))) (((\"utils.py\" 154) literal (string \"5\")) ((\"utils.py\" 154) literal (intOrNat 5))) (((\"utils.py\" 154) literal (string \"6\")) ((\"utils.py\" 154) literal (intOrNat 6))) (((\"utils.py\" 154) literal (string \"7\")) ((\"utils.py\" 154) literal (intOrNat 7))) (((\"utils.py\" 154) literal (string \"8\")) ((\"utils.py\" 154) literal (intOrNat 8))) (((\"utils.py\" 154) literal (string \"9\")) ((\"utils.py\" 154) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) slice ((\"smartpy_utils.py\" 329) iter \"utils_30\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1)) ((\"smartpy_utils.py\" 330) get_local \"utils_28\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 332) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"smartpy_utils.py\" 234) literal (string \"-1\"))) (((\"smartpy_utils.py\" 333) set ((\"utils.py\" 154) get_local \"utils_29\") ((\"smartpy_utils.py\" 333) mul_homo ((\"smartpy_utils.py\" 333) get_local \"utils_29\") ((\"smartpy_utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 48) verify ((\"utils.py\" 48) eq ((\"smartpy_utils.py\" 335) get_local \"utils_29\") ((\"utils.py\" 48) literal (int -1)))) ((\"utils.py\" 49) verify ((\"utils.py\" 49) eq ((\"utils.py\" 49) call_lambda ((\"smartpy/tests/utils.py\" 14) private \"int_of_string\") ((\"utils.py\" 49) literal (string \"2\"))) ((\"utils.py\" 49) literal (intOrNat 2)))) ((\"utils.py\" 339) define_local \"utils_0\" ((\"utils.py\" 339) size ((\"utils.py\" 50) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 340) define_local \"utils_1\" ((\"utils.py\" 340) literal (nat 0)) True) ((\"utils.py\" 341) for_group \"utils_2\" ((\"utils.py\" 341) range ((\"utils.py\" 341) literal (intOrNat 0)) ((\"utils.py\" 341) get_local \"utils_0\") ((\"utils.py\" 341) literal (intOrNat 1))) (((\"utils.py\" 342) define_local \"compute_utils_342\" ((\"utils.py\" 342) open_variant ((\"utils.py\" 342) slice ((\"utils.py\" 341) iter \"utils_2\") ((\"utils.py\" 342) literal (intOrNat 1)) ((\"utils.py\" 50) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 343) define_local \"compute_utils_343\" ((\"utils.py\" 343) mul_homo ((\"utils.py\" 343) open_variant ((\"utils.py\" 343) is_nat ((\"utils.py\" 343) sub ((\"utils.py\" 343) get_local \"utils_0\") ((\"utils.py\" 343) add ((\"utils.py\" 341) iter \"utils_2\") ((\"utils.py\" 343) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 343) literal (intOrNat 2))) True) ((\"utils.py\" 349) set ((\"utils.py\" 154) get_local \"utils_1\") ((\"utils.py\" 349) add ((\"utils.py\" 349) get_local \"utils_1\") ((\"utils.py\" 349) mul_homo ((\"utils.py\" 349) open_variant ((\"utils.py\" 349) is_nat ((\"utils.py\" 350) to_int ((\"utils.py\" 350) open_variant ((\"utils.py\" 350) unpack ((\"utils.py\" 348) add ((\"utils.py\" 348) add ((\"utils.py\" 348) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 342) get_local \"compute_utils_342\")) ((\"utils.py\" 348) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 343) get_local \"compute_utils_343\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 50) verify ((\"utils.py\" 50) eq ((\"utils.py\" 353) get_local \"utils_1\") ((\"utils.py\" 50) literal (intOrNat 256)))) ((\"utils.py\" 51) verify ((\"utils.py\" 51) eq ((\"utils.py\" 51) call_lambda ((\"smartpy/tests/utils.py\" 18) private \"int_of_bytes\") ((\"utils.py\" 51) literal (bytes \"0x0100\"))) ((\"utils.py\" 51) literal (intOrNat 256)))) ((\"smartpy_utils.py\" 271) define_local \"utils_31\" ((\"smartpy_utils.py\" 271) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 272) define_local \"utils_32\" ((\"smartpy_utils.py\" 272) list ) True) ((\"smartpy_utils.py\" 273) for_group \"utils_33\" ((\"smartpy_utils.py\" 273) range ((\"smartpy_utils.py\" 273) literal (intOrNat 0)) ((\"smartpy_utils.py\" 273) size ((\"smartpy_utils.py\" 273) literal (string \"a b\"))) ((\"smartpy_utils.py\" 273) literal (intOrNat 1))) (((\"smartpy_utils.py\" 274) if_block ((\"smartpy_utils.py\" 274) eq ((\"smartpy_utils.py\" 274) open_variant ((\"smartpy_utils.py\" 274) slice ((\"smartpy_utils.py\" 273) iter \"utils_33\") ((\"smartpy_utils.py\" 274) literal (intOrNat 1)) ((\"smartpy_utils.py\" 274) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 274) literal (string \" \"))) (((\"smartpy_utils.py\" 275) set ((\"smartpy_utils.py\" 275) get_local \"utils_32\") ((\"smartpy_utils.py\" 275) cons ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) slice ((\"smartpy_utils.py\" 275) get_local \"utils_31\") ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) is_nat ((\"smartpy_utils.py\" 275) sub ((\"smartpy_utils.py\" 273) iter \"utils_33\") ((\"smartpy_utils.py\" 275) get_local \"utils_31\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) get_local \"utils_32\"))) ((\"smartpy_utils.py\" 276) set ((\"utils.py\" 154) get_local \"utils_31\") ((\"smartpy_utils.py\" 276) add ((\"smartpy_utils.py\" 273) iter \"utils_33\") ((\"smartpy_utils.py\" 276) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 277) if_block ((\"smartpy_utils.py\" 277) gt ((\"smartpy_utils.py\" 277) size ((\"smartpy_utils.py\" 277) literal (string \"a b\"))) ((\"smartpy_utils.py\" 277) literal (intOrNat 0))) (((\"smartpy_utils.py\" 278) set ((\"smartpy_utils.py\" 278) get_local \"utils_32\") ((\"smartpy_utils.py\" 278) cons ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) slice ((\"smartpy_utils.py\" 278) get_local \"utils_31\") ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) is_nat ((\"smartpy_utils.py\" 278) sub ((\"smartpy_utils.py\" 278) size ((\"smartpy_utils.py\" 278) literal (string \"a b\"))) ((\"smartpy_utils.py\" 278) get_local \"utils_31\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) get_local \"utils_32\"))))) ((\"utils.py\" 53) verify ((\"utils.py\" 53) eq ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"smartpy_utils.py\" 279) rev ((\"smartpy_utils.py\" 279) get_local \"utils_32\")) (unknown 45))) ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"utils.py\" 53) list ((\"utils.py\" 53) literal (string \"a\")) ((\"utils.py\" 53) literal (string \"b\"))) (unknown 45))))) ((\"smartpy_utils.py\" 271) define_local \"utils_34\" ((\"smartpy_utils.py\" 271) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 272) define_local \"utils_35\" ((\"smartpy_utils.py\" 272) list ) True) ((\"smartpy_utils.py\" 273) for_group \"utils_36\" ((\"smartpy_utils.py\" 273) range ((\"smartpy_utils.py\" 273) literal (intOrNat 0)) ((\"smartpy_utils.py\" 273) size ((\"smartpy_utils.py\" 273) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 273) literal (intOrNat 1))) (((\"smartpy_utils.py\" 274) if_block ((\"smartpy_utils.py\" 274) eq ((\"smartpy_utils.py\" 274) open_variant ((\"smartpy_utils.py\" 274) slice ((\"smartpy_utils.py\" 273) iter \"utils_36\") ((\"smartpy_utils.py\" 274) literal (intOrNat 1)) ((\"smartpy_utils.py\" 274) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 274) literal (string \",\"))) (((\"smartpy_utils.py\" 275) set ((\"smartpy_utils.py\" 275) get_local \"utils_35\") ((\"smartpy_utils.py\" 275) cons ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) slice ((\"smartpy_utils.py\" 275) get_local \"utils_34\") ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) is_nat ((\"smartpy_utils.py\" 275) sub ((\"smartpy_utils.py\" 273) iter \"utils_36\") ((\"smartpy_utils.py\" 275) get_local \"utils_34\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) get_local \"utils_35\"))) ((\"smartpy_utils.py\" 276) set ((\"utils.py\" 154) get_local \"utils_34\") ((\"smartpy_utils.py\" 276) add ((\"smartpy_utils.py\" 273) iter \"utils_36\") ((\"smartpy_utils.py\" 276) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 277) if_block ((\"smartpy_utils.py\" 277) gt ((\"smartpy_utils.py\" 277) size ((\"smartpy_utils.py\" 277) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 277) literal (intOrNat 0))) (((\"smartpy_utils.py\" 278) set ((\"smartpy_utils.py\" 278) get_local \"utils_35\") ((\"smartpy_utils.py\" 278) cons ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) slice ((\"smartpy_utils.py\" 278) get_local \"utils_34\") ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) is_nat ((\"smartpy_utils.py\" 278) sub ((\"smartpy_utils.py\" 278) size ((\"smartpy_utils.py\" 278) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 278) get_local \"utils_34\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) get_local \"utils_35\"))))) ((\"utils.py\" 54) verify ((\"utils.py\" 54) eq ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"smartpy_utils.py\" 279) rev ((\"smartpy_utils.py\" 279) get_local \"utils_35\")) (unknown 48))) ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"utils.py\" 54) list ((\"utils.py\" 54) literal (string \"b\")) ((\"utils.py\" 54) literal (string \"a\"))) (unknown 48))))) ((\"utils.py\" 55) verify ((\"utils.py\" 55) eq ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) call_lambda ((\"smartpy/tests/utils.py\" 22) private \"string_split\") ((\"utils.py\" 55) record (separator ((\"utils.py\" 55) literal (string \",,\"))) (text ((\"utils.py\" 55) literal (string \"a,b\"))))) (unknown 49))) ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) list ((\"utils.py\" 55) literal (string \"a,b\"))) (unknown 49))))) ((\"utils.py\" 57) verify ((\"utils.py\" 57) eq ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"a\")) ((\"smartpy_utils.py\" 234) literal (string \"abc\"))) ((\"utils.py\" 57) literal (bool True)))) ((\"utils.py\" 58) verify ((\"utils.py\" 58) eq ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"b\")) ((\"smartpy_utils.py\" 234) literal (string \"abc\"))) ((\"utils.py\" 58) literal (bool False)))) ((\"utils.py\" 59) verify ((\"utils.py\" 59) eq ((\"utils.py\" 59) call_lambda ((\"smartpy/tests/utils.py\" 26) private \"string_starts_with\") ((\"utils.py\" 59) record (prefix ((\"utils.py\" 59) literal (string \"a\"))) (text ((\"utils.py\" 59) literal (string \"abc\"))))) ((\"utils.py\" 59) literal (bool True)))) ((\"utils.py\" 61) verify ((\"utils.py\" 61) eq ((\"smartpy_utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 175) literal (string \"abc\")) ((\"smartpy_utils.py\" 175) literal (string \"c\"))) ((\"utils.py\" 61) literal (bool True)))) ((\"utils.py\" 62) verify ((\"utils.py\" 62) eq ((\"smartpy_utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 175) literal (string \"abc\")) ((\"smartpy_utils.py\" 175) literal (string \"b\"))) ((\"utils.py\" 62) literal (bool False)))) ((\"utils.py\" 63) verify ((\"utils.py\" 63) eq ((\"utils.py\" 63) call_lambda ((\"smartpy/tests/utils.py\" 30) private \"string_ends_with\") ((\"utils.py\" 63) record (postfix ((\"utils.py\" 63) literal (string \"c\"))) (text ((\"utils.py\" 63) literal (string \"abc\"))))) ((\"utils.py\" 63) literal (bool True)))) ((\"smartpy_utils.py\" 83) define_local \"utils_37_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_38_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3)) ((\"smartpy_utils.py\" 84) literal (intOrNat 4)) ((\"smartpy_utils.py\" 84) literal (intOrNat 5))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_37_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_38_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_37_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_38_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_37_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_38_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_37_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_38_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)) ((\"smartpy_utils.py\" 90) literal (intOrNat 4)) ((\"smartpy_utils.py\" 90) literal (intOrNat 5)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_39_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_40_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_41_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_40_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_42_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_43_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_37_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_41_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_40_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 154) get_local \"utils_39_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_43_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 154) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_43_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_40_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 154) get_local \"utils_41_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 154) get_local \"utils_39_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_39_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_43_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 154) get_local \"utils_39_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_39_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 154) get_local \"utils_41_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 154) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_43_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_40_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 154) get_local \"utils_39_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_43_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 154) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_42_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_43_x\") \"value\"))))))))) ((\"utils.py\" 65) verify ((\"utils.py\" 65) eq ((\"smartpy_utils.py\" 112) get_local \"utils_39_result\") ((\"utils.py\" 65) literal (intOrNat 3)))) ((\"smartpy_utils.py\" 83) define_local \"utils_44_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_45_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_44_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_45_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_44_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_45_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_44_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_45_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_44_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_45_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90i\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_46_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_47_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_48_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_47_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_49_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_50_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_44_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_48_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_47_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 154) get_local \"utils_46_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_50_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 154) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_50_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_47_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 154) get_local \"utils_48_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 154) get_local \"utils_46_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_46_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_50_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 154) get_local \"utils_46_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_46_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 154) get_local \"utils_48_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 154) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_50_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_47_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 154) get_local \"utils_46_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_50_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 154) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_49_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_50_x\") \"value\"))))))))) ((\"utils.py\" 66) verify ((\"utils.py\" 66) eq ((\"smartpy_utils.py\" 112) get_local \"utils_46_result\") ((\"utils.py\" 66) literal (intOrNat 2)))) ((\"utils.py\" 67) verify ((\"utils.py\" 67) eq ((\"utils.py\" 67) call_lambda ((\"smartpy/tests/utils.py\" 38) private \"math_median\") ((\"utils.py\" 67) list ((\"utils.py\" 67) literal (intOrNat 1)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 5)))) ((\"utils.py\" 67) literal (intOrNat 2)))) ((\"utils.py\" 118) define_local \"compute_utils_118\" ((\"utils.py\" 118) sub ((\"utils.py\" 118) literal (intOrNat 3)) ((\"utils.py\" 118) size ((\"utils.py\" 69) literal (bytes \"0x11\")))) True) ((\"utils.py\" 119) define_local \"utils_3_bytes\" ((\"utils.py\" 119) literal (bytes \"0x\")) True) ((\"utils.py\" 120) while_block ((\"utils.py\" 120) lt ((\"utils.py\" 120) size ((\"utils.py\" 120) get_local \"utils_3_bytes\")) ((\"utils.py\" 118) open_variant ((\"utils.py\" 118) is_nat ((\"utils.py\" 118) get_local \"compute_utils_118\")) \"Some\" \"None\")) (((\"utils.py\" 121) set ((\"utils.py\" 154) get_local \"utils_3_bytes\") ((\"utils.py\" 121) add ((\"utils.py\" 69) literal (bytes \"0x00\")) ((\"utils.py\" 121) get_local \"utils_3_bytes\"))))) ((\"utils.py\" 69) verify ((\"utils.py\" 69) eq ((\"utils.py\" 122) add ((\"utils.py\" 122) get_local \"utils_3_bytes\") ((\"utils.py\" 69) literal (bytes \"0x11\"))) ((\"utils.py\" 69) literal (bytes \"0x000011\")))) ((\"utils.py\" 126) define_local \"compute_utils_126\" ((\"utils.py\" 126) sub ((\"utils.py\" 126) literal (intOrNat 3)) ((\"utils.py\" 126) size ((\"utils.py\" 70) literal (bytes \"0x11\")))) True) ((\"utils.py\" 127) define_local \"utils_4_bytes\" ((\"utils.py\" 127) literal (bytes \"0x\")) True) ((\"utils.py\" 128) while_block ((\"utils.py\" 128) lt ((\"utils.py\" 128) size ((\"utils.py\" 128) get_local \"utils_4_bytes\")) ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) is_nat ((\"utils.py\" 126) get_local \"compute_utils_126\")) \"Some\" \"None\")) (((\"utils.py\" 129) set ((\"utils.py\" 154) get_local \"utils_4_bytes\") ((\"utils.py\" 129) add ((\"utils.py\" 70) literal (bytes \"0x00\")) ((\"utils.py\" 129) get_local \"utils_4_bytes\"))))) ((\"utils.py\" 70) verify ((\"utils.py\" 70) eq ((\"utils.py\" 130) add ((\"utils.py\" 70) literal (bytes \"0x11\")) ((\"utils.py\" 130) get_local \"utils_4_bytes\")) ((\"utils.py\" 70) literal (bytes \"0x110000\")))) ((\"smartpy_utils.py\" 151) define_local \"utils_51_value\" ((\"smartpy_utils.py\" 151) type_annotation ((\"smartpy_utils.py\" 151) literal (intOrNat 54)) \"nat\") True) ((\"smartpy_utils.py\" 152) define_local \"utils_52_left_nibble\" ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 153) define_local \"utils_53_bytes\" ((\"smartpy_utils.py\" 153) list ) True) ((\"smartpy_utils.py\" 154) while_block ((\"smartpy_utils.py\" 154) neq ((\"smartpy_utils.py\" 154) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 154) literal (intOrNat 0))) (((\"smartpy_utils.py\" 155) match_tuple ((\"smartpy_utils.py\" 155) open_variant ((\"smartpy_utils.py\" 155) ediv ((\"smartpy_utils.py\" 155) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 155) literal (intOrNat 16))) \"Some\" \"None\") \"match_pair_smartpy_utils_155_fst\" \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 156) set ((\"utils.py\" 154) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_fst\")) ((\"smartpy_utils.py\" 157) match_cases ((\"smartpy_utils.py\" 157) get_local \"utils_52_left_nibble\") \"match_smartpy_utils_157\" (((\"smartpy_utils.py\" 158) match ((\"smartpy_utils.py\" 157) cases_arg \"match_smartpy_utils_157\") \"Some\" \"Some\" (((\"smartpy_utils.py\" 159) set ((\"utils.py\" 154) get_local \"utils_52_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"smartpy_utils.py\" 144) verify ((\"smartpy_utils.py\" 144) lt ((\"smartpy_utils.py\" 160) or ((\"smartpy_utils.py\" 160) lsl ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 160) literal (intOrNat 4))) ((\"smartpy_utils.py\" 158) variant_arg \"Some\")) ((\"smartpy_utils.py\" 144) literal (intOrNat 256))) ((\"smartpy_utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 160) set ((\"smartpy_utils.py\" 160) get_local \"utils_53_bytes\") ((\"smartpy_utils.py\" 160) cons ((\"smartpy_utils.py\" 147) open_variant ((\"smartpy_utils.py\" 145) slice ((\"smartpy_utils.py\" 145) literal (intOrNat 6)) ((\"smartpy_utils.py\" 145) literal (intOrNat 1)) ((\"smartpy_utils.py\" 146) pack ((\"smartpy_utils.py\" 146) MUL ((\"smartpy_utils.py\" 146) to_int ((\"smartpy_utils.py\" 160) or ((\"smartpy_utils.py\" 160) lsl ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 160) literal (intOrNat 4))) ((\"smartpy_utils.py\" 158) variant_arg \"Some\"))) ((\"smartpy_utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 160) get_local \"utils_53_bytes\"))))) ((\"smartpy_utils.py\" 161) match ((\"smartpy_utils.py\" 157) cases_arg \"match_smartpy_utils_157\") \"None\" \"None\" (((\"smartpy_utils.py\" 162) set ((\"utils.py\" 154) get_local \"utils_52_left_nibble\") ((\"smartpy_utils.py\" 162) variant \"Some\" ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\"))))))))) ((\"smartpy_utils.py\" 164) match_cases ((\"smartpy_utils.py\" 164) get_local \"utils_52_left_nibble\") \"match_smartpy_utils_164\" (((\"smartpy_utils.py\" 165) match ((\"smartpy_utils.py\" 164) cases_arg \"match_smartpy_utils_164\") \"Some\" \"Some\" (((\"smartpy_utils.py\" 166) set ((\"utils.py\" 154) get_local \"utils_52_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"smartpy_utils.py\" 144) verify ((\"smartpy_utils.py\" 144) lt ((\"smartpy_utils.py\" 167) or ((\"smartpy_utils.py\" 167) literal (intOrNat 0)) ((\"smartpy_utils.py\" 165) variant_arg \"Some\")) ((\"smartpy_utils.py\" 144) literal (intOrNat 256))) ((\"smartpy_utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 167) set ((\"smartpy_utils.py\" 167) get_local \"utils_53_bytes\") ((\"smartpy_utils.py\" 167) cons ((\"smartpy_utils.py\" 147) open_variant ((\"smartpy_utils.py\" 145) slice ((\"smartpy_utils.py\" 145) literal (intOrNat 6)) ((\"smartpy_utils.py\" 145) literal (intOrNat 1)) ((\"smartpy_utils.py\" 146) pack ((\"smartpy_utils.py\" 146) MUL ((\"smartpy_utils.py\" 146) to_int ((\"smartpy_utils.py\" 167) or ((\"smartpy_utils.py\" 167) literal (intOrNat 0)) ((\"smartpy_utils.py\" 165) variant_arg \"Some\"))) ((\"smartpy_utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 167) get_local \"utils_53_bytes\"))))))) ((\"utils.py\" 71) verify ((\"utils.py\" 71) eq ((\"smartpy_utils.py\" 169) concat ((\"smartpy_utils.py\" 169) get_local \"utils_53_bytes\")) ((\"utils.py\" 71) literal (bytes \"0x36\")))) ((\"utils.py\" 72) verify ((\"utils.py\" 72) eq ((\"smartpy_utils.py\" 139) open_variant ((\"smartpy_utils.py\" 139) slice ((\"smartpy_utils.py\" 139) literal (intOrNat 6)) ((\"smartpy_utils.py\" 139) open_variant ((\"smartpy_utils.py\" 139) is_nat ((\"smartpy_utils.py\" 139) sub ((\"smartpy_utils.py\" 139) size ((\"smartpy_utils.py\" 134) pack ((\"smartpy_utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"smartpy_utils.py\" 139) literal (intOrNat 6)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 134) pack ((\"smartpy_utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"smartpy_utils.py\" 139) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 72) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"smartpy_utils.py\" 151) define_local \"utils_54_value\" ((\"smartpy_utils.py\" 151) type_annotation ((\"smartpy_utils.py\" 305) size ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) \"nat\") True) ((\"smartpy_utils.py\" 152) define_local \"utils_55_left_nibble\" ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 153) define_local \"utils_56_bytes\" ((\"smartpy_utils.py\" 153) list ) True) ((\"smartpy_utils.py\" 154) while_block ((\"smartpy_utils.py\" 154) neq ((\"smartpy_utils.py\" 154) get_local \"utils_54_value\") ((\"smartpy_utils.py\" 154) literal (intOrNat 0))) (((\"smartpy_utils.py\" 155) match_tuple ((\"smartpy_utils.py\" 155) open_variant ((\"smartpy_utils.py\" 155) ediv ((\"smartpy_utils.py\" 155) get_local \"utils_54_value\") ((\"smartpy_utils.py\" 155) literal (intOrNat 16))) \"Some\" \"None\") \"match_pair_smartpy_utils_155_fst\" \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 156) set ((\"utils.py\" 154) get_local \"utils_54_value\") ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_fst\")) ((\"smartpy_utils.py\" 157) match_cases ((\"smartpy_utils.py\" 157) get_local \"utils_55_left_nibble\") \"match_smartpy_utils_157\" (((\"smartpy_utils.py\" 158) match ((\"smartpy_utils.py\" 157) cases_arg \"match_smartpy_utils_157\") \"Some\" \"Some\" (((\"smartpy_utils.py\" 159) set ((\"utils.py\" 154) get_local \"utils_55_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"smartpy_utils.py\" 144) verify ((\"smartpy_utils.py\" 144) lt ((\"smartpy_utils.py\" 160) or ((\"smartpy_utils.py\" 160) lsl ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 160) literal (intOrNat 4))) ((\"smartpy_utils.py\" 158) variant_arg \"Some\")) ((\"smartpy_utils.py\" 144) literal (intOrNat 256))) ((\"smartpy_utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 160) set ((\"smartpy_utils.py\" 160) get_local \"utils_56_bytes\") ((\"smartpy_utils.py\" 160) cons ((\"smartpy_utils.py\" 147) open_variant ((\"smartpy_utils.py\" 145) slice ((\"smartpy_utils.py\" 145) literal (intOrNat 6)) ((\"smartpy_utils.py\" 145) literal (intOrNat 1)) ((\"smartpy_utils.py\" 146) pack ((\"smartpy_utils.py\" 146) MUL ((\"smartpy_utils.py\" 146) to_int ((\"smartpy_utils.py\" 160) or ((\"smartpy_utils.py\" 160) lsl ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 160) literal (intOrNat 4))) ((\"smartpy_utils.py\" 158) variant_arg \"Some\"))) ((\"smartpy_utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 160) get_local \"utils_56_bytes\"))))) ((\"smartpy_utils.py\" 161) match ((\"smartpy_utils.py\" 157) cases_arg \"match_smartpy_utils_157\") \"None\" \"None\" (((\"smartpy_utils.py\" 162) set ((\"utils.py\" 154) get_local \"utils_55_left_nibble\") ((\"smartpy_utils.py\" 162) variant \"Some\" ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\"))))))))) ((\"smartpy_utils.py\" 164) match_cases ((\"smartpy_utils.py\" 164) get_local \"utils_55_left_nibble\") \"match_smartpy_utils_164\" (((\"smartpy_utils.py\" 165) match ((\"smartpy_utils.py\" 164) cases_arg \"match_smartpy_utils_164\") \"Some\" \"Some\" (((\"smartpy_utils.py\" 166) set ((\"utils.py\" 154) get_local \"utils_55_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"smartpy_utils.py\" 144) verify ((\"smartpy_utils.py\" 144) lt ((\"smartpy_utils.py\" 167) or ((\"smartpy_utils.py\" 167) literal (intOrNat 0)) ((\"smartpy_utils.py\" 165) variant_arg \"Some\")) ((\"smartpy_utils.py\" 144) literal (intOrNat 256))) ((\"smartpy_utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 167) set ((\"smartpy_utils.py\" 167) get_local \"utils_56_bytes\") ((\"smartpy_utils.py\" 167) cons ((\"smartpy_utils.py\" 147) open_variant ((\"smartpy_utils.py\" 145) slice ((\"smartpy_utils.py\" 145) literal (intOrNat 6)) ((\"smartpy_utils.py\" 145) literal (intOrNat 1)) ((\"smartpy_utils.py\" 146) pack ((\"smartpy_utils.py\" 146) MUL ((\"smartpy_utils.py\" 146) to_int ((\"smartpy_utils.py\" 167) or ((\"smartpy_utils.py\" 167) literal (intOrNat 0)) ((\"smartpy_utils.py\" 165) variant_arg \"Some\"))) ((\"smartpy_utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 167) get_local \"utils_56_bytes\"))))))) ((\"smartpy_utils.py\" 305) define_local \"lengthBytes\" ((\"smartpy_utils.py\" 169) concat ((\"smartpy_utils.py\" 169) get_local \"utils_56_bytes\")) True) ((\"smartpy_utils.py\" 306) while_block ((\"smartpy_utils.py\" 306) lt ((\"smartpy_utils.py\" 306) size ((\"smartpy_utils.py\" 306) get_local \"lengthBytes\")) ((\"smartpy_utils.py\" 306) literal (intOrNat 4))) (((\"smartpy_utils.py\" 307) set ((\"utils.py\" 154) get_local \"lengthBytes\") ((\"smartpy_utils.py\" 307) add ((\"smartpy_utils.py\" 307) literal (bytes \"0x00\")) ((\"smartpy_utils.py\" 307) get_local \"lengthBytes\"))))) ((\"utils.py\" 73) verify ((\"utils.py\" 73) eq ((\"smartpy_utils.py\" 314) open_variant ((\"smartpy_utils.py\" 314) unpack ((\"smartpy_utils.py\" 313) concat ((\"smartpy_utils.py\" 313) list ((\"smartpy_utils.py\" 313) literal (bytes \"0x05\")) ((\"smartpy_utils.py\" 313) literal (bytes \"0x01\")) ((\"smartpy_utils.py\" 313) get_local \"lengthBytes\") ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"smartpy_utils.py\" 314) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 73) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 75) verify ((\"utils.py\" 75) eq ((\"smartpy_utils.py\" 359) and ((\"smartpy_utils.py\" 359) ge ((\"smartpy_utils.py\" 359) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 75) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"smartpy_utils.py\" 359) le ((\"smartpy_utils.py\" 359) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 75) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 75) literal (bool False)))) ((\"utils.py\" 76) verify ((\"smartpy_utils.py\" 359) and ((\"smartpy_utils.py\" 359) ge ((\"smartpy_utils.py\" 359) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 76) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"smartpy_utils.py\" 359) le ((\"smartpy_utils.py\" 359) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 76) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"utils.py\" 154) lambda_general None False None \"_x0\" \"\" (((\"smartpy_utils.py\" 339) define_local \"utils_0\" ((\"smartpy_utils.py\" 339) size ((\"utils.py\" 154) lambda_params \"_x0\")) True) ((\"smartpy_utils.py\" 340) define_local \"utils_1\" ((\"smartpy_utils.py\" 340) literal (nat 0)) True) ((\"smartpy_utils.py\" 341) for_group \"utils_2\" ((\"smartpy_utils.py\" 341) range ((\"smartpy_utils.py\" 341) literal (intOrNat 0)) ((\"smartpy_utils.py\" 341) get_local \"utils_0\") ((\"smartpy_utils.py\" 341) literal (intOrNat 1))) (((\"smartpy_utils.py\" 342) define_local \"compute_smartpy_utils_342\" ((\"smartpy_utils.py\" 342) open_variant ((\"smartpy_utils.py\" 342) slice ((\"smartpy_utils.py\" 341) iter \"utils_2\") ((\"smartpy_utils.py\" 342) literal (intOrNat 1)) ((\"utils.py\" 154) lambda_params \"_x0\")) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 343) define_local \"compute_smartpy_utils_343\" ((\"smartpy_utils.py\" 343) mul_homo ((\"smartpy_utils.py\" 343) open_variant ((\"smartpy_utils.py\" 343) is_nat ((\"smartpy_utils.py\" 343) sub ((\"smartpy_utils.py\" 343) get_local \"utils_0\") ((\"smartpy_utils.py\" 343) add ((\"smartpy_utils.py\" 341) iter \"utils_2\") ((\"smartpy_utils.py\" 343) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 343) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 349) set ((\"utils.py\" 154) get_local \"utils_1\") ((\"smartpy_utils.py\" 349) add ((\"smartpy_utils.py\" 349) get_local \"utils_1\") ((\"smartpy_utils.py\" 349) mul_homo ((\"smartpy_utils.py\" 349) open_variant ((\"smartpy_utils.py\" 349) is_nat ((\"smartpy_utils.py\" 350) to_int ((\"smartpy_utils.py\" 350) open_variant ((\"smartpy_utils.py\" 350) unpack ((\"smartpy_utils.py\" 348) add ((\"smartpy_utils.py\" 348) add ((\"smartpy_utils.py\" 348) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 342) get_local \"compute_smartpy_utils_342\")) ((\"smartpy_utils.py\" 348) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 343) get_local \"compute_smartpy_utils_343\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 19) result ((\"smartpy_utils.py\" 353) get_local \"utils_1\"))))) (int_of_string ((\"utils.py\" 154) lambda_general None False None \"_x2\" \"\" (((\"smartpy_utils.py\" 324) define_local \"utils_3\" ((\"utils.py\" 154) lambda_params \"_x2\") True) ((\"smartpy_utils.py\" 325) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 154) lambda_params \"_x2\")) (((\"smartpy_utils.py\" 326) set ((\"utils.py\" 154) get_local \"utils_3\") ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) slice ((\"smartpy_utils.py\" 326) literal (intOrNat 1)) ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) is_nat ((\"smartpy_utils.py\" 326) sub ((\"smartpy_utils.py\" 326) size ((\"utils.py\" 154) lambda_params \"_x2\")) ((\"smartpy_utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 154) lambda_params \"_x2\")) \"Some\" ((\"smartpy_utils.py\" 326) literal (string \"\")))))) ((\"smartpy_utils.py\" 328) define_local \"utils_4\" ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 329) for_group \"utils_5\" ((\"smartpy_utils.py\" 329) range ((\"smartpy_utils.py\" 329) literal (intOrNat 0)) ((\"smartpy_utils.py\" 329) size ((\"smartpy_utils.py\" 329) get_local \"utils_3\")) ((\"smartpy_utils.py\" 329) literal (intOrNat 1))) (((\"smartpy_utils.py\" 330) set ((\"utils.py\" 154) get_local \"utils_4\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) literal (intOrNat 10)) ((\"smartpy_utils.py\" 330) get_local \"utils_4\")) ((\"smartpy_utils.py\" 330) get_item ((\"smartpy_utils.py\" 321) map (((\"utils.py\" 154) literal (string \"0\")) ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 154) literal (string \"1\")) ((\"utils.py\" 154) literal (intOrNat 1))) (((\"utils.py\" 154) literal (string \"2\")) ((\"utils.py\" 154) literal (intOrNat 2))) (((\"utils.py\" 154) literal (string \"3\")) ((\"utils.py\" 154) literal (intOrNat 3))) (((\"utils.py\" 154) literal (string \"4\")) ((\"utils.py\" 154) literal (intOrNat 4))) (((\"utils.py\" 154) literal (string \"5\")) ((\"utils.py\" 154) literal (intOrNat 5))) (((\"utils.py\" 154) literal (string \"6\")) ((\"utils.py\" 154) literal (intOrNat 6))) (((\"utils.py\" 154) literal (string \"7\")) ((\"utils.py\" 154) literal (intOrNat 7))) (((\"utils.py\" 154) literal (string \"8\")) ((\"utils.py\" 154) literal (intOrNat 8))) (((\"utils.py\" 154) literal (string \"9\")) ((\"utils.py\" 154) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) slice ((\"smartpy_utils.py\" 329) iter \"utils_5\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1)) ((\"smartpy_utils.py\" 330) get_local \"utils_3\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 332) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 154) lambda_params \"_x2\")) (((\"smartpy_utils.py\" 333) set ((\"utils.py\" 154) get_local \"utils_4\") ((\"smartpy_utils.py\" 333) mul_homo ((\"smartpy_utils.py\" 333) get_local \"utils_4\") ((\"smartpy_utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 15) result ((\"smartpy_utils.py\" 335) get_local \"utils_4\"))))) (math_median ((\"utils.py\" 154) lambda_general None False None \"_x4\" \"\" (((\"smartpy_utils.py\" 83) define_local \"utils_6_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_7_x\" ((\"utils.py\" 154) lambda_params \"_x4\") (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_6_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_7_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_6_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_7_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_6_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_7_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_6_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_7_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"utils.py\" 154) lambda_params \"_x4\")) True) ((\"smartpy_utils.py\" 91) define_local \"utils_8_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_9_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_10_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_9_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_11_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_12_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_6_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_10_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_9_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 154) get_local \"utils_8_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_12_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 154) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_12_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_9_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 154) get_local \"utils_10_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 154) get_local \"utils_8_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_8_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_12_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 154) get_local \"utils_8_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_8_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 154) get_local \"utils_10_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 154) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_12_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_9_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 154) get_local \"utils_8_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_12_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 154) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_11_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_12_x\") \"value\"))))))))) ((\"utils.py\" 39) result ((\"smartpy_utils.py\" 112) get_local \"utils_8_result\"))))) (math_pow ((\"utils.py\" 154) lambda_general None False None \"_x6\" \"\" (((\"utils.py\" 35) result ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 35) attr ((\"utils.py\" 154) lambda_params \"_x6\") \"exponent\") ((\"utils.py\" 35) attr ((\"utils.py\" 154) lambda_params \"_x6\") \"base\") ((\"smartpy_utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"utils.py\" 154) lambda_general None False None \"_x8\" \"\" (((\"utils.py\" 31) result ((\"smartpy_utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 31) attr ((\"utils.py\" 154) lambda_params \"_x8\") \"text\") ((\"utils.py\" 31) attr ((\"utils.py\" 154) lambda_params \"_x8\") \"postfix\")))))) (string_of_int ((\"utils.py\" 154) lambda_general None False None \"_x10\" \"\" (((\"smartpy_utils.py\" 286) define_local \"utils_13\" ((\"smartpy_utils.py\" 286) abs ((\"utils.py\" 154) lambda_params \"_x10\")) True) ((\"smartpy_utils.py\" 287) define_local \"utils_14\" ((\"smartpy_utils.py\" 287) list ) True) ((\"smartpy_utils.py\" 289) if_block ((\"smartpy_utils.py\" 289) eq ((\"smartpy_utils.py\" 289) get_local \"utils_13\") ((\"smartpy_utils.py\" 289) literal (intOrNat 0))) (((\"smartpy_utils.py\" 290) set ((\"smartpy_utils.py\" 290) get_local \"utils_14\") ((\"smartpy_utils.py\" 290) cons ((\"smartpy_utils.py\" 290) literal (string \"0\")) ((\"smartpy_utils.py\" 290) get_local \"utils_14\"))))) ((\"smartpy_utils.py\" 291) while_block ((\"smartpy_utils.py\" 291) gt ((\"smartpy_utils.py\" 291) get_local \"utils_13\") ((\"smartpy_utils.py\" 291) literal (intOrNat 0))) (((\"smartpy_utils.py\" 292) set ((\"smartpy_utils.py\" 292) get_local \"utils_14\") ((\"smartpy_utils.py\" 292) cons ((\"smartpy_utils.py\" 292) get_item ((\"smartpy_utils.py\" 284) map (((\"utils.py\" 154) literal (intOrNat 0)) ((\"utils.py\" 154) literal (string \"0\"))) (((\"utils.py\" 154) literal (intOrNat 1)) ((\"utils.py\" 154) literal (string \"1\"))) (((\"utils.py\" 154) literal (intOrNat 2)) ((\"utils.py\" 154) literal (string \"2\"))) (((\"utils.py\" 154) literal (intOrNat 3)) ((\"utils.py\" 154) literal (string \"3\"))) (((\"utils.py\" 154) literal (intOrNat 4)) ((\"utils.py\" 154) literal (string \"4\"))) (((\"utils.py\" 154) literal (intOrNat 5)) ((\"utils.py\" 154) literal (string \"5\"))) (((\"utils.py\" 154) literal (intOrNat 6)) ((\"utils.py\" 154) literal (string \"6\"))) (((\"utils.py\" 154) literal (intOrNat 7)) ((\"utils.py\" 154) literal (string \"7\"))) (((\"utils.py\" 154) literal (intOrNat 8)) ((\"utils.py\" 154) literal (string \"8\"))) (((\"utils.py\" 154) literal (intOrNat 9)) ((\"utils.py\" 154) literal (string \"9\")))) ((\"smartpy_utils.py\" 292) mod ((\"smartpy_utils.py\" 292) get_local \"utils_13\") ((\"smartpy_utils.py\" 292) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 292) get_local \"utils_14\"))) ((\"smartpy_utils.py\" 293) set ((\"utils.py\" 154) get_local \"utils_13\") ((\"smartpy_utils.py\" 293) div ((\"smartpy_utils.py\" 293) get_local \"utils_13\") ((\"smartpy_utils.py\" 293) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 295) define_local \"utils_15\" ((\"smartpy_utils.py\" 295) concat ((\"smartpy_utils.py\" 295) get_local \"utils_14\")) True) ((\"smartpy_utils.py\" 296) if_block ((\"smartpy_utils.py\" 285) lt ((\"utils.py\" 154) lambda_params \"_x10\") ((\"smartpy_utils.py\" 285) literal (intOrNat 0))) (((\"smartpy_utils.py\" 297) set ((\"utils.py\" 154) get_local \"utils_15\") ((\"smartpy_utils.py\" 297) add ((\"smartpy_utils.py\" 297) literal (string \"-\")) ((\"smartpy_utils.py\" 297) get_local \"utils_15\"))))) ((\"utils.py\" 11) result ((\"smartpy_utils.py\" 299) get_local \"utils_15\"))))) (string_split ((\"utils.py\" 154) lambda_general None False None \"_x12\" \"\" (((\"smartpy_utils.py\" 271) define_local \"utils_16\" ((\"smartpy_utils.py\" 271) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 272) define_local \"utils_17\" ((\"smartpy_utils.py\" 272) list ) True) ((\"smartpy_utils.py\" 273) for_group \"utils_18\" ((\"smartpy_utils.py\" 273) range ((\"smartpy_utils.py\" 273) literal (intOrNat 0)) ((\"smartpy_utils.py\" 273) size ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params \"_x12\") \"text\")) ((\"smartpy_utils.py\" 273) literal (intOrNat 1))) (((\"smartpy_utils.py\" 274) if_block ((\"smartpy_utils.py\" 274) eq ((\"smartpy_utils.py\" 274) open_variant ((\"smartpy_utils.py\" 274) slice ((\"smartpy_utils.py\" 273) iter \"utils_18\") ((\"smartpy_utils.py\" 274) literal (intOrNat 1)) ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params \"_x12\") \"separator\")) (((\"smartpy_utils.py\" 275) set ((\"smartpy_utils.py\" 275) get_local \"utils_17\") ((\"smartpy_utils.py\" 275) cons ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) slice ((\"smartpy_utils.py\" 275) get_local \"utils_16\") ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) is_nat ((\"smartpy_utils.py\" 275) sub ((\"smartpy_utils.py\" 273) iter \"utils_18\") ((\"smartpy_utils.py\" 275) get_local \"utils_16\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) get_local \"utils_17\"))) ((\"smartpy_utils.py\" 276) set ((\"utils.py\" 154) get_local \"utils_16\") ((\"smartpy_utils.py\" 276) add ((\"smartpy_utils.py\" 273) iter \"utils_18\") ((\"smartpy_utils.py\" 276) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 277) if_block ((\"smartpy_utils.py\" 277) gt ((\"smartpy_utils.py\" 277) size ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params \"_x12\") \"text\")) ((\"smartpy_utils.py\" 277) literal (intOrNat 0))) (((\"smartpy_utils.py\" 278) set ((\"smartpy_utils.py\" 278) get_local \"utils_17\") ((\"smartpy_utils.py\" 278) cons ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) slice ((\"smartpy_utils.py\" 278) get_local \"utils_16\") ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) is_nat ((\"smartpy_utils.py\" 278) sub ((\"smartpy_utils.py\" 278) size ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params \"_x12\") \"text\")) ((\"smartpy_utils.py\" 278) get_local \"utils_16\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) get_local \"utils_17\"))))) ((\"utils.py\" 23) result ((\"smartpy_utils.py\" 279) rev ((\"smartpy_utils.py\" 279) get_local \"utils_17\")))))) (string_starts_with ((\"utils.py\" 154) lambda_general None False None \"_x14\" \"\" (((\"utils.py\" 27) result ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 27) attr ((\"utils.py\" 154) lambda_params \"_x14\") \"prefix\") ((\"utils.py\" 27) attr ((\"utils.py\" 154) lambda_params \"_x14\") \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"utils.py\" 154) static_id 0)",
    "line_no": "(\"utils.py\" 154)",
    "show": true
   },
   {
    "action": "message",
    "id": "((\"utils.py\" 154) static_id 0)",
    "line_no": "(\"utils.py\" 156)",
    "message": "test",
    "params": "((\"utils.py\" 156) record )"
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "UtilsTester2_test",
  "longname": "UtilsTester2_test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"utils.py\" 163) static_id 0) \nstorage ()\nstorage_type ((unknown 73))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 113) (((\"utils.py\" 286) define_local \"utils_21\" ((\"utils.py\" 286) literal (intOrNat 1)) True) ((\"utils.py\" 287) define_local \"utils_22\" ((\"utils.py\" 287) list ) True) ((\"utils.py\" 289) if_block ((\"utils.py\" 289) eq ((\"utils.py\" 289) get_local \"utils_21\") ((\"utils.py\" 289) literal (intOrNat 0))) (((\"utils.py\" 290) set ((\"utils.py\" 290) get_local \"utils_22\") ((\"utils.py\" 290) cons ((\"utils.py\" 290) literal (string \"0\")) ((\"utils.py\" 290) get_local \"utils_22\"))))) ((\"utils.py\" 291) while_block ((\"utils.py\" 291) gt ((\"utils.py\" 291) get_local \"utils_21\") ((\"utils.py\" 291) literal (intOrNat 0))) (((\"utils.py\" 292) set ((\"utils.py\" 292) get_local \"utils_22\") ((\"utils.py\" 292) cons ((\"utils.py\" 292) get_item ((\"utils.py\" 284) map (((\"utils.py\" 163) literal (intOrNat 0)) ((\"utils.py\" 163) literal (string \"0\"))) (((\"utils.py\" 163) literal (intOrNat 1)) ((\"utils.py\" 163) literal (string \"1\"))) (((\"utils.py\" 163) literal (intOrNat 2)) ((\"utils.py\" 163) literal (string \"2\"))) (((\"utils.py\" 163) literal (intOrNat 3)) ((\"utils.py\" 163) literal (string \"3\"))) (((\"utils.py\" 163) literal (intOrNat 4)) ((\"utils.py\" 163) literal (string \"4\"))) (((\"utils.py\" 163) literal (intOrNat 5)) ((\"utils.py\" 163) literal (string \"5\"))) (((\"utils.py\" 163) literal (intOrNat 6)) ((\"utils.py\" 163) literal (string \"6\"))) (((\"utils.py\" 163) literal (intOrNat 7)) ((\"utils.py\" 163) literal (string \"7\"))) (((\"utils.py\" 163) literal (intOrNat 8)) ((\"utils.py\" 163) literal (string \"8\"))) (((\"utils.py\" 163) literal (intOrNat 9)) ((\"utils.py\" 163) literal (string \"9\")))) ((\"utils.py\" 292) mod ((\"utils.py\" 292) get_local \"utils_21\") ((\"utils.py\" 292) literal (intOrNat 10)))) ((\"utils.py\" 292) get_local \"utils_22\"))) ((\"utils.py\" 293) set ((\"utils.py\" 163) get_local \"utils_21\") ((\"utils.py\" 293) div ((\"utils.py\" 293) get_local \"utils_21\") ((\"utils.py\" 293) literal (intOrNat 10)))))) ((\"utils.py\" 295) define_local \"utils_23\" ((\"utils.py\" 295) concat ((\"utils.py\" 295) get_local \"utils_22\")) True) ((\"utils.py\" 296) if_block ((\"utils.py\" 296) literal (bool True)) (((\"utils.py\" 297) set ((\"utils.py\" 163) get_local \"utils_23\") ((\"utils.py\" 297) add ((\"utils.py\" 297) literal (string \"-\")) ((\"utils.py\" 297) get_local \"utils_23\"))))) ((\"utils.py\" 114) verify ((\"utils.py\" 114) eq ((\"utils.py\" 299) get_local \"utils_23\") ((\"utils.py\" 114) literal (string \"-1\")))) ((\"utils.py\" 286) define_local \"utils_24\" ((\"utils.py\" 286) literal (intOrNat 1)) True) ((\"utils.py\" 287) define_local \"utils_25\" ((\"utils.py\" 287) list ) True) ((\"utils.py\" 289) if_block ((\"utils.py\" 289) eq ((\"utils.py\" 289) get_local \"utils_24\") ((\"utils.py\" 289) literal (intOrNat 0))) (((\"utils.py\" 290) set ((\"utils.py\" 290) get_local \"utils_25\") ((\"utils.py\" 290) cons ((\"utils.py\" 290) literal (string \"0\")) ((\"utils.py\" 290) get_local \"utils_25\"))))) ((\"utils.py\" 291) while_block ((\"utils.py\" 291) gt ((\"utils.py\" 291) get_local \"utils_24\") ((\"utils.py\" 291) literal (intOrNat 0))) (((\"utils.py\" 292) set ((\"utils.py\" 292) get_local \"utils_25\") ((\"utils.py\" 292) cons ((\"utils.py\" 292) get_item ((\"utils.py\" 284) map (((\"utils.py\" 163) literal (intOrNat 0)) ((\"utils.py\" 163) literal (string \"0\"))) (((\"utils.py\" 163) literal (intOrNat 1)) ((\"utils.py\" 163) literal (string \"1\"))) (((\"utils.py\" 163) literal (intOrNat 2)) ((\"utils.py\" 163) literal (string \"2\"))) (((\"utils.py\" 163) literal (intOrNat 3)) ((\"utils.py\" 163) literal (string \"3\"))) (((\"utils.py\" 163) literal (intOrNat 4)) ((\"utils.py\" 163) literal (string \"4\"))) (((\"utils.py\" 163) literal (intOrNat 5)) ((\"utils.py\" 163) literal (string \"5\"))) (((\"utils.py\" 163) literal (intOrNat 6)) ((\"utils.py\" 163) literal (string \"6\"))) (((\"utils.py\" 163) literal (intOrNat 7)) ((\"utils.py\" 163) literal (string \"7\"))) (((\"utils.py\" 163) literal (intOrNat 8)) ((\"utils.py\" 163) literal (string \"8\"))) (((\"utils.py\" 163) literal (intOrNat 9)) ((\"utils.py\" 163) literal (string \"9\")))) ((\"utils.py\" 292) mod ((\"utils.py\" 292) get_local \"utils_24\") ((\"utils.py\" 292) literal (intOrNat 10)))) ((\"utils.py\" 292) get_local \"utils_25\"))) ((\"utils.py\" 293) set ((\"utils.py\" 163) get_local \"utils_24\") ((\"utils.py\" 293) div ((\"utils.py\" 293) get_local \"utils_24\") ((\"utils.py\" 293) literal (intOrNat 10)))))) ((\"utils.py\" 295) define_local \"utils_26\" ((\"utils.py\" 295) concat ((\"utils.py\" 295) get_local \"utils_25\")) True) ((\"utils.py\" 296) if_block ((\"utils.py\" 296) literal (bool False)) (((\"utils.py\" 297) set ((\"utils.py\" 163) get_local \"utils_26\") ((\"utils.py\" 297) add ((\"utils.py\" 297) literal (string \"-\")) ((\"utils.py\" 297) get_local \"utils_26\"))))) ((\"utils.py\" 115) verify ((\"utils.py\" 115) eq ((\"utils.py\" 299) get_local \"utils_26\") ((\"utils.py\" 115) literal (string \"1\")))) ((\"utils.py\" 116) verify ((\"utils.py\" 116) eq ((\"utils.py\" 116) call_lambda ((\"smartpy/tests/utils.py\" 81) private \"string_of_int\") ((\"utils.py\" 116) literal (intOrNat 2))) ((\"utils.py\" 116) literal (string \"2\")))) ((\"utils.py\" 324) define_local \"utils_27\" ((\"utils.py\" 324) literal (string \"1\")) True) ((\"utils.py\" 325) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 234) literal (string \"1\"))) (((\"utils.py\" 326) set ((\"utils.py\" 163) get_local \"utils_27\") ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) slice ((\"utils.py\" 326) literal (intOrNat 1)) ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) is_nat ((\"utils.py\" 326) sub ((\"utils.py\" 326) size ((\"utils.py\" 326) literal (string \"1\"))) ((\"utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 326) literal (string \"1\"))) \"Some\" ((\"utils.py\" 326) literal (string \"\")))))) ((\"utils.py\" 328) define_local \"utils_28\" ((\"utils.py\" 328) literal (intOrNat 0)) True) ((\"utils.py\" 329) for_group \"utils_29\" ((\"utils.py\" 329) range ((\"utils.py\" 329) literal (intOrNat 0)) ((\"utils.py\" 329) size ((\"utils.py\" 329) get_local \"utils_27\")) ((\"utils.py\" 329) literal (intOrNat 1))) (((\"utils.py\" 330) set ((\"utils.py\" 163) get_local \"utils_28\") ((\"utils.py\" 330) add ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) literal (intOrNat 10)) ((\"utils.py\" 330) get_local \"utils_28\")) ((\"utils.py\" 330) get_item ((\"utils.py\" 321) map (((\"utils.py\" 163) literal (string \"0\")) ((\"utils.py\" 163) literal (intOrNat 0))) (((\"utils.py\" 163) literal (string \"1\")) ((\"utils.py\" 163) literal (intOrNat 1))) (((\"utils.py\" 163) literal (string \"2\")) ((\"utils.py\" 163) literal (intOrNat 2))) (((\"utils.py\" 163) literal (string \"3\")) ((\"utils.py\" 163) literal (intOrNat 3))) (((\"utils.py\" 163) literal (string \"4\")) ((\"utils.py\" 163) literal (intOrNat 4))) (((\"utils.py\" 163) literal (string \"5\")) ((\"utils.py\" 163) literal (intOrNat 5))) (((\"utils.py\" 163) literal (string \"6\")) ((\"utils.py\" 163) literal (intOrNat 6))) (((\"utils.py\" 163) literal (string \"7\")) ((\"utils.py\" 163) literal (intOrNat 7))) (((\"utils.py\" 163) literal (string \"8\")) ((\"utils.py\" 163) literal (intOrNat 8))) (((\"utils.py\" 163) literal (string \"9\")) ((\"utils.py\" 163) literal (intOrNat 9)))) ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) slice ((\"utils.py\" 329) iter \"utils_29\") ((\"utils.py\" 330) literal (intOrNat 1)) ((\"utils.py\" 330) get_local \"utils_27\")) \"Some\" \"None\")))))) ((\"utils.py\" 332) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 234) literal (string \"1\"))) (((\"utils.py\" 333) set ((\"utils.py\" 163) get_local \"utils_28\") ((\"utils.py\" 333) mul_homo ((\"utils.py\" 333) get_local \"utils_28\") ((\"utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 118) verify ((\"utils.py\" 118) eq ((\"utils.py\" 335) get_local \"utils_28\") ((\"utils.py\" 118) literal (intOrNat 1)))) ((\"utils.py\" 324) define_local \"utils_30\" ((\"utils.py\" 324) literal (string \"-1\")) True) ((\"utils.py\" 325) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 234) literal (string \"-1\"))) (((\"utils.py\" 326) set ((\"utils.py\" 163) get_local \"utils_30\") ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) slice ((\"utils.py\" 326) literal (intOrNat 1)) ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) is_nat ((\"utils.py\" 326) sub ((\"utils.py\" 326) size ((\"utils.py\" 326) literal (string \"-1\"))) ((\"utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 326) literal (string \"-1\"))) \"Some\" ((\"utils.py\" 326) literal (string \"\")))))) ((\"utils.py\" 328) define_local \"utils_31\" ((\"utils.py\" 328) literal (intOrNat 0)) True) ((\"utils.py\" 329) for_group \"utils_32\" ((\"utils.py\" 329) range ((\"utils.py\" 329) literal (intOrNat 0)) ((\"utils.py\" 329) size ((\"utils.py\" 329) get_local \"utils_30\")) ((\"utils.py\" 329) literal (intOrNat 1))) (((\"utils.py\" 330) set ((\"utils.py\" 163) get_local \"utils_31\") ((\"utils.py\" 330) add ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) literal (intOrNat 10)) ((\"utils.py\" 330) get_local \"utils_31\")) ((\"utils.py\" 330) get_item ((\"utils.py\" 321) map (((\"utils.py\" 163) literal (string \"0\")) ((\"utils.py\" 163) literal (intOrNat 0))) (((\"utils.py\" 163) literal (string \"1\")) ((\"utils.py\" 163) literal (intOrNat 1))) (((\"utils.py\" 163) literal (string \"2\")) ((\"utils.py\" 163) literal (intOrNat 2))) (((\"utils.py\" 163) literal (string \"3\")) ((\"utils.py\" 163) literal (intOrNat 3))) (((\"utils.py\" 163) literal (string \"4\")) ((\"utils.py\" 163) literal (intOrNat 4))) (((\"utils.py\" 163) literal (string \"5\")) ((\"utils.py\" 163) literal (intOrNat 5))) (((\"utils.py\" 163) literal (string \"6\")) ((\"utils.py\" 163) literal (intOrNat 6))) (((\"utils.py\" 163) literal (string \"7\")) ((\"utils.py\" 163) literal (intOrNat 7))) (((\"utils.py\" 163) literal (string \"8\")) ((\"utils.py\" 163) literal (intOrNat 8))) (((\"utils.py\" 163) literal (string \"9\")) ((\"utils.py\" 163) literal (intOrNat 9)))) ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) slice ((\"utils.py\" 329) iter \"utils_32\") ((\"utils.py\" 330) literal (intOrNat 1)) ((\"utils.py\" 330) get_local \"utils_30\")) \"Some\" \"None\")))))) ((\"utils.py\" 332) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 234) literal (string \"-1\"))) (((\"utils.py\" 333) set ((\"utils.py\" 163) get_local \"utils_31\") ((\"utils.py\" 333) mul_homo ((\"utils.py\" 333) get_local \"utils_31\") ((\"utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 119) verify ((\"utils.py\" 119) eq ((\"utils.py\" 335) get_local \"utils_31\") ((\"utils.py\" 119) literal (int -1)))) ((\"utils.py\" 120) verify ((\"utils.py\" 120) eq ((\"utils.py\" 120) call_lambda ((\"smartpy/tests/utils.py\" 85) private \"int_of_string\") ((\"utils.py\" 120) literal (string \"2\"))) ((\"utils.py\" 120) literal (intOrNat 2)))) ((\"utils.py\" 339) define_local \"utils_33\" ((\"utils.py\" 339) size ((\"utils.py\" 121) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 340) define_local \"utils_34\" ((\"utils.py\" 340) literal (nat 0)) True) ((\"utils.py\" 341) for_group \"utils_35\" ((\"utils.py\" 341) range ((\"utils.py\" 341) literal (intOrNat 0)) ((\"utils.py\" 341) get_local \"utils_33\") ((\"utils.py\" 341) literal (intOrNat 1))) (((\"utils.py\" 342) define_local \"compute_utils_342\" ((\"utils.py\" 342) open_variant ((\"utils.py\" 342) slice ((\"utils.py\" 341) iter \"utils_35\") ((\"utils.py\" 342) literal (intOrNat 1)) ((\"utils.py\" 121) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 343) define_local \"compute_utils_343\" ((\"utils.py\" 343) mul_homo ((\"utils.py\" 343) open_variant ((\"utils.py\" 343) is_nat ((\"utils.py\" 343) sub ((\"utils.py\" 343) get_local \"utils_33\") ((\"utils.py\" 343) add ((\"utils.py\" 341) iter \"utils_35\") ((\"utils.py\" 343) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 343) literal (intOrNat 2))) True) ((\"utils.py\" 349) set ((\"utils.py\" 163) get_local \"utils_34\") ((\"utils.py\" 349) add ((\"utils.py\" 349) get_local \"utils_34\") ((\"utils.py\" 349) mul_homo ((\"utils.py\" 349) open_variant ((\"utils.py\" 349) is_nat ((\"utils.py\" 350) to_int ((\"utils.py\" 350) open_variant ((\"utils.py\" 350) unpack ((\"utils.py\" 348) add ((\"utils.py\" 348) add ((\"utils.py\" 348) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 342) get_local \"compute_utils_342\")) ((\"utils.py\" 348) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 343) get_local \"compute_utils_343\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 121) verify ((\"utils.py\" 121) eq ((\"utils.py\" 353) get_local \"utils_34\") ((\"utils.py\" 121) literal (intOrNat 256)))) ((\"utils.py\" 122) verify ((\"utils.py\" 122) eq ((\"utils.py\" 122) call_lambda ((\"smartpy/tests/utils.py\" 89) private \"int_of_bytes\") ((\"utils.py\" 122) literal (bytes \"0x0100\"))) ((\"utils.py\" 122) literal (intOrNat 256)))) ((\"utils.py\" 271) define_local \"utils_36\" ((\"utils.py\" 271) literal (intOrNat 0)) True) ((\"utils.py\" 272) define_local \"utils_37\" ((\"utils.py\" 272) list ) True) ((\"utils.py\" 273) for_group \"utils_38\" ((\"utils.py\" 273) range ((\"utils.py\" 273) literal (intOrNat 0)) ((\"utils.py\" 273) size ((\"utils.py\" 273) literal (string \"a b\"))) ((\"utils.py\" 273) literal (intOrNat 1))) (((\"utils.py\" 274) if_block ((\"utils.py\" 274) eq ((\"utils.py\" 274) open_variant ((\"utils.py\" 274) slice ((\"utils.py\" 273) iter \"utils_38\") ((\"utils.py\" 274) literal (intOrNat 1)) ((\"utils.py\" 274) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 274) literal (string \" \"))) (((\"utils.py\" 275) set ((\"utils.py\" 275) get_local \"utils_37\") ((\"utils.py\" 275) cons ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) slice ((\"utils.py\" 275) get_local \"utils_36\") ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) is_nat ((\"utils.py\" 275) sub ((\"utils.py\" 273) iter \"utils_38\") ((\"utils.py\" 275) get_local \"utils_36\"))) \"Some\" \"None\") ((\"utils.py\" 275) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 275) get_local \"utils_37\"))) ((\"utils.py\" 276) set ((\"utils.py\" 163) get_local \"utils_36\") ((\"utils.py\" 276) add ((\"utils.py\" 273) iter \"utils_38\") ((\"utils.py\" 276) literal (intOrNat 1)))))))) ((\"utils.py\" 277) if_block ((\"utils.py\" 277) gt ((\"utils.py\" 277) size ((\"utils.py\" 277) literal (string \"a b\"))) ((\"utils.py\" 277) literal (intOrNat 0))) (((\"utils.py\" 278) set ((\"utils.py\" 278) get_local \"utils_37\") ((\"utils.py\" 278) cons ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) slice ((\"utils.py\" 278) get_local \"utils_36\") ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) is_nat ((\"utils.py\" 278) sub ((\"utils.py\" 278) size ((\"utils.py\" 278) literal (string \"a b\"))) ((\"utils.py\" 278) get_local \"utils_36\"))) \"Some\" \"None\") ((\"utils.py\" 278) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 278) get_local \"utils_37\"))))) ((\"utils.py\" 124) verify ((\"utils.py\" 124) eq ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 279) rev ((\"utils.py\" 279) get_local \"utils_37\")) (unknown 115))) ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 124) list ((\"utils.py\" 124) literal (string \"a\")) ((\"utils.py\" 124) literal (string \"b\"))) (unknown 115))))) ((\"utils.py\" 271) define_local \"utils_39\" ((\"utils.py\" 271) literal (intOrNat 0)) True) ((\"utils.py\" 272) define_local \"utils_40\" ((\"utils.py\" 272) list ) True) ((\"utils.py\" 273) for_group \"utils_41\" ((\"utils.py\" 273) range ((\"utils.py\" 273) literal (intOrNat 0)) ((\"utils.py\" 273) size ((\"utils.py\" 273) literal (string \"b,a\"))) ((\"utils.py\" 273) literal (intOrNat 1))) (((\"utils.py\" 274) if_block ((\"utils.py\" 274) eq ((\"utils.py\" 274) open_variant ((\"utils.py\" 274) slice ((\"utils.py\" 273) iter \"utils_41\") ((\"utils.py\" 274) literal (intOrNat 1)) ((\"utils.py\" 274) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 274) literal (string \",\"))) (((\"utils.py\" 275) set ((\"utils.py\" 275) get_local \"utils_40\") ((\"utils.py\" 275) cons ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) slice ((\"utils.py\" 275) get_local \"utils_39\") ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) is_nat ((\"utils.py\" 275) sub ((\"utils.py\" 273) iter \"utils_41\") ((\"utils.py\" 275) get_local \"utils_39\"))) \"Some\" \"None\") ((\"utils.py\" 275) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 275) get_local \"utils_40\"))) ((\"utils.py\" 276) set ((\"utils.py\" 163) get_local \"utils_39\") ((\"utils.py\" 276) add ((\"utils.py\" 273) iter \"utils_41\") ((\"utils.py\" 276) literal (intOrNat 1)))))))) ((\"utils.py\" 277) if_block ((\"utils.py\" 277) gt ((\"utils.py\" 277) size ((\"utils.py\" 277) literal (string \"b,a\"))) ((\"utils.py\" 277) literal (intOrNat 0))) (((\"utils.py\" 278) set ((\"utils.py\" 278) get_local \"utils_40\") ((\"utils.py\" 278) cons ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) slice ((\"utils.py\" 278) get_local \"utils_39\") ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) is_nat ((\"utils.py\" 278) sub ((\"utils.py\" 278) size ((\"utils.py\" 278) literal (string \"b,a\"))) ((\"utils.py\" 278) get_local \"utils_39\"))) \"Some\" \"None\") ((\"utils.py\" 278) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 278) get_local \"utils_40\"))))) ((\"utils.py\" 125) verify ((\"utils.py\" 125) eq ((\"utils.py\" 125) pack ((\"utils.py\" 125) type_annotation ((\"utils.py\" 279) rev ((\"utils.py\" 279) get_local \"utils_40\")) (unknown 118))) ((\"utils.py\" 125) pack ((\"utils.py\" 125) type_annotation ((\"utils.py\" 125) list ((\"utils.py\" 125) literal (string \"b\")) ((\"utils.py\" 125) literal (string \"a\"))) (unknown 118))))) ((\"utils.py\" 126) verify ((\"utils.py\" 126) eq ((\"utils.py\" 126) pack ((\"utils.py\" 126) type_annotation ((\"utils.py\" 126) call_lambda ((\"smartpy/tests/utils.py\" 93) private \"string_split\") ((\"utils.py\" 126) record (separator ((\"utils.py\" 126) literal (string \",,\"))) (text ((\"utils.py\" 126) literal (string \"a,b\"))))) (unknown 119))) ((\"utils.py\" 126) pack ((\"utils.py\" 126) type_annotation ((\"utils.py\" 126) list ((\"utils.py\" 126) literal (string \"a,b\"))) (unknown 119))))) ((\"utils.py\" 128) verify ((\"utils.py\" 128) eq ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"a\")) ((\"utils.py\" 234) literal (string \"abc\"))) ((\"utils.py\" 128) literal (bool True)))) ((\"utils.py\" 129) verify ((\"utils.py\" 129) eq ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"b\")) ((\"utils.py\" 234) literal (string \"abc\"))) ((\"utils.py\" 129) literal (bool False)))) ((\"utils.py\" 130) verify ((\"utils.py\" 130) eq ((\"utils.py\" 130) call_lambda ((\"smartpy/tests/utils.py\" 97) private \"string_starts_with\") ((\"utils.py\" 130) record (prefix ((\"utils.py\" 130) literal (string \"a\"))) (text ((\"utils.py\" 130) literal (string \"abc\"))))) ((\"utils.py\" 130) literal (bool True)))) ((\"utils.py\" 132) verify ((\"utils.py\" 132) eq ((\"utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 175) literal (string \"abc\")) ((\"utils.py\" 175) literal (string \"c\"))) ((\"utils.py\" 132) literal (bool True)))) ((\"utils.py\" 133) verify ((\"utils.py\" 133) eq ((\"utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 175) literal (string \"abc\")) ((\"utils.py\" 175) literal (string \"b\"))) ((\"utils.py\" 133) literal (bool False)))) ((\"utils.py\" 134) verify ((\"utils.py\" 134) eq ((\"utils.py\" 134) call_lambda ((\"smartpy/tests/utils.py\" 101) private \"string_ends_with\") ((\"utils.py\" 134) record (postfix ((\"utils.py\" 134) literal (string \"c\"))) (text ((\"utils.py\" 134) literal (string \"abc\"))))) ((\"utils.py\" 134) literal (bool True)))) ((\"utils.py\" 83) define_local \"utils_42_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_43_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3)) ((\"utils.py\" 84) literal (intOrNat 4)) ((\"utils.py\" 84) literal (intOrNat 5))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_42_hist\") ((\"utils.py\" 84) iter \"utils_43_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_42_hist\") ((\"utils.py\" 84) iter \"utils_43_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_42_hist\") ((\"utils.py\" 84) iter \"utils_43_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_42_hist\") ((\"utils.py\" 84) iter \"utils_43_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)) ((\"utils.py\" 90) literal (intOrNat 4)) ((\"utils.py\" 90) literal (intOrNat 5)))) True) ((\"utils.py\" 91) define_local \"utils_44_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_45_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_46_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_45_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_47_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_48_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_42_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_46_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_47_i\") ((\"utils.py\" 97) get_local \"utils_45_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 163) get_local \"utils_44_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_48_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 163) get_local \"utils_47_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_47_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_48_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_47_i\") ((\"utils.py\" 100) get_local \"utils_45_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 163) get_local \"utils_46_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 163) get_local \"utils_44_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_44_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_48_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 163) get_local \"utils_44_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_44_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 163) get_local \"utils_46_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 163) get_local \"utils_47_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_47_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_48_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_47_i\") ((\"utils.py\" 108) get_local \"utils_45_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 163) get_local \"utils_44_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_48_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 163) get_local \"utils_47_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_47_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_48_x\") \"value\"))))))))) ((\"utils.py\" 136) verify ((\"utils.py\" 136) eq ((\"utils.py\" 112) get_local \"utils_44_result\") ((\"utils.py\" 136) literal (intOrNat 3)))) ((\"utils.py\" 83) define_local \"utils_49_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_50_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_49_hist\") ((\"utils.py\" 84) iter \"utils_50_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_49_hist\") ((\"utils.py\" 84) iter \"utils_50_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_49_hist\") ((\"utils.py\" 84) iter \"utils_50_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_49_hist\") ((\"utils.py\" 84) iter \"utils_50_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90i\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)))) True) ((\"utils.py\" 91) define_local \"utils_51_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_52_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90i\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_53_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_52_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90i\")) True) ((\"utils.py\" 94) define_local \"utils_54_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_55_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_49_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_53_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_54_i\") ((\"utils.py\" 97) get_local \"utils_52_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 163) get_local \"utils_51_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_55_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 163) get_local \"utils_54_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_54_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_55_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_54_i\") ((\"utils.py\" 100) get_local \"utils_52_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 163) get_local \"utils_53_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 163) get_local \"utils_51_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_51_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_55_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 163) get_local \"utils_51_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_51_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 163) get_local \"utils_53_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 163) get_local \"utils_54_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_54_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_55_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_54_i\") ((\"utils.py\" 108) get_local \"utils_52_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 163) get_local \"utils_51_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_55_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 163) get_local \"utils_54_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_54_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_55_x\") \"value\"))))))))) ((\"utils.py\" 137) verify ((\"utils.py\" 137) eq ((\"utils.py\" 112) get_local \"utils_51_result\") ((\"utils.py\" 137) literal (intOrNat 2)))) ((\"utils.py\" 138) verify ((\"utils.py\" 138) eq ((\"utils.py\" 138) call_lambda ((\"smartpy/tests/utils.py\" 109) private \"math_median\") ((\"utils.py\" 138) list ((\"utils.py\" 138) literal (intOrNat 1)) ((\"utils.py\" 138) literal (intOrNat 2)) ((\"utils.py\" 138) literal (intOrNat 2)) ((\"utils.py\" 138) literal (intOrNat 5)))) ((\"utils.py\" 138) literal (intOrNat 2)))) ((\"utils.py\" 118) define_local \"compute_utils_118\" ((\"utils.py\" 118) sub ((\"utils.py\" 118) literal (intOrNat 3)) ((\"utils.py\" 118) size ((\"utils.py\" 140) literal (bytes \"0x11\")))) True) ((\"utils.py\" 119) define_local \"utils_56_bytes\" ((\"utils.py\" 119) literal (bytes \"0x\")) True) ((\"utils.py\" 120) while_block ((\"utils.py\" 120) lt ((\"utils.py\" 120) size ((\"utils.py\" 120) get_local \"utils_56_bytes\")) ((\"utils.py\" 118) open_variant ((\"utils.py\" 118) is_nat ((\"utils.py\" 118) get_local \"compute_utils_118\")) \"Some\" \"None\")) (((\"utils.py\" 121) set ((\"utils.py\" 163) get_local \"utils_56_bytes\") ((\"utils.py\" 121) add ((\"utils.py\" 140) literal (bytes \"0x00\")) ((\"utils.py\" 121) get_local \"utils_56_bytes\"))))) ((\"utils.py\" 140) verify ((\"utils.py\" 140) eq ((\"utils.py\" 122) add ((\"utils.py\" 122) get_local \"utils_56_bytes\") ((\"utils.py\" 140) literal (bytes \"0x11\"))) ((\"utils.py\" 140) literal (bytes \"0x000011\")))) ((\"utils.py\" 126) define_local \"compute_utils_126\" ((\"utils.py\" 126) sub ((\"utils.py\" 126) literal (intOrNat 3)) ((\"utils.py\" 126) size ((\"utils.py\" 141) literal (bytes \"0x11\")))) True) ((\"utils.py\" 127) define_local \"utils_57_bytes\" ((\"utils.py\" 127) literal (bytes \"0x\")) True) ((\"utils.py\" 128) while_block ((\"utils.py\" 128) lt ((\"utils.py\" 128) size ((\"utils.py\" 128) get_local \"utils_57_bytes\")) ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) is_nat ((\"utils.py\" 126) get_local \"compute_utils_126\")) \"Some\" \"None\")) (((\"utils.py\" 129) set ((\"utils.py\" 163) get_local \"utils_57_bytes\") ((\"utils.py\" 129) add ((\"utils.py\" 141) literal (bytes \"0x00\")) ((\"utils.py\" 129) get_local \"utils_57_bytes\"))))) ((\"utils.py\" 141) verify ((\"utils.py\" 141) eq ((\"utils.py\" 130) add ((\"utils.py\" 141) literal (bytes \"0x11\")) ((\"utils.py\" 130) get_local \"utils_57_bytes\")) ((\"utils.py\" 141) literal (bytes \"0x110000\")))) ((\"utils.py\" 151) define_local \"utils_58_value\" ((\"utils.py\" 151) type_annotation ((\"utils.py\" 151) literal (intOrNat 54)) \"nat\") True) ((\"utils.py\" 152) define_local \"utils_59_left_nibble\" ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 153) define_local \"utils_60_bytes\" ((\"utils.py\" 153) list ) True) ((\"utils.py\" 154) while_block ((\"utils.py\" 154) neq ((\"utils.py\" 154) get_local \"utils_58_value\") ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 155) match_tuple ((\"utils.py\" 155) open_variant ((\"utils.py\" 155) ediv ((\"utils.py\" 155) get_local \"utils_58_value\") ((\"utils.py\" 155) literal (intOrNat 16))) \"Some\" \"None\") \"match_pair_utils_155_fst\" \"match_pair_utils_155_snd\") ((\"utils.py\" 156) set ((\"utils.py\" 163) get_local \"utils_58_value\") ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_fst\")) ((\"utils.py\" 157) match_cases ((\"utils.py\" 157) get_local \"utils_59_left_nibble\") \"match_utils_157\" (((\"utils.py\" 158) match ((\"utils.py\" 157) cases_arg \"match_utils_157\") \"Some\" \"Some\" (((\"utils.py\" 159) set ((\"utils.py\" 163) get_local \"utils_59_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) lt ((\"utils.py\" 160) or ((\"utils.py\" 160) lsl ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\") ((\"utils.py\" 160) literal (intOrNat 4))) ((\"utils.py\" 158) variant_arg \"Some\")) ((\"utils.py\" 144) literal (intOrNat 256))) ((\"utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 160) set ((\"utils.py\" 160) get_local \"utils_60_bytes\") ((\"utils.py\" 160) cons ((\"utils.py\" 147) open_variant ((\"utils.py\" 145) slice ((\"utils.py\" 145) literal (intOrNat 6)) ((\"utils.py\" 145) literal (intOrNat 1)) ((\"utils.py\" 146) pack ((\"utils.py\" 146) MUL ((\"utils.py\" 146) to_int ((\"utils.py\" 160) or ((\"utils.py\" 160) lsl ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\") ((\"utils.py\" 160) literal (intOrNat 4))) ((\"utils.py\" 158) variant_arg \"Some\"))) ((\"utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 160) get_local \"utils_60_bytes\"))))) ((\"utils.py\" 161) match ((\"utils.py\" 157) cases_arg \"match_utils_157\") \"None\" \"None\" (((\"utils.py\" 162) set ((\"utils.py\" 163) get_local \"utils_59_left_nibble\") ((\"utils.py\" 162) variant \"Some\" ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\"))))))))) ((\"utils.py\" 164) match_cases ((\"utils.py\" 164) get_local \"utils_59_left_nibble\") \"match_utils_164\" (((\"utils.py\" 165) match ((\"utils.py\" 164) cases_arg \"match_utils_164\") \"Some\" \"Some\" (((\"utils.py\" 166) set ((\"utils.py\" 163) get_local \"utils_59_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) lt ((\"utils.py\" 167) or ((\"utils.py\" 167) literal (intOrNat 0)) ((\"utils.py\" 165) variant_arg \"Some\")) ((\"utils.py\" 144) literal (intOrNat 256))) ((\"utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 167) set ((\"utils.py\" 167) get_local \"utils_60_bytes\") ((\"utils.py\" 167) cons ((\"utils.py\" 147) open_variant ((\"utils.py\" 145) slice ((\"utils.py\" 145) literal (intOrNat 6)) ((\"utils.py\" 145) literal (intOrNat 1)) ((\"utils.py\" 146) pack ((\"utils.py\" 146) MUL ((\"utils.py\" 146) to_int ((\"utils.py\" 167) or ((\"utils.py\" 167) literal (intOrNat 0)) ((\"utils.py\" 165) variant_arg \"Some\"))) ((\"utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 167) get_local \"utils_60_bytes\"))))))) ((\"utils.py\" 142) verify ((\"utils.py\" 142) eq ((\"utils.py\" 169) concat ((\"utils.py\" 169) get_local \"utils_60_bytes\")) ((\"utils.py\" 142) literal (bytes \"0x36\")))) ((\"utils.py\" 143) verify ((\"utils.py\" 143) eq ((\"utils.py\" 139) open_variant ((\"utils.py\" 139) slice ((\"utils.py\" 139) literal (intOrNat 6)) ((\"utils.py\" 139) open_variant ((\"utils.py\" 139) is_nat ((\"utils.py\" 139) sub ((\"utils.py\" 139) size ((\"utils.py\" 134) pack ((\"utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 139) literal (intOrNat 6)))) \"Some\" \"None\") ((\"utils.py\" 134) pack ((\"utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"utils.py\" 139) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 143) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"utils.py\" 151) define_local \"utils_61_value\" ((\"utils.py\" 151) type_annotation ((\"utils.py\" 305) size ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) \"nat\") True) ((\"utils.py\" 152) define_local \"utils_62_left_nibble\" ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 153) define_local \"utils_63_bytes\" ((\"utils.py\" 153) list ) True) ((\"utils.py\" 154) while_block ((\"utils.py\" 154) neq ((\"utils.py\" 154) get_local \"utils_61_value\") ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 155) match_tuple ((\"utils.py\" 155) open_variant ((\"utils.py\" 155) ediv ((\"utils.py\" 155) get_local \"utils_61_value\") ((\"utils.py\" 155) literal (intOrNat 16))) \"Some\" \"None\") \"match_pair_utils_155_fst\" \"match_pair_utils_155_snd\") ((\"utils.py\" 156) set ((\"utils.py\" 163) get_local \"utils_61_value\") ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_fst\")) ((\"utils.py\" 157) match_cases ((\"utils.py\" 157) get_local \"utils_62_left_nibble\") \"match_utils_157\" (((\"utils.py\" 158) match ((\"utils.py\" 157) cases_arg \"match_utils_157\") \"Some\" \"Some\" (((\"utils.py\" 159) set ((\"utils.py\" 163) get_local \"utils_62_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) lt ((\"utils.py\" 160) or ((\"utils.py\" 160) lsl ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\") ((\"utils.py\" 160) literal (intOrNat 4))) ((\"utils.py\" 158) variant_arg \"Some\")) ((\"utils.py\" 144) literal (intOrNat 256))) ((\"utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 160) set ((\"utils.py\" 160) get_local \"utils_63_bytes\") ((\"utils.py\" 160) cons ((\"utils.py\" 147) open_variant ((\"utils.py\" 145) slice ((\"utils.py\" 145) literal (intOrNat 6)) ((\"utils.py\" 145) literal (intOrNat 1)) ((\"utils.py\" 146) pack ((\"utils.py\" 146) MUL ((\"utils.py\" 146) to_int ((\"utils.py\" 160) or ((\"utils.py\" 160) lsl ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\") ((\"utils.py\" 160) literal (intOrNat 4))) ((\"utils.py\" 158) variant_arg \"Some\"))) ((\"utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 160) get_local \"utils_63_bytes\"))))) ((\"utils.py\" 161) match ((\"utils.py\" 157) cases_arg \"match_utils_157\") \"None\" \"None\" (((\"utils.py\" 162) set ((\"utils.py\" 163) get_local \"utils_62_left_nibble\") ((\"utils.py\" 162) variant \"Some\" ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\"))))))))) ((\"utils.py\" 164) match_cases ((\"utils.py\" 164) get_local \"utils_62_left_nibble\") \"match_utils_164\" (((\"utils.py\" 165) match ((\"utils.py\" 164) cases_arg \"match_utils_164\") \"Some\" \"Some\" (((\"utils.py\" 166) set ((\"utils.py\" 163) get_local \"utils_62_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) lt ((\"utils.py\" 167) or ((\"utils.py\" 167) literal (intOrNat 0)) ((\"utils.py\" 165) variant_arg \"Some\")) ((\"utils.py\" 144) literal (intOrNat 256))) ((\"utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 167) set ((\"utils.py\" 167) get_local \"utils_63_bytes\") ((\"utils.py\" 167) cons ((\"utils.py\" 147) open_variant ((\"utils.py\" 145) slice ((\"utils.py\" 145) literal (intOrNat 6)) ((\"utils.py\" 145) literal (intOrNat 1)) ((\"utils.py\" 146) pack ((\"utils.py\" 146) MUL ((\"utils.py\" 146) to_int ((\"utils.py\" 167) or ((\"utils.py\" 167) literal (intOrNat 0)) ((\"utils.py\" 165) variant_arg \"Some\"))) ((\"utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 167) get_local \"utils_63_bytes\"))))))) ((\"utils.py\" 305) define_local \"lengthBytes\" ((\"utils.py\" 169) concat ((\"utils.py\" 169) get_local \"utils_63_bytes\")) True) ((\"utils.py\" 306) while_block ((\"utils.py\" 306) lt ((\"utils.py\" 306) size ((\"utils.py\" 306) get_local \"lengthBytes\")) ((\"utils.py\" 306) literal (intOrNat 4))) (((\"utils.py\" 307) set ((\"utils.py\" 163) get_local \"lengthBytes\") ((\"utils.py\" 307) add ((\"utils.py\" 307) literal (bytes \"0x00\")) ((\"utils.py\" 307) get_local \"lengthBytes\"))))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) eq ((\"utils.py\" 314) open_variant ((\"utils.py\" 314) unpack ((\"utils.py\" 313) concat ((\"utils.py\" 313) list ((\"utils.py\" 313) literal (bytes \"0x05\")) ((\"utils.py\" 313) literal (bytes \"0x01\")) ((\"utils.py\" 313) get_local \"lengthBytes\") ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"utils.py\" 314) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 144) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 146) verify ((\"utils.py\" 146) eq ((\"utils.py\" 359) and ((\"utils.py\" 359) ge ((\"utils.py\" 359) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 146) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"utils.py\" 359) le ((\"utils.py\" 359) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 146) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 146) literal (bool False)))) ((\"utils.py\" 147) verify ((\"utils.py\" 359) and ((\"utils.py\" 359) ge ((\"utils.py\" 359) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 147) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"utils.py\" 359) le ((\"utils.py\" 359) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 147) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"utils.py\" 163) lambda_general None False None \"_x0\" \"\" (((\"smartpy_utils.py\" 339) define_local \"utils_57\" ((\"smartpy_utils.py\" 339) size ((\"utils.py\" 163) lambda_params \"_x0\")) True) ((\"smartpy_utils.py\" 340) define_local \"utils_58\" ((\"smartpy_utils.py\" 340) literal (nat 0)) True) ((\"smartpy_utils.py\" 341) for_group \"utils_59\" ((\"smartpy_utils.py\" 341) range ((\"smartpy_utils.py\" 341) literal (intOrNat 0)) ((\"smartpy_utils.py\" 341) get_local \"utils_57\") ((\"smartpy_utils.py\" 341) literal (intOrNat 1))) (((\"smartpy_utils.py\" 342) define_local \"compute_smartpy_utils_342\" ((\"smartpy_utils.py\" 342) open_variant ((\"smartpy_utils.py\" 342) slice ((\"smartpy_utils.py\" 341) iter \"utils_59\") ((\"smartpy_utils.py\" 342) literal (intOrNat 1)) ((\"utils.py\" 163) lambda_params \"_x0\")) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 343) define_local \"compute_smartpy_utils_343\" ((\"smartpy_utils.py\" 343) mul_homo ((\"smartpy_utils.py\" 343) open_variant ((\"smartpy_utils.py\" 343) is_nat ((\"smartpy_utils.py\" 343) sub ((\"smartpy_utils.py\" 343) get_local \"utils_57\") ((\"smartpy_utils.py\" 343) add ((\"smartpy_utils.py\" 341) iter \"utils_59\") ((\"smartpy_utils.py\" 343) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 343) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 349) set ((\"utils.py\" 163) get_local \"utils_58\") ((\"smartpy_utils.py\" 349) add ((\"smartpy_utils.py\" 349) get_local \"utils_58\") ((\"smartpy_utils.py\" 349) mul_homo ((\"smartpy_utils.py\" 349) open_variant ((\"smartpy_utils.py\" 349) is_nat ((\"smartpy_utils.py\" 350) to_int ((\"smartpy_utils.py\" 350) open_variant ((\"smartpy_utils.py\" 350) unpack ((\"smartpy_utils.py\" 348) add ((\"smartpy_utils.py\" 348) add ((\"smartpy_utils.py\" 348) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 342) get_local \"compute_smartpy_utils_342\")) ((\"smartpy_utils.py\" 348) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 343) get_local \"compute_smartpy_utils_343\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 90) result ((\"smartpy_utils.py\" 353) get_local \"utils_58\"))))) (int_of_string ((\"utils.py\" 163) lambda_general None False None \"_x2\" \"\" (((\"utils.py\" 324) define_local \"utils_5\" ((\"utils.py\" 163) lambda_params \"_x2\") True) ((\"utils.py\" 325) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 163) lambda_params \"_x2\")) (((\"utils.py\" 326) set ((\"utils.py\" 163) get_local \"utils_5\") ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) slice ((\"utils.py\" 326) literal (intOrNat 1)) ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) is_nat ((\"utils.py\" 326) sub ((\"utils.py\" 326) size ((\"utils.py\" 163) lambda_params \"_x2\")) ((\"utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 163) lambda_params \"_x2\")) \"Some\" ((\"utils.py\" 326) literal (string \"\")))))) ((\"utils.py\" 328) define_local \"utils_6\" ((\"utils.py\" 328) literal (intOrNat 0)) True) ((\"utils.py\" 329) for_group \"utils_7\" ((\"utils.py\" 329) range ((\"utils.py\" 329) literal (intOrNat 0)) ((\"utils.py\" 329) size ((\"utils.py\" 329) get_local \"utils_5\")) ((\"utils.py\" 329) literal (intOrNat 1))) (((\"utils.py\" 330) set ((\"utils.py\" 163) get_local \"utils_6\") ((\"utils.py\" 330) add ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) literal (intOrNat 10)) ((\"utils.py\" 330) get_local \"utils_6\")) ((\"utils.py\" 330) get_item ((\"utils.py\" 321) map (((\"utils.py\" 163) literal (string \"0\")) ((\"utils.py\" 163) literal (intOrNat 0))) (((\"utils.py\" 163) literal (string \"1\")) ((\"utils.py\" 163) literal (intOrNat 1))) (((\"utils.py\" 163) literal (string \"2\")) ((\"utils.py\" 163) literal (intOrNat 2))) (((\"utils.py\" 163) literal (string \"3\")) ((\"utils.py\" 163) literal (intOrNat 3))) (((\"utils.py\" 163) literal (string \"4\")) ((\"utils.py\" 163) literal (intOrNat 4))) (((\"utils.py\" 163) literal (string \"5\")) ((\"utils.py\" 163) literal (intOrNat 5))) (((\"utils.py\" 163) literal (string \"6\")) ((\"utils.py\" 163) literal (intOrNat 6))) (((\"utils.py\" 163) literal (string \"7\")) ((\"utils.py\" 163) literal (intOrNat 7))) (((\"utils.py\" 163) literal (string \"8\")) ((\"utils.py\" 163) literal (intOrNat 8))) (((\"utils.py\" 163) literal (string \"9\")) ((\"utils.py\" 163) literal (intOrNat 9)))) ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) slice ((\"utils.py\" 329) iter \"utils_7\") ((\"utils.py\" 330) literal (intOrNat 1)) ((\"utils.py\" 330) get_local \"utils_5\")) \"Some\" \"None\")))))) ((\"utils.py\" 332) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 163) lambda_params \"_x2\")) (((\"utils.py\" 333) set ((\"utils.py\" 163) get_local \"utils_6\") ((\"utils.py\" 333) mul_homo ((\"utils.py\" 333) get_local \"utils_6\") ((\"utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 86) result ((\"utils.py\" 335) get_local \"utils_6\"))))) (math_median ((\"utils.py\" 163) lambda_general None False None \"_x4\" \"\" (((\"utils.py\" 83) define_local \"utils_8_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_9_x\" ((\"utils.py\" 163) lambda_params \"_x4\") (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_8_hist\") ((\"utils.py\" 84) iter \"utils_9_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_8_hist\") ((\"utils.py\" 84) iter \"utils_9_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_8_hist\") ((\"utils.py\" 84) iter \"utils_9_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_8_hist\") ((\"utils.py\" 84) iter \"utils_9_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 163) lambda_params \"_x4\")) True) ((\"utils.py\" 91) define_local \"utils_10_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_11_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_12_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_11_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_13_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_14_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_8_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_12_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_13_i\") ((\"utils.py\" 97) get_local \"utils_11_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 163) get_local \"utils_10_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_14_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 163) get_local \"utils_13_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_13_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_14_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_13_i\") ((\"utils.py\" 100) get_local \"utils_11_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 163) get_local \"utils_12_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 163) get_local \"utils_10_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_10_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_14_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 163) get_local \"utils_10_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_10_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 163) get_local \"utils_12_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 163) get_local \"utils_13_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_13_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_14_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_13_i\") ((\"utils.py\" 108) get_local \"utils_11_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 163) get_local \"utils_10_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_14_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 163) get_local \"utils_13_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_13_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_14_x\") \"value\"))))))))) ((\"utils.py\" 110) result ((\"utils.py\" 112) get_local \"utils_10_result\"))))) (math_pow ((\"utils.py\" 163) lambda_general None False None \"_x6\" \"\" (((\"utils.py\" 106) result ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 106) attr ((\"utils.py\" 163) lambda_params \"_x6\") \"exponent\") ((\"utils.py\" 106) attr ((\"utils.py\" 163) lambda_params \"_x6\") \"base\") ((\"utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"utils.py\" 163) lambda_general None False None \"_x8\" \"\" (((\"utils.py\" 102) result ((\"utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 102) attr ((\"utils.py\" 163) lambda_params \"_x8\") \"text\") ((\"utils.py\" 102) attr ((\"utils.py\" 163) lambda_params \"_x8\") \"postfix\")))))) (string_of_int ((\"utils.py\" 163) lambda_general None False None \"_x10\" \"\" (((\"utils.py\" 286) define_local \"utils_15\" ((\"utils.py\" 286) abs ((\"utils.py\" 163) lambda_params \"_x10\")) True) ((\"utils.py\" 287) define_local \"utils_16\" ((\"utils.py\" 287) list ) True) ((\"utils.py\" 289) if_block ((\"utils.py\" 289) eq ((\"utils.py\" 289) get_local \"utils_15\") ((\"utils.py\" 289) literal (intOrNat 0))) (((\"utils.py\" 290) set ((\"utils.py\" 290) get_local \"utils_16\") ((\"utils.py\" 290) cons ((\"utils.py\" 290) literal (string \"0\")) ((\"utils.py\" 290) get_local \"utils_16\"))))) ((\"utils.py\" 291) while_block ((\"utils.py\" 291) gt ((\"utils.py\" 291) get_local \"utils_15\") ((\"utils.py\" 291) literal (intOrNat 0))) (((\"utils.py\" 292) set ((\"utils.py\" 292) get_local \"utils_16\") ((\"utils.py\" 292) cons ((\"utils.py\" 292) get_item ((\"utils.py\" 284) map (((\"utils.py\" 163) literal (intOrNat 0)) ((\"utils.py\" 163) literal (string \"0\"))) (((\"utils.py\" 163) literal (intOrNat 1)) ((\"utils.py\" 163) literal (string \"1\"))) (((\"utils.py\" 163) literal (intOrNat 2)) ((\"utils.py\" 163) literal (string \"2\"))) (((\"utils.py\" 163) literal (intOrNat 3)) ((\"utils.py\" 163) literal (string \"3\"))) (((\"utils.py\" 163) literal (intOrNat 4)) ((\"utils.py\" 163) literal (string \"4\"))) (((\"utils.py\" 163) literal (intOrNat 5)) ((\"utils.py\" 163) literal (string \"5\"))) (((\"utils.py\" 163) literal (intOrNat 6)) ((\"utils.py\" 163) literal (string \"6\"))) (((\"utils.py\" 163) literal (intOrNat 7)) ((\"utils.py\" 163) literal (string \"7\"))) (((\"utils.py\" 163) literal (intOrNat 8)) ((\"utils.py\" 163) literal (string \"8\"))) (((\"utils.py\" 163) literal (intOrNat 9)) ((\"utils.py\" 163) literal (string \"9\")))) ((\"utils.py\" 292) mod ((\"utils.py\" 292) get_local \"utils_15\") ((\"utils.py\" 292) literal (intOrNat 10)))) ((\"utils.py\" 292) get_local \"utils_16\"))) ((\"utils.py\" 293) set ((\"utils.py\" 163) get_local \"utils_15\") ((\"utils.py\" 293) div ((\"utils.py\" 293) get_local \"utils_15\") ((\"utils.py\" 293) literal (intOrNat 10)))))) ((\"utils.py\" 295) define_local \"utils_17\" ((\"utils.py\" 295) concat ((\"utils.py\" 295) get_local \"utils_16\")) True) ((\"utils.py\" 296) if_block ((\"utils.py\" 285) lt ((\"utils.py\" 163) lambda_params \"_x10\") ((\"utils.py\" 285) literal (intOrNat 0))) (((\"utils.py\" 297) set ((\"utils.py\" 163) get_local \"utils_17\") ((\"utils.py\" 297) add ((\"utils.py\" 297) literal (string \"-\")) ((\"utils.py\" 297) get_local \"utils_17\"))))) ((\"utils.py\" 82) result ((\"utils.py\" 299) get_local \"utils_17\"))))) (string_split ((\"utils.py\" 163) lambda_general None False None \"_x12\" \"\" (((\"utils.py\" 271) define_local \"utils_18\" ((\"utils.py\" 271) literal (intOrNat 0)) True) ((\"utils.py\" 272) define_local \"utils_19\" ((\"utils.py\" 272) list ) True) ((\"utils.py\" 273) for_group \"utils_20\" ((\"utils.py\" 273) range ((\"utils.py\" 273) literal (intOrNat 0)) ((\"utils.py\" 273) size ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params \"_x12\") \"text\")) ((\"utils.py\" 273) literal (intOrNat 1))) (((\"utils.py\" 274) if_block ((\"utils.py\" 274) eq ((\"utils.py\" 274) open_variant ((\"utils.py\" 274) slice ((\"utils.py\" 273) iter \"utils_20\") ((\"utils.py\" 274) literal (intOrNat 1)) ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params \"_x12\") \"separator\")) (((\"utils.py\" 275) set ((\"utils.py\" 275) get_local \"utils_19\") ((\"utils.py\" 275) cons ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) slice ((\"utils.py\" 275) get_local \"utils_18\") ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) is_nat ((\"utils.py\" 275) sub ((\"utils.py\" 273) iter \"utils_20\") ((\"utils.py\" 275) get_local \"utils_18\"))) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"utils.py\" 275) get_local \"utils_19\"))) ((\"utils.py\" 276) set ((\"utils.py\" 163) get_local \"utils_18\") ((\"utils.py\" 276) add ((\"utils.py\" 273) iter \"utils_20\") ((\"utils.py\" 276) literal (intOrNat 1)))))))) ((\"utils.py\" 277) if_block ((\"utils.py\" 277) gt ((\"utils.py\" 277) size ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params \"_x12\") \"text\")) ((\"utils.py\" 277) literal (intOrNat 0))) (((\"utils.py\" 278) set ((\"utils.py\" 278) get_local \"utils_19\") ((\"utils.py\" 278) cons ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) slice ((\"utils.py\" 278) get_local \"utils_18\") ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) is_nat ((\"utils.py\" 278) sub ((\"utils.py\" 278) size ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params \"_x12\") \"text\")) ((\"utils.py\" 278) get_local \"utils_18\"))) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"utils.py\" 278) get_local \"utils_19\"))))) ((\"utils.py\" 94) result ((\"utils.py\" 279) rev ((\"utils.py\" 279) get_local \"utils_19\")))))) (string_starts_with ((\"utils.py\" 163) lambda_general None False None \"_x14\" \"\" (((\"utils.py\" 98) result ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 98) attr ((\"utils.py\" 163) lambda_params \"_x14\") \"prefix\") ((\"utils.py\" 98) attr ((\"utils.py\" 163) lambda_params \"_x14\") \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"utils.py\" 163) static_id 0)",
    "line_no": "(\"utils.py\" 163)",
    "show": true
   },
   {
    "action": "message",
    "id": "((\"utils.py\" 163) static_id 0)",
    "line_no": "(\"utils.py\" 165)",
    "message": "test",
    "params": "((\"utils.py\" 165) record )"
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "UtilsTester1_compilation",
  "longname": "UtilsTester1_compilation",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"\" -1) static_id 0) \nstorage ()\nstorage_type ((unknown 1))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 42) (((\"smartpy_utils.py\" 286) define_local \"utils_79\" ((\"smartpy_utils.py\" 286) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 287) define_local \"utils_80\" ((\"smartpy_utils.py\" 287) list ) True) ((\"smartpy_utils.py\" 289) if_block ((\"smartpy_utils.py\" 289) eq ((\"smartpy_utils.py\" 289) get_local \"utils_79\") ((\"smartpy_utils.py\" 289) literal (intOrNat 0))) (((\"smartpy_utils.py\" 290) set ((\"smartpy_utils.py\" 290) get_local \"utils_80\") ((\"smartpy_utils.py\" 290) cons ((\"smartpy_utils.py\" 290) literal (string \"0\")) ((\"smartpy_utils.py\" 290) get_local \"utils_80\"))))) ((\"smartpy_utils.py\" 291) while_block ((\"smartpy_utils.py\" 291) gt ((\"smartpy_utils.py\" 291) get_local \"utils_79\") ((\"smartpy_utils.py\" 291) literal (intOrNat 0))) (((\"smartpy_utils.py\" 292) set ((\"smartpy_utils.py\" 292) get_local \"utils_80\") ((\"smartpy_utils.py\" 292) cons ((\"smartpy_utils.py\" 292) get_item ((\"smartpy_utils.py\" 284) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 292) mod ((\"smartpy_utils.py\" 292) get_local \"utils_79\") ((\"smartpy_utils.py\" 292) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 292) get_local \"utils_80\"))) ((\"smartpy_utils.py\" 293) set ((\"\" -1) get_local \"utils_79\") ((\"smartpy_utils.py\" 293) div ((\"smartpy_utils.py\" 293) get_local \"utils_79\") ((\"smartpy_utils.py\" 293) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 295) define_local \"utils_81\" ((\"smartpy_utils.py\" 295) concat ((\"smartpy_utils.py\" 295) get_local \"utils_80\")) True) ((\"smartpy_utils.py\" 296) if_block ((\"smartpy_utils.py\" 296) literal (bool True)) (((\"smartpy_utils.py\" 297) set ((\"\" -1) get_local \"utils_81\") ((\"smartpy_utils.py\" 297) add ((\"smartpy_utils.py\" 297) literal (string \"-\")) ((\"smartpy_utils.py\" 297) get_local \"utils_81\"))))) ((\"utils.py\" 43) verify ((\"utils.py\" 43) eq ((\"smartpy_utils.py\" 299) get_local \"utils_81\") ((\"utils.py\" 43) literal (string \"-1\")))) ((\"smartpy_utils.py\" 286) define_local \"utils_82\" ((\"smartpy_utils.py\" 286) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 287) define_local \"utils_83\" ((\"smartpy_utils.py\" 287) list ) True) ((\"smartpy_utils.py\" 289) if_block ((\"smartpy_utils.py\" 289) eq ((\"smartpy_utils.py\" 289) get_local \"utils_82\") ((\"smartpy_utils.py\" 289) literal (intOrNat 0))) (((\"smartpy_utils.py\" 290) set ((\"smartpy_utils.py\" 290) get_local \"utils_83\") ((\"smartpy_utils.py\" 290) cons ((\"smartpy_utils.py\" 290) literal (string \"0\")) ((\"smartpy_utils.py\" 290) get_local \"utils_83\"))))) ((\"smartpy_utils.py\" 291) while_block ((\"smartpy_utils.py\" 291) gt ((\"smartpy_utils.py\" 291) get_local \"utils_82\") ((\"smartpy_utils.py\" 291) literal (intOrNat 0))) (((\"smartpy_utils.py\" 292) set ((\"smartpy_utils.py\" 292) get_local \"utils_83\") ((\"smartpy_utils.py\" 292) cons ((\"smartpy_utils.py\" 292) get_item ((\"smartpy_utils.py\" 284) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 292) mod ((\"smartpy_utils.py\" 292) get_local \"utils_82\") ((\"smartpy_utils.py\" 292) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 292) get_local \"utils_83\"))) ((\"smartpy_utils.py\" 293) set ((\"\" -1) get_local \"utils_82\") ((\"smartpy_utils.py\" 293) div ((\"smartpy_utils.py\" 293) get_local \"utils_82\") ((\"smartpy_utils.py\" 293) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 295) define_local \"utils_84\" ((\"smartpy_utils.py\" 295) concat ((\"smartpy_utils.py\" 295) get_local \"utils_83\")) True) ((\"smartpy_utils.py\" 296) if_block ((\"smartpy_utils.py\" 296) literal (bool False)) (((\"smartpy_utils.py\" 297) set ((\"\" -1) get_local \"utils_84\") ((\"smartpy_utils.py\" 297) add ((\"smartpy_utils.py\" 297) literal (string \"-\")) ((\"smartpy_utils.py\" 297) get_local \"utils_84\"))))) ((\"utils.py\" 44) verify ((\"utils.py\" 44) eq ((\"smartpy_utils.py\" 299) get_local \"utils_84\") ((\"utils.py\" 44) literal (string \"1\")))) ((\"utils.py\" 45) verify ((\"utils.py\" 45) eq ((\"utils.py\" 45) call_lambda ((\"smartpy/tests/utils.py\" 10) private \"string_of_int\") ((\"utils.py\" 45) literal (intOrNat 2))) ((\"utils.py\" 45) literal (string \"2\")))) ((\"smartpy_utils.py\" 324) define_local \"utils_85\" ((\"smartpy_utils.py\" 324) literal (string \"1\")) True) ((\"smartpy_utils.py\" 325) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"smartpy_utils.py\" 234) literal (string \"1\"))) (((\"smartpy_utils.py\" 326) set ((\"\" -1) get_local \"utils_85\") ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) slice ((\"smartpy_utils.py\" 326) literal (intOrNat 1)) ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) is_nat ((\"smartpy_utils.py\" 326) sub ((\"smartpy_utils.py\" 326) size ((\"smartpy_utils.py\" 326) literal (string \"1\"))) ((\"smartpy_utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 326) literal (string \"1\"))) \"Some\" ((\"smartpy_utils.py\" 326) literal (string \"\")))))) ((\"smartpy_utils.py\" 328) define_local \"utils_86\" ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 329) for_group \"utils_87\" ((\"smartpy_utils.py\" 329) range ((\"smartpy_utils.py\" 329) literal (intOrNat 0)) ((\"smartpy_utils.py\" 329) size ((\"smartpy_utils.py\" 329) get_local \"utils_85\")) ((\"smartpy_utils.py\" 329) literal (intOrNat 1))) (((\"smartpy_utils.py\" 330) set ((\"\" -1) get_local \"utils_86\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) literal (intOrNat 10)) ((\"smartpy_utils.py\" 330) get_local \"utils_86\")) ((\"smartpy_utils.py\" 330) get_item ((\"smartpy_utils.py\" 321) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) slice ((\"smartpy_utils.py\" 329) iter \"utils_87\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1)) ((\"smartpy_utils.py\" 330) get_local \"utils_85\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 332) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"smartpy_utils.py\" 234) literal (string \"1\"))) (((\"smartpy_utils.py\" 333) set ((\"\" -1) get_local \"utils_86\") ((\"smartpy_utils.py\" 333) mul_homo ((\"smartpy_utils.py\" 333) get_local \"utils_86\") ((\"smartpy_utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 47) verify ((\"utils.py\" 47) eq ((\"smartpy_utils.py\" 335) get_local \"utils_86\") ((\"utils.py\" 47) literal (intOrNat 1)))) ((\"smartpy_utils.py\" 324) define_local \"utils_88\" ((\"smartpy_utils.py\" 324) literal (string \"-1\")) True) ((\"smartpy_utils.py\" 325) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"smartpy_utils.py\" 234) literal (string \"-1\"))) (((\"smartpy_utils.py\" 326) set ((\"\" -1) get_local \"utils_88\") ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) slice ((\"smartpy_utils.py\" 326) literal (intOrNat 1)) ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) is_nat ((\"smartpy_utils.py\" 326) sub ((\"smartpy_utils.py\" 326) size ((\"smartpy_utils.py\" 326) literal (string \"-1\"))) ((\"smartpy_utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 326) literal (string \"-1\"))) \"Some\" ((\"smartpy_utils.py\" 326) literal (string \"\")))))) ((\"smartpy_utils.py\" 328) define_local \"utils_89\" ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 329) for_group \"utils_90\" ((\"smartpy_utils.py\" 329) range ((\"smartpy_utils.py\" 329) literal (intOrNat 0)) ((\"smartpy_utils.py\" 329) size ((\"smartpy_utils.py\" 329) get_local \"utils_88\")) ((\"smartpy_utils.py\" 329) literal (intOrNat 1))) (((\"smartpy_utils.py\" 330) set ((\"\" -1) get_local \"utils_89\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) literal (intOrNat 10)) ((\"smartpy_utils.py\" 330) get_local \"utils_89\")) ((\"smartpy_utils.py\" 330) get_item ((\"smartpy_utils.py\" 321) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) slice ((\"smartpy_utils.py\" 329) iter \"utils_90\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1)) ((\"smartpy_utils.py\" 330) get_local \"utils_88\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 332) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"smartpy_utils.py\" 234) literal (string \"-1\"))) (((\"smartpy_utils.py\" 333) set ((\"\" -1) get_local \"utils_89\") ((\"smartpy_utils.py\" 333) mul_homo ((\"smartpy_utils.py\" 333) get_local \"utils_89\") ((\"smartpy_utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 48) verify ((\"utils.py\" 48) eq ((\"smartpy_utils.py\" 335) get_local \"utils_89\") ((\"utils.py\" 48) literal (int -1)))) ((\"utils.py\" 49) verify ((\"utils.py\" 49) eq ((\"utils.py\" 49) call_lambda ((\"smartpy/tests/utils.py\" 14) private \"int_of_string\") ((\"utils.py\" 49) literal (string \"2\"))) ((\"utils.py\" 49) literal (intOrNat 2)))) ((\"utils.py\" 339) define_local \"utils_64\" ((\"utils.py\" 339) size ((\"utils.py\" 50) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 340) define_local \"utils_65\" ((\"utils.py\" 340) literal (nat 0)) True) ((\"utils.py\" 341) for_group \"utils_66\" ((\"utils.py\" 341) range ((\"utils.py\" 341) literal (intOrNat 0)) ((\"utils.py\" 341) get_local \"utils_64\") ((\"utils.py\" 341) literal (intOrNat 1))) (((\"utils.py\" 342) define_local \"compute_utils_342\" ((\"utils.py\" 342) open_variant ((\"utils.py\" 342) slice ((\"utils.py\" 341) iter \"utils_66\") ((\"utils.py\" 342) literal (intOrNat 1)) ((\"utils.py\" 50) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 343) define_local \"compute_utils_343\" ((\"utils.py\" 343) mul_homo ((\"utils.py\" 343) open_variant ((\"utils.py\" 343) is_nat ((\"utils.py\" 343) sub ((\"utils.py\" 343) get_local \"utils_64\") ((\"utils.py\" 343) add ((\"utils.py\" 341) iter \"utils_66\") ((\"utils.py\" 343) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 343) literal (intOrNat 2))) True) ((\"utils.py\" 349) set ((\"\" -1) get_local \"utils_65\") ((\"utils.py\" 349) add ((\"utils.py\" 349) get_local \"utils_65\") ((\"utils.py\" 349) mul_homo ((\"utils.py\" 349) open_variant ((\"utils.py\" 349) is_nat ((\"utils.py\" 350) to_int ((\"utils.py\" 350) open_variant ((\"utils.py\" 350) unpack ((\"utils.py\" 348) add ((\"utils.py\" 348) add ((\"utils.py\" 348) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 342) get_local \"compute_utils_342\")) ((\"utils.py\" 348) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 343) get_local \"compute_utils_343\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 50) verify ((\"utils.py\" 50) eq ((\"utils.py\" 353) get_local \"utils_65\") ((\"utils.py\" 50) literal (intOrNat 256)))) ((\"utils.py\" 51) verify ((\"utils.py\" 51) eq ((\"utils.py\" 51) call_lambda ((\"smartpy/tests/utils.py\" 18) private \"int_of_bytes\") ((\"utils.py\" 51) literal (bytes \"0x0100\"))) ((\"utils.py\" 51) literal (intOrNat 256)))) ((\"smartpy_utils.py\" 271) define_local \"utils_91\" ((\"smartpy_utils.py\" 271) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 272) define_local \"utils_92\" ((\"smartpy_utils.py\" 272) list ) True) ((\"smartpy_utils.py\" 273) for_group \"utils_93\" ((\"smartpy_utils.py\" 273) range ((\"smartpy_utils.py\" 273) literal (intOrNat 0)) ((\"smartpy_utils.py\" 273) size ((\"smartpy_utils.py\" 273) literal (string \"a b\"))) ((\"smartpy_utils.py\" 273) literal (intOrNat 1))) (((\"smartpy_utils.py\" 274) if_block ((\"smartpy_utils.py\" 274) eq ((\"smartpy_utils.py\" 274) open_variant ((\"smartpy_utils.py\" 274) slice ((\"smartpy_utils.py\" 273) iter \"utils_93\") ((\"smartpy_utils.py\" 274) literal (intOrNat 1)) ((\"smartpy_utils.py\" 274) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 274) literal (string \" \"))) (((\"smartpy_utils.py\" 275) set ((\"smartpy_utils.py\" 275) get_local \"utils_92\") ((\"smartpy_utils.py\" 275) cons ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) slice ((\"smartpy_utils.py\" 275) get_local \"utils_91\") ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) is_nat ((\"smartpy_utils.py\" 275) sub ((\"smartpy_utils.py\" 273) iter \"utils_93\") ((\"smartpy_utils.py\" 275) get_local \"utils_91\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) get_local \"utils_92\"))) ((\"smartpy_utils.py\" 276) set ((\"\" -1) get_local \"utils_91\") ((\"smartpy_utils.py\" 276) add ((\"smartpy_utils.py\" 273) iter \"utils_93\") ((\"smartpy_utils.py\" 276) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 277) if_block ((\"smartpy_utils.py\" 277) gt ((\"smartpy_utils.py\" 277) size ((\"smartpy_utils.py\" 277) literal (string \"a b\"))) ((\"smartpy_utils.py\" 277) literal (intOrNat 0))) (((\"smartpy_utils.py\" 278) set ((\"smartpy_utils.py\" 278) get_local \"utils_92\") ((\"smartpy_utils.py\" 278) cons ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) slice ((\"smartpy_utils.py\" 278) get_local \"utils_91\") ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) is_nat ((\"smartpy_utils.py\" 278) sub ((\"smartpy_utils.py\" 278) size ((\"smartpy_utils.py\" 278) literal (string \"a b\"))) ((\"smartpy_utils.py\" 278) get_local \"utils_91\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) get_local \"utils_92\"))))) ((\"utils.py\" 53) verify ((\"utils.py\" 53) eq ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"smartpy_utils.py\" 279) rev ((\"smartpy_utils.py\" 279) get_local \"utils_92\")) (unknown 184))) ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"utils.py\" 53) list ((\"utils.py\" 53) literal (string \"a\")) ((\"utils.py\" 53) literal (string \"b\"))) (unknown 184))))) ((\"smartpy_utils.py\" 271) define_local \"utils_94\" ((\"smartpy_utils.py\" 271) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 272) define_local \"utils_95\" ((\"smartpy_utils.py\" 272) list ) True) ((\"smartpy_utils.py\" 273) for_group \"utils_96\" ((\"smartpy_utils.py\" 273) range ((\"smartpy_utils.py\" 273) literal (intOrNat 0)) ((\"smartpy_utils.py\" 273) size ((\"smartpy_utils.py\" 273) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 273) literal (intOrNat 1))) (((\"smartpy_utils.py\" 274) if_block ((\"smartpy_utils.py\" 274) eq ((\"smartpy_utils.py\" 274) open_variant ((\"smartpy_utils.py\" 274) slice ((\"smartpy_utils.py\" 273) iter \"utils_96\") ((\"smartpy_utils.py\" 274) literal (intOrNat 1)) ((\"smartpy_utils.py\" 274) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 274) literal (string \",\"))) (((\"smartpy_utils.py\" 275) set ((\"smartpy_utils.py\" 275) get_local \"utils_95\") ((\"smartpy_utils.py\" 275) cons ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) slice ((\"smartpy_utils.py\" 275) get_local \"utils_94\") ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) is_nat ((\"smartpy_utils.py\" 275) sub ((\"smartpy_utils.py\" 273) iter \"utils_96\") ((\"smartpy_utils.py\" 275) get_local \"utils_94\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) get_local \"utils_95\"))) ((\"smartpy_utils.py\" 276) set ((\"\" -1) get_local \"utils_94\") ((\"smartpy_utils.py\" 276) add ((\"smartpy_utils.py\" 273) iter \"utils_96\") ((\"smartpy_utils.py\" 276) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 277) if_block ((\"smartpy_utils.py\" 277) gt ((\"smartpy_utils.py\" 277) size ((\"smartpy_utils.py\" 277) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 277) literal (intOrNat 0))) (((\"smartpy_utils.py\" 278) set ((\"smartpy_utils.py\" 278) get_local \"utils_95\") ((\"smartpy_utils.py\" 278) cons ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) slice ((\"smartpy_utils.py\" 278) get_local \"utils_94\") ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) is_nat ((\"smartpy_utils.py\" 278) sub ((\"smartpy_utils.py\" 278) size ((\"smartpy_utils.py\" 278) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 278) get_local \"utils_94\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) get_local \"utils_95\"))))) ((\"utils.py\" 54) verify ((\"utils.py\" 54) eq ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"smartpy_utils.py\" 279) rev ((\"smartpy_utils.py\" 279) get_local \"utils_95\")) (unknown 187))) ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"utils.py\" 54) list ((\"utils.py\" 54) literal (string \"b\")) ((\"utils.py\" 54) literal (string \"a\"))) (unknown 187))))) ((\"utils.py\" 55) verify ((\"utils.py\" 55) eq ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) call_lambda ((\"smartpy/tests/utils.py\" 22) private \"string_split\") ((\"utils.py\" 55) record (separator ((\"utils.py\" 55) literal (string \",,\"))) (text ((\"utils.py\" 55) literal (string \"a,b\"))))) (unknown 188))) ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) list ((\"utils.py\" 55) literal (string \"a,b\"))) (unknown 188))))) ((\"utils.py\" 57) verify ((\"utils.py\" 57) eq ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"a\")) ((\"smartpy_utils.py\" 234) literal (string \"abc\"))) ((\"utils.py\" 57) literal (bool True)))) ((\"utils.py\" 58) verify ((\"utils.py\" 58) eq ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"b\")) ((\"smartpy_utils.py\" 234) literal (string \"abc\"))) ((\"utils.py\" 58) literal (bool False)))) ((\"utils.py\" 59) verify ((\"utils.py\" 59) eq ((\"utils.py\" 59) call_lambda ((\"smartpy/tests/utils.py\" 26) private \"string_starts_with\") ((\"utils.py\" 59) record (prefix ((\"utils.py\" 59) literal (string \"a\"))) (text ((\"utils.py\" 59) literal (string \"abc\"))))) ((\"utils.py\" 59) literal (bool True)))) ((\"utils.py\" 61) verify ((\"utils.py\" 61) eq ((\"smartpy_utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 175) literal (string \"abc\")) ((\"smartpy_utils.py\" 175) literal (string \"c\"))) ((\"utils.py\" 61) literal (bool True)))) ((\"utils.py\" 62) verify ((\"utils.py\" 62) eq ((\"smartpy_utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 175) literal (string \"abc\")) ((\"smartpy_utils.py\" 175) literal (string \"b\"))) ((\"utils.py\" 62) literal (bool False)))) ((\"utils.py\" 63) verify ((\"utils.py\" 63) eq ((\"utils.py\" 63) call_lambda ((\"smartpy/tests/utils.py\" 30) private \"string_ends_with\") ((\"utils.py\" 63) record (postfix ((\"utils.py\" 63) literal (string \"c\"))) (text ((\"utils.py\" 63) literal (string \"abc\"))))) ((\"utils.py\" 63) literal (bool True)))) ((\"smartpy_utils.py\" 83) define_local \"utils_97_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_98_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3)) ((\"smartpy_utils.py\" 84) literal (intOrNat 4)) ((\"smartpy_utils.py\" 84) literal (intOrNat 5))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_97_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_98_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_97_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_98_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_97_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_98_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_97_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_98_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)) ((\"smartpy_utils.py\" 90) literal (intOrNat 4)) ((\"smartpy_utils.py\" 90) literal (intOrNat 5)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_99_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_100_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_101_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_100_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_102_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_103_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_97_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_101_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_100_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_99_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_103_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_103_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_100_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_101_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_99_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_99_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_103_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_99_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_99_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_101_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_103_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_100_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_99_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_103_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_102_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_103_x\") \"value\"))))))))) ((\"utils.py\" 65) verify ((\"utils.py\" 65) eq ((\"smartpy_utils.py\" 112) get_local \"utils_99_result\") ((\"utils.py\" 65) literal (intOrNat 3)))) ((\"smartpy_utils.py\" 83) define_local \"utils_104_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_105_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_104_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_105_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_104_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_105_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_104_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_105_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_104_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_105_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90i\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_106_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_107_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_108_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_107_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_109_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_110_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_104_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_108_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_107_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_106_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_110_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_110_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_107_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_108_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_106_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_106_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_110_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_106_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_106_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_108_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_110_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_107_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_106_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_110_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_109_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_110_x\") \"value\"))))))))) ((\"utils.py\" 66) verify ((\"utils.py\" 66) eq ((\"smartpy_utils.py\" 112) get_local \"utils_106_result\") ((\"utils.py\" 66) literal (intOrNat 2)))) ((\"utils.py\" 67) verify ((\"utils.py\" 67) eq ((\"utils.py\" 67) call_lambda ((\"smartpy/tests/utils.py\" 38) private \"math_median\") ((\"utils.py\" 67) list ((\"utils.py\" 67) literal (intOrNat 1)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 5)))) ((\"utils.py\" 67) literal (intOrNat 2)))) ((\"utils.py\" 118) define_local \"compute_utils_118\" ((\"utils.py\" 118) sub ((\"utils.py\" 118) literal (intOrNat 3)) ((\"utils.py\" 118) size ((\"utils.py\" 69) literal (bytes \"0x11\")))) True) ((\"utils.py\" 119) define_local \"utils_67_bytes\" ((\"utils.py\" 119) literal (bytes \"0x\")) True) ((\"utils.py\" 120) while_block ((\"utils.py\" 120) lt ((\"utils.py\" 120) size ((\"utils.py\" 120) get_local \"utils_67_bytes\")) ((\"utils.py\" 118) open_variant ((\"utils.py\" 118) is_nat ((\"utils.py\" 118) get_local \"compute_utils_118\")) \"Some\" \"None\")) (((\"utils.py\" 121) set ((\"\" -1) get_local \"utils_67_bytes\") ((\"utils.py\" 121) add ((\"utils.py\" 69) literal (bytes \"0x00\")) ((\"utils.py\" 121) get_local \"utils_67_bytes\"))))) ((\"utils.py\" 69) verify ((\"utils.py\" 69) eq ((\"utils.py\" 122) add ((\"utils.py\" 122) get_local \"utils_67_bytes\") ((\"utils.py\" 69) literal (bytes \"0x11\"))) ((\"utils.py\" 69) literal (bytes \"0x000011\")))) ((\"utils.py\" 126) define_local \"compute_utils_126\" ((\"utils.py\" 126) sub ((\"utils.py\" 126) literal (intOrNat 3)) ((\"utils.py\" 126) size ((\"utils.py\" 70) literal (bytes \"0x11\")))) True) ((\"utils.py\" 127) define_local \"utils_68_bytes\" ((\"utils.py\" 127) literal (bytes \"0x\")) True) ((\"utils.py\" 128) while_block ((\"utils.py\" 128) lt ((\"utils.py\" 128) size ((\"utils.py\" 128) get_local \"utils_68_bytes\")) ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) is_nat ((\"utils.py\" 126) get_local \"compute_utils_126\")) \"Some\" \"None\")) (((\"utils.py\" 129) set ((\"\" -1) get_local \"utils_68_bytes\") ((\"utils.py\" 129) add ((\"utils.py\" 70) literal (bytes \"0x00\")) ((\"utils.py\" 129) get_local \"utils_68_bytes\"))))) ((\"utils.py\" 70) verify ((\"utils.py\" 70) eq ((\"utils.py\" 130) add ((\"utils.py\" 70) literal (bytes \"0x11\")) ((\"utils.py\" 130) get_local \"utils_68_bytes\")) ((\"utils.py\" 70) literal (bytes \"0x110000\")))) ((\"smartpy_utils.py\" 151) define_local \"utils_111_value\" ((\"smartpy_utils.py\" 151) type_annotation ((\"smartpy_utils.py\" 151) literal (intOrNat 54)) \"nat\") True) ((\"smartpy_utils.py\" 152) define_local \"utils_112_left_nibble\" ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 153) define_local \"utils_113_bytes\" ((\"smartpy_utils.py\" 153) list ) True) ((\"smartpy_utils.py\" 154) while_block ((\"smartpy_utils.py\" 154) neq ((\"smartpy_utils.py\" 154) get_local \"utils_111_value\") ((\"smartpy_utils.py\" 154) literal (intOrNat 0))) (((\"smartpy_utils.py\" 155) match_tuple ((\"smartpy_utils.py\" 155) open_variant ((\"smartpy_utils.py\" 155) ediv ((\"smartpy_utils.py\" 155) get_local \"utils_111_value\") ((\"smartpy_utils.py\" 155) literal (intOrNat 16))) \"Some\" \"None\") \"match_pair_smartpy_utils_155_fst\" \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 156) set ((\"\" -1) get_local \"utils_111_value\") ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_fst\")) ((\"smartpy_utils.py\" 157) match_cases ((\"smartpy_utils.py\" 157) get_local \"utils_112_left_nibble\") \"match_smartpy_utils_157\" (((\"smartpy_utils.py\" 158) match ((\"smartpy_utils.py\" 157) cases_arg \"match_smartpy_utils_157\") \"Some\" \"Some\" (((\"smartpy_utils.py\" 159) set ((\"\" -1) get_local \"utils_112_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"smartpy_utils.py\" 144) verify ((\"smartpy_utils.py\" 144) lt ((\"smartpy_utils.py\" 160) or ((\"smartpy_utils.py\" 160) lsl ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 160) literal (intOrNat 4))) ((\"smartpy_utils.py\" 158) variant_arg \"Some\")) ((\"smartpy_utils.py\" 144) literal (intOrNat 256))) ((\"smartpy_utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 160) set ((\"smartpy_utils.py\" 160) get_local \"utils_113_bytes\") ((\"smartpy_utils.py\" 160) cons ((\"smartpy_utils.py\" 147) open_variant ((\"smartpy_utils.py\" 145) slice ((\"smartpy_utils.py\" 145) literal (intOrNat 6)) ((\"smartpy_utils.py\" 145) literal (intOrNat 1)) ((\"smartpy_utils.py\" 146) pack ((\"smartpy_utils.py\" 146) MUL ((\"smartpy_utils.py\" 146) to_int ((\"smartpy_utils.py\" 160) or ((\"smartpy_utils.py\" 160) lsl ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 160) literal (intOrNat 4))) ((\"smartpy_utils.py\" 158) variant_arg \"Some\"))) ((\"smartpy_utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 160) get_local \"utils_113_bytes\"))))) ((\"smartpy_utils.py\" 161) match ((\"smartpy_utils.py\" 157) cases_arg \"match_smartpy_utils_157\") \"None\" \"None\" (((\"smartpy_utils.py\" 162) set ((\"\" -1) get_local \"utils_112_left_nibble\") ((\"smartpy_utils.py\" 162) variant \"Some\" ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\"))))))))) ((\"smartpy_utils.py\" 164) match_cases ((\"smartpy_utils.py\" 164) get_local \"utils_112_left_nibble\") \"match_smartpy_utils_164\" (((\"smartpy_utils.py\" 165) match ((\"smartpy_utils.py\" 164) cases_arg \"match_smartpy_utils_164\") \"Some\" \"Some\" (((\"smartpy_utils.py\" 166) set ((\"\" -1) get_local \"utils_112_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"smartpy_utils.py\" 144) verify ((\"smartpy_utils.py\" 144) lt ((\"smartpy_utils.py\" 167) or ((\"smartpy_utils.py\" 167) literal (intOrNat 0)) ((\"smartpy_utils.py\" 165) variant_arg \"Some\")) ((\"smartpy_utils.py\" 144) literal (intOrNat 256))) ((\"smartpy_utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 167) set ((\"smartpy_utils.py\" 167) get_local \"utils_113_bytes\") ((\"smartpy_utils.py\" 167) cons ((\"smartpy_utils.py\" 147) open_variant ((\"smartpy_utils.py\" 145) slice ((\"smartpy_utils.py\" 145) literal (intOrNat 6)) ((\"smartpy_utils.py\" 145) literal (intOrNat 1)) ((\"smartpy_utils.py\" 146) pack ((\"smartpy_utils.py\" 146) MUL ((\"smartpy_utils.py\" 146) to_int ((\"smartpy_utils.py\" 167) or ((\"smartpy_utils.py\" 167) literal (intOrNat 0)) ((\"smartpy_utils.py\" 165) variant_arg \"Some\"))) ((\"smartpy_utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 167) get_local \"utils_113_bytes\"))))))) ((\"utils.py\" 71) verify ((\"utils.py\" 71) eq ((\"smartpy_utils.py\" 169) concat ((\"smartpy_utils.py\" 169) get_local \"utils_113_bytes\")) ((\"utils.py\" 71) literal (bytes \"0x36\")))) ((\"utils.py\" 72) verify ((\"utils.py\" 72) eq ((\"smartpy_utils.py\" 139) open_variant ((\"smartpy_utils.py\" 139) slice ((\"smartpy_utils.py\" 139) literal (intOrNat 6)) ((\"smartpy_utils.py\" 139) open_variant ((\"smartpy_utils.py\" 139) is_nat ((\"smartpy_utils.py\" 139) sub ((\"smartpy_utils.py\" 139) size ((\"smartpy_utils.py\" 134) pack ((\"smartpy_utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"smartpy_utils.py\" 139) literal (intOrNat 6)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 134) pack ((\"smartpy_utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"smartpy_utils.py\" 139) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 72) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"smartpy_utils.py\" 151) define_local \"utils_114_value\" ((\"smartpy_utils.py\" 151) type_annotation ((\"smartpy_utils.py\" 305) size ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) \"nat\") True) ((\"smartpy_utils.py\" 152) define_local \"utils_115_left_nibble\" ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 153) define_local \"utils_116_bytes\" ((\"smartpy_utils.py\" 153) list ) True) ((\"smartpy_utils.py\" 154) while_block ((\"smartpy_utils.py\" 154) neq ((\"smartpy_utils.py\" 154) get_local \"utils_114_value\") ((\"smartpy_utils.py\" 154) literal (intOrNat 0))) (((\"smartpy_utils.py\" 155) match_tuple ((\"smartpy_utils.py\" 155) open_variant ((\"smartpy_utils.py\" 155) ediv ((\"smartpy_utils.py\" 155) get_local \"utils_114_value\") ((\"smartpy_utils.py\" 155) literal (intOrNat 16))) \"Some\" \"None\") \"match_pair_smartpy_utils_155_fst\" \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 156) set ((\"\" -1) get_local \"utils_114_value\") ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_fst\")) ((\"smartpy_utils.py\" 157) match_cases ((\"smartpy_utils.py\" 157) get_local \"utils_115_left_nibble\") \"match_smartpy_utils_157\" (((\"smartpy_utils.py\" 158) match ((\"smartpy_utils.py\" 157) cases_arg \"match_smartpy_utils_157\") \"Some\" \"Some\" (((\"smartpy_utils.py\" 159) set ((\"\" -1) get_local \"utils_115_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"smartpy_utils.py\" 144) verify ((\"smartpy_utils.py\" 144) lt ((\"smartpy_utils.py\" 160) or ((\"smartpy_utils.py\" 160) lsl ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 160) literal (intOrNat 4))) ((\"smartpy_utils.py\" 158) variant_arg \"Some\")) ((\"smartpy_utils.py\" 144) literal (intOrNat 256))) ((\"smartpy_utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 160) set ((\"smartpy_utils.py\" 160) get_local \"utils_116_bytes\") ((\"smartpy_utils.py\" 160) cons ((\"smartpy_utils.py\" 147) open_variant ((\"smartpy_utils.py\" 145) slice ((\"smartpy_utils.py\" 145) literal (intOrNat 6)) ((\"smartpy_utils.py\" 145) literal (intOrNat 1)) ((\"smartpy_utils.py\" 146) pack ((\"smartpy_utils.py\" 146) MUL ((\"smartpy_utils.py\" 146) to_int ((\"smartpy_utils.py\" 160) or ((\"smartpy_utils.py\" 160) lsl ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\") ((\"smartpy_utils.py\" 160) literal (intOrNat 4))) ((\"smartpy_utils.py\" 158) variant_arg \"Some\"))) ((\"smartpy_utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 160) get_local \"utils_116_bytes\"))))) ((\"smartpy_utils.py\" 161) match ((\"smartpy_utils.py\" 157) cases_arg \"match_smartpy_utils_157\") \"None\" \"None\" (((\"smartpy_utils.py\" 162) set ((\"\" -1) get_local \"utils_115_left_nibble\") ((\"smartpy_utils.py\" 162) variant \"Some\" ((\"smartpy_utils.py\" 155) variant_arg \"match_pair_smartpy_utils_155_snd\"))))))))) ((\"smartpy_utils.py\" 164) match_cases ((\"smartpy_utils.py\" 164) get_local \"utils_115_left_nibble\") \"match_smartpy_utils_164\" (((\"smartpy_utils.py\" 165) match ((\"smartpy_utils.py\" 164) cases_arg \"match_smartpy_utils_164\") \"Some\" \"Some\" (((\"smartpy_utils.py\" 166) set ((\"\" -1) get_local \"utils_115_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"smartpy_utils.py\" 144) verify ((\"smartpy_utils.py\" 144) lt ((\"smartpy_utils.py\" 167) or ((\"smartpy_utils.py\" 167) literal (intOrNat 0)) ((\"smartpy_utils.py\" 165) variant_arg \"Some\")) ((\"smartpy_utils.py\" 144) literal (intOrNat 256))) ((\"smartpy_utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 167) set ((\"smartpy_utils.py\" 167) get_local \"utils_116_bytes\") ((\"smartpy_utils.py\" 167) cons ((\"smartpy_utils.py\" 147) open_variant ((\"smartpy_utils.py\" 145) slice ((\"smartpy_utils.py\" 145) literal (intOrNat 6)) ((\"smartpy_utils.py\" 145) literal (intOrNat 1)) ((\"smartpy_utils.py\" 146) pack ((\"smartpy_utils.py\" 146) MUL ((\"smartpy_utils.py\" 146) to_int ((\"smartpy_utils.py\" 167) or ((\"smartpy_utils.py\" 167) literal (intOrNat 0)) ((\"smartpy_utils.py\" 165) variant_arg \"Some\"))) ((\"smartpy_utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 167) get_local \"utils_116_bytes\"))))))) ((\"smartpy_utils.py\" 305) define_local \"lengthBytes\" ((\"smartpy_utils.py\" 169) concat ((\"smartpy_utils.py\" 169) get_local \"utils_116_bytes\")) True) ((\"smartpy_utils.py\" 306) while_block ((\"smartpy_utils.py\" 306) lt ((\"smartpy_utils.py\" 306) size ((\"smartpy_utils.py\" 306) get_local \"lengthBytes\")) ((\"smartpy_utils.py\" 306) literal (intOrNat 4))) (((\"smartpy_utils.py\" 307) set ((\"\" -1) get_local \"lengthBytes\") ((\"smartpy_utils.py\" 307) add ((\"smartpy_utils.py\" 307) literal (bytes \"0x00\")) ((\"smartpy_utils.py\" 307) get_local \"lengthBytes\"))))) ((\"utils.py\" 73) verify ((\"utils.py\" 73) eq ((\"smartpy_utils.py\" 314) open_variant ((\"smartpy_utils.py\" 314) unpack ((\"smartpy_utils.py\" 313) concat ((\"smartpy_utils.py\" 313) list ((\"smartpy_utils.py\" 313) literal (bytes \"0x05\")) ((\"smartpy_utils.py\" 313) literal (bytes \"0x01\")) ((\"smartpy_utils.py\" 313) get_local \"lengthBytes\") ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"smartpy_utils.py\" 314) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 73) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 75) verify ((\"utils.py\" 75) eq ((\"smartpy_utils.py\" 359) and ((\"smartpy_utils.py\" 359) ge ((\"smartpy_utils.py\" 359) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 75) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"smartpy_utils.py\" 359) le ((\"smartpy_utils.py\" 359) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 75) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 75) literal (bool False)))) ((\"utils.py\" 76) verify ((\"smartpy_utils.py\" 359) and ((\"smartpy_utils.py\" 359) ge ((\"smartpy_utils.py\" 359) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 76) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"smartpy_utils.py\" 359) le ((\"smartpy_utils.py\" 359) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 76) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"\" -1) lambda_general None False None \"_x0\" \"\" (((\"smartpy_utils.py\" 339) define_local \"utils_60\" ((\"smartpy_utils.py\" 339) size ((\"\" -1) lambda_params \"_x0\")) True) ((\"smartpy_utils.py\" 340) define_local \"utils_61\" ((\"smartpy_utils.py\" 340) literal (nat 0)) True) ((\"smartpy_utils.py\" 341) for_group \"utils_62\" ((\"smartpy_utils.py\" 341) range ((\"smartpy_utils.py\" 341) literal (intOrNat 0)) ((\"smartpy_utils.py\" 341) get_local \"utils_60\") ((\"smartpy_utils.py\" 341) literal (intOrNat 1))) (((\"smartpy_utils.py\" 342) define_local \"compute_smartpy_utils_342\" ((\"smartpy_utils.py\" 342) open_variant ((\"smartpy_utils.py\" 342) slice ((\"smartpy_utils.py\" 341) iter \"utils_62\") ((\"smartpy_utils.py\" 342) literal (intOrNat 1)) ((\"\" -1) lambda_params \"_x0\")) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 343) define_local \"compute_smartpy_utils_343\" ((\"smartpy_utils.py\" 343) mul_homo ((\"smartpy_utils.py\" 343) open_variant ((\"smartpy_utils.py\" 343) is_nat ((\"smartpy_utils.py\" 343) sub ((\"smartpy_utils.py\" 343) get_local \"utils_60\") ((\"smartpy_utils.py\" 343) add ((\"smartpy_utils.py\" 341) iter \"utils_62\") ((\"smartpy_utils.py\" 343) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 343) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 349) set ((\"\" -1) get_local \"utils_61\") ((\"smartpy_utils.py\" 349) add ((\"smartpy_utils.py\" 349) get_local \"utils_61\") ((\"smartpy_utils.py\" 349) mul_homo ((\"smartpy_utils.py\" 349) open_variant ((\"smartpy_utils.py\" 349) is_nat ((\"smartpy_utils.py\" 350) to_int ((\"smartpy_utils.py\" 350) open_variant ((\"smartpy_utils.py\" 350) unpack ((\"smartpy_utils.py\" 348) add ((\"smartpy_utils.py\" 348) add ((\"smartpy_utils.py\" 348) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 342) get_local \"compute_smartpy_utils_342\")) ((\"smartpy_utils.py\" 348) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 343) get_local \"compute_smartpy_utils_343\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 19) result ((\"smartpy_utils.py\" 353) get_local \"utils_61\"))))) (int_of_string ((\"\" -1) lambda_general None False None \"_x2\" \"\" (((\"smartpy_utils.py\" 324) define_local \"utils_63\" ((\"\" -1) lambda_params \"_x2\") True) ((\"smartpy_utils.py\" 325) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"\" -1) lambda_params \"_x2\")) (((\"smartpy_utils.py\" 326) set ((\"\" -1) get_local \"utils_63\") ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) slice ((\"smartpy_utils.py\" 326) literal (intOrNat 1)) ((\"smartpy_utils.py\" 326) open_variant ((\"smartpy_utils.py\" 326) is_nat ((\"smartpy_utils.py\" 326) sub ((\"smartpy_utils.py\" 326) size ((\"\" -1) lambda_params \"_x2\")) ((\"smartpy_utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"\" -1) lambda_params \"_x2\")) \"Some\" ((\"smartpy_utils.py\" 326) literal (string \"\")))))) ((\"smartpy_utils.py\" 328) define_local \"utils_64\" ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 329) for_group \"utils_65\" ((\"smartpy_utils.py\" 329) range ((\"smartpy_utils.py\" 329) literal (intOrNat 0)) ((\"smartpy_utils.py\" 329) size ((\"smartpy_utils.py\" 329) get_local \"utils_63\")) ((\"smartpy_utils.py\" 329) literal (intOrNat 1))) (((\"smartpy_utils.py\" 330) set ((\"\" -1) get_local \"utils_64\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) literal (intOrNat 10)) ((\"smartpy_utils.py\" 330) get_local \"utils_64\")) ((\"smartpy_utils.py\" 330) get_item ((\"smartpy_utils.py\" 321) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) slice ((\"smartpy_utils.py\" 329) iter \"utils_65\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1)) ((\"smartpy_utils.py\" 330) get_local \"utils_63\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 332) if_block ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 234) literal (string \"-\")) ((\"\" -1) lambda_params \"_x2\")) (((\"smartpy_utils.py\" 333) set ((\"\" -1) get_local \"utils_64\") ((\"smartpy_utils.py\" 333) mul_homo ((\"smartpy_utils.py\" 333) get_local \"utils_64\") ((\"smartpy_utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 15) result ((\"smartpy_utils.py\" 335) get_local \"utils_64\"))))) (math_median ((\"\" -1) lambda_general None False None \"_x4\" \"\" (((\"smartpy_utils.py\" 83) define_local \"utils_66_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_67_x\" ((\"\" -1) lambda_params \"_x4\") (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_66_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_67_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_66_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_67_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_66_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_67_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_66_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_67_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"\" -1) lambda_params \"_x4\")) True) ((\"smartpy_utils.py\" 91) define_local \"utils_68_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_69_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_70_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_69_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_71_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_72_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_66_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_70_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_69_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_68_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_72_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_72_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_69_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_70_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_68_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_68_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_72_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_68_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_68_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_70_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_72_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_69_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_68_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_72_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_71_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_72_x\") \"value\"))))))))) ((\"utils.py\" 39) result ((\"smartpy_utils.py\" 112) get_local \"utils_68_result\"))))) (math_pow ((\"\" -1) lambda_general None False None \"_x6\" \"\" (((\"utils.py\" 35) result ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 35) attr ((\"\" -1) lambda_params \"_x6\") \"exponent\") ((\"utils.py\" 35) attr ((\"\" -1) lambda_params \"_x6\") \"base\") ((\"smartpy_utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"\" -1) lambda_general None False None \"_x8\" \"\" (((\"utils.py\" 31) result ((\"smartpy_utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 31) attr ((\"\" -1) lambda_params \"_x8\") \"text\") ((\"utils.py\" 31) attr ((\"\" -1) lambda_params \"_x8\") \"postfix\")))))) (string_of_int ((\"\" -1) lambda_general None False None \"_x10\" \"\" (((\"smartpy_utils.py\" 286) define_local \"utils_73\" ((\"smartpy_utils.py\" 286) abs ((\"\" -1) lambda_params \"_x10\")) True) ((\"smartpy_utils.py\" 287) define_local \"utils_74\" ((\"smartpy_utils.py\" 287) list ) True) ((\"smartpy_utils.py\" 289) if_block ((\"smartpy_utils.py\" 289) eq ((\"smartpy_utils.py\" 289) get_local \"utils_73\") ((\"smartpy_utils.py\" 289) literal (intOrNat 0))) (((\"smartpy_utils.py\" 290) set ((\"smartpy_utils.py\" 290) get_local \"utils_74\") ((\"smartpy_utils.py\" 290) cons ((\"smartpy_utils.py\" 290) literal (string \"0\")) ((\"smartpy_utils.py\" 290) get_local \"utils_74\"))))) ((\"smartpy_utils.py\" 291) while_block ((\"smartpy_utils.py\" 291) gt ((\"smartpy_utils.py\" 291) get_local \"utils_73\") ((\"smartpy_utils.py\" 291) literal (intOrNat 0))) (((\"smartpy_utils.py\" 292) set ((\"smartpy_utils.py\" 292) get_local \"utils_74\") ((\"smartpy_utils.py\" 292) cons ((\"smartpy_utils.py\" 292) get_item ((\"smartpy_utils.py\" 284) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 292) mod ((\"smartpy_utils.py\" 292) get_local \"utils_73\") ((\"smartpy_utils.py\" 292) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 292) get_local \"utils_74\"))) ((\"smartpy_utils.py\" 293) set ((\"\" -1) get_local \"utils_73\") ((\"smartpy_utils.py\" 293) div ((\"smartpy_utils.py\" 293) get_local \"utils_73\") ((\"smartpy_utils.py\" 293) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 295) define_local \"utils_75\" ((\"smartpy_utils.py\" 295) concat ((\"smartpy_utils.py\" 295) get_local \"utils_74\")) True) ((\"smartpy_utils.py\" 296) if_block ((\"smartpy_utils.py\" 285) lt ((\"\" -1) lambda_params \"_x10\") ((\"smartpy_utils.py\" 285) literal (intOrNat 0))) (((\"smartpy_utils.py\" 297) set ((\"\" -1) get_local \"utils_75\") ((\"smartpy_utils.py\" 297) add ((\"smartpy_utils.py\" 297) literal (string \"-\")) ((\"smartpy_utils.py\" 297) get_local \"utils_75\"))))) ((\"utils.py\" 11) result ((\"smartpy_utils.py\" 299) get_local \"utils_75\"))))) (string_split ((\"\" -1) lambda_general None False None \"_x12\" \"\" (((\"smartpy_utils.py\" 271) define_local \"utils_76\" ((\"smartpy_utils.py\" 271) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 272) define_local \"utils_77\" ((\"smartpy_utils.py\" 272) list ) True) ((\"smartpy_utils.py\" 273) for_group \"utils_78\" ((\"smartpy_utils.py\" 273) range ((\"smartpy_utils.py\" 273) literal (intOrNat 0)) ((\"smartpy_utils.py\" 273) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) ((\"smartpy_utils.py\" 273) literal (intOrNat 1))) (((\"smartpy_utils.py\" 274) if_block ((\"smartpy_utils.py\" 274) eq ((\"smartpy_utils.py\" 274) open_variant ((\"smartpy_utils.py\" 274) slice ((\"smartpy_utils.py\" 273) iter \"utils_78\") ((\"smartpy_utils.py\" 274) literal (intOrNat 1)) ((\"utils.py\" 23) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params \"_x12\") \"separator\")) (((\"smartpy_utils.py\" 275) set ((\"smartpy_utils.py\" 275) get_local \"utils_77\") ((\"smartpy_utils.py\" 275) cons ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) slice ((\"smartpy_utils.py\" 275) get_local \"utils_76\") ((\"smartpy_utils.py\" 275) open_variant ((\"smartpy_utils.py\" 275) is_nat ((\"smartpy_utils.py\" 275) sub ((\"smartpy_utils.py\" 273) iter \"utils_78\") ((\"smartpy_utils.py\" 275) get_local \"utils_76\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 275) get_local \"utils_77\"))) ((\"smartpy_utils.py\" 276) set ((\"\" -1) get_local \"utils_76\") ((\"smartpy_utils.py\" 276) add ((\"smartpy_utils.py\" 273) iter \"utils_78\") ((\"smartpy_utils.py\" 276) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 277) if_block ((\"smartpy_utils.py\" 277) gt ((\"smartpy_utils.py\" 277) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) ((\"smartpy_utils.py\" 277) literal (intOrNat 0))) (((\"smartpy_utils.py\" 278) set ((\"smartpy_utils.py\" 278) get_local \"utils_77\") ((\"smartpy_utils.py\" 278) cons ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) slice ((\"smartpy_utils.py\" 278) get_local \"utils_76\") ((\"smartpy_utils.py\" 278) open_variant ((\"smartpy_utils.py\" 278) is_nat ((\"smartpy_utils.py\" 278) sub ((\"smartpy_utils.py\" 278) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) ((\"smartpy_utils.py\" 278) get_local \"utils_76\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 278) get_local \"utils_77\"))))) ((\"utils.py\" 23) result ((\"smartpy_utils.py\" 279) rev ((\"smartpy_utils.py\" 279) get_local \"utils_77\")))))) (string_starts_with ((\"\" -1) lambda_general None False None \"_x14\" \"\" (((\"utils.py\" 27) result ((\"smartpy_utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 27) attr ((\"\" -1) lambda_params \"_x14\") \"prefix\") ((\"utils.py\" 27) attr ((\"\" -1) lambda_params \"_x14\") \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"\" -1) static_id 0)",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 },
 {
  "shortname": "UtilsTester2_compilation",
  "longname": "UtilsTester2_compilation",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"\" -1) static_id 0) \nstorage ()\nstorage_type ((unknown 2))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 113) (((\"utils.py\" 286) define_local \"utils_85\" ((\"utils.py\" 286) literal (intOrNat 1)) True) ((\"utils.py\" 287) define_local \"utils_86\" ((\"utils.py\" 287) list ) True) ((\"utils.py\" 289) if_block ((\"utils.py\" 289) eq ((\"utils.py\" 289) get_local \"utils_85\") ((\"utils.py\" 289) literal (intOrNat 0))) (((\"utils.py\" 290) set ((\"utils.py\" 290) get_local \"utils_86\") ((\"utils.py\" 290) cons ((\"utils.py\" 290) literal (string \"0\")) ((\"utils.py\" 290) get_local \"utils_86\"))))) ((\"utils.py\" 291) while_block ((\"utils.py\" 291) gt ((\"utils.py\" 291) get_local \"utils_85\") ((\"utils.py\" 291) literal (intOrNat 0))) (((\"utils.py\" 292) set ((\"utils.py\" 292) get_local \"utils_86\") ((\"utils.py\" 292) cons ((\"utils.py\" 292) get_item ((\"utils.py\" 284) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 292) mod ((\"utils.py\" 292) get_local \"utils_85\") ((\"utils.py\" 292) literal (intOrNat 10)))) ((\"utils.py\" 292) get_local \"utils_86\"))) ((\"utils.py\" 293) set ((\"\" -1) get_local \"utils_85\") ((\"utils.py\" 293) div ((\"utils.py\" 293) get_local \"utils_85\") ((\"utils.py\" 293) literal (intOrNat 10)))))) ((\"utils.py\" 295) define_local \"utils_87\" ((\"utils.py\" 295) concat ((\"utils.py\" 295) get_local \"utils_86\")) True) ((\"utils.py\" 296) if_block ((\"utils.py\" 296) literal (bool True)) (((\"utils.py\" 297) set ((\"\" -1) get_local \"utils_87\") ((\"utils.py\" 297) add ((\"utils.py\" 297) literal (string \"-\")) ((\"utils.py\" 297) get_local \"utils_87\"))))) ((\"utils.py\" 114) verify ((\"utils.py\" 114) eq ((\"utils.py\" 299) get_local \"utils_87\") ((\"utils.py\" 114) literal (string \"-1\")))) ((\"utils.py\" 286) define_local \"utils_88\" ((\"utils.py\" 286) literal (intOrNat 1)) True) ((\"utils.py\" 287) define_local \"utils_89\" ((\"utils.py\" 287) list ) True) ((\"utils.py\" 289) if_block ((\"utils.py\" 289) eq ((\"utils.py\" 289) get_local \"utils_88\") ((\"utils.py\" 289) literal (intOrNat 0))) (((\"utils.py\" 290) set ((\"utils.py\" 290) get_local \"utils_89\") ((\"utils.py\" 290) cons ((\"utils.py\" 290) literal (string \"0\")) ((\"utils.py\" 290) get_local \"utils_89\"))))) ((\"utils.py\" 291) while_block ((\"utils.py\" 291) gt ((\"utils.py\" 291) get_local \"utils_88\") ((\"utils.py\" 291) literal (intOrNat 0))) (((\"utils.py\" 292) set ((\"utils.py\" 292) get_local \"utils_89\") ((\"utils.py\" 292) cons ((\"utils.py\" 292) get_item ((\"utils.py\" 284) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 292) mod ((\"utils.py\" 292) get_local \"utils_88\") ((\"utils.py\" 292) literal (intOrNat 10)))) ((\"utils.py\" 292) get_local \"utils_89\"))) ((\"utils.py\" 293) set ((\"\" -1) get_local \"utils_88\") ((\"utils.py\" 293) div ((\"utils.py\" 293) get_local \"utils_88\") ((\"utils.py\" 293) literal (intOrNat 10)))))) ((\"utils.py\" 295) define_local \"utils_90\" ((\"utils.py\" 295) concat ((\"utils.py\" 295) get_local \"utils_89\")) True) ((\"utils.py\" 296) if_block ((\"utils.py\" 296) literal (bool False)) (((\"utils.py\" 297) set ((\"\" -1) get_local \"utils_90\") ((\"utils.py\" 297) add ((\"utils.py\" 297) literal (string \"-\")) ((\"utils.py\" 297) get_local \"utils_90\"))))) ((\"utils.py\" 115) verify ((\"utils.py\" 115) eq ((\"utils.py\" 299) get_local \"utils_90\") ((\"utils.py\" 115) literal (string \"1\")))) ((\"utils.py\" 116) verify ((\"utils.py\" 116) eq ((\"utils.py\" 116) call_lambda ((\"smartpy/tests/utils.py\" 81) private \"string_of_int\") ((\"utils.py\" 116) literal (intOrNat 2))) ((\"utils.py\" 116) literal (string \"2\")))) ((\"utils.py\" 324) define_local \"utils_91\" ((\"utils.py\" 324) literal (string \"1\")) True) ((\"utils.py\" 325) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 234) literal (string \"1\"))) (((\"utils.py\" 326) set ((\"\" -1) get_local \"utils_91\") ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) slice ((\"utils.py\" 326) literal (intOrNat 1)) ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) is_nat ((\"utils.py\" 326) sub ((\"utils.py\" 326) size ((\"utils.py\" 326) literal (string \"1\"))) ((\"utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 326) literal (string \"1\"))) \"Some\" ((\"utils.py\" 326) literal (string \"\")))))) ((\"utils.py\" 328) define_local \"utils_92\" ((\"utils.py\" 328) literal (intOrNat 0)) True) ((\"utils.py\" 329) for_group \"utils_93\" ((\"utils.py\" 329) range ((\"utils.py\" 329) literal (intOrNat 0)) ((\"utils.py\" 329) size ((\"utils.py\" 329) get_local \"utils_91\")) ((\"utils.py\" 329) literal (intOrNat 1))) (((\"utils.py\" 330) set ((\"\" -1) get_local \"utils_92\") ((\"utils.py\" 330) add ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) literal (intOrNat 10)) ((\"utils.py\" 330) get_local \"utils_92\")) ((\"utils.py\" 330) get_item ((\"utils.py\" 321) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) slice ((\"utils.py\" 329) iter \"utils_93\") ((\"utils.py\" 330) literal (intOrNat 1)) ((\"utils.py\" 330) get_local \"utils_91\")) \"Some\" \"None\")))))) ((\"utils.py\" 332) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 234) literal (string \"1\"))) (((\"utils.py\" 333) set ((\"\" -1) get_local \"utils_92\") ((\"utils.py\" 333) mul_homo ((\"utils.py\" 333) get_local \"utils_92\") ((\"utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 118) verify ((\"utils.py\" 118) eq ((\"utils.py\" 335) get_local \"utils_92\") ((\"utils.py\" 118) literal (intOrNat 1)))) ((\"utils.py\" 324) define_local \"utils_94\" ((\"utils.py\" 324) literal (string \"-1\")) True) ((\"utils.py\" 325) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 234) literal (string \"-1\"))) (((\"utils.py\" 326) set ((\"\" -1) get_local \"utils_94\") ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) slice ((\"utils.py\" 326) literal (intOrNat 1)) ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) is_nat ((\"utils.py\" 326) sub ((\"utils.py\" 326) size ((\"utils.py\" 326) literal (string \"-1\"))) ((\"utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 326) literal (string \"-1\"))) \"Some\" ((\"utils.py\" 326) literal (string \"\")))))) ((\"utils.py\" 328) define_local \"utils_95\" ((\"utils.py\" 328) literal (intOrNat 0)) True) ((\"utils.py\" 329) for_group \"utils_96\" ((\"utils.py\" 329) range ((\"utils.py\" 329) literal (intOrNat 0)) ((\"utils.py\" 329) size ((\"utils.py\" 329) get_local \"utils_94\")) ((\"utils.py\" 329) literal (intOrNat 1))) (((\"utils.py\" 330) set ((\"\" -1) get_local \"utils_95\") ((\"utils.py\" 330) add ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) literal (intOrNat 10)) ((\"utils.py\" 330) get_local \"utils_95\")) ((\"utils.py\" 330) get_item ((\"utils.py\" 321) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) slice ((\"utils.py\" 329) iter \"utils_96\") ((\"utils.py\" 330) literal (intOrNat 1)) ((\"utils.py\" 330) get_local \"utils_94\")) \"Some\" \"None\")))))) ((\"utils.py\" 332) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"utils.py\" 234) literal (string \"-1\"))) (((\"utils.py\" 333) set ((\"\" -1) get_local \"utils_95\") ((\"utils.py\" 333) mul_homo ((\"utils.py\" 333) get_local \"utils_95\") ((\"utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 119) verify ((\"utils.py\" 119) eq ((\"utils.py\" 335) get_local \"utils_95\") ((\"utils.py\" 119) literal (int -1)))) ((\"utils.py\" 120) verify ((\"utils.py\" 120) eq ((\"utils.py\" 120) call_lambda ((\"smartpy/tests/utils.py\" 85) private \"int_of_string\") ((\"utils.py\" 120) literal (string \"2\"))) ((\"utils.py\" 120) literal (intOrNat 2)))) ((\"utils.py\" 339) define_local \"utils_97\" ((\"utils.py\" 339) size ((\"utils.py\" 121) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 340) define_local \"utils_98\" ((\"utils.py\" 340) literal (nat 0)) True) ((\"utils.py\" 341) for_group \"utils_99\" ((\"utils.py\" 341) range ((\"utils.py\" 341) literal (intOrNat 0)) ((\"utils.py\" 341) get_local \"utils_97\") ((\"utils.py\" 341) literal (intOrNat 1))) (((\"utils.py\" 342) define_local \"compute_utils_342\" ((\"utils.py\" 342) open_variant ((\"utils.py\" 342) slice ((\"utils.py\" 341) iter \"utils_99\") ((\"utils.py\" 342) literal (intOrNat 1)) ((\"utils.py\" 121) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 343) define_local \"compute_utils_343\" ((\"utils.py\" 343) mul_homo ((\"utils.py\" 343) open_variant ((\"utils.py\" 343) is_nat ((\"utils.py\" 343) sub ((\"utils.py\" 343) get_local \"utils_97\") ((\"utils.py\" 343) add ((\"utils.py\" 341) iter \"utils_99\") ((\"utils.py\" 343) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 343) literal (intOrNat 2))) True) ((\"utils.py\" 349) set ((\"\" -1) get_local \"utils_98\") ((\"utils.py\" 349) add ((\"utils.py\" 349) get_local \"utils_98\") ((\"utils.py\" 349) mul_homo ((\"utils.py\" 349) open_variant ((\"utils.py\" 349) is_nat ((\"utils.py\" 350) to_int ((\"utils.py\" 350) open_variant ((\"utils.py\" 350) unpack ((\"utils.py\" 348) add ((\"utils.py\" 348) add ((\"utils.py\" 348) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 342) get_local \"compute_utils_342\")) ((\"utils.py\" 348) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 343) get_local \"compute_utils_343\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 121) verify ((\"utils.py\" 121) eq ((\"utils.py\" 353) get_local \"utils_98\") ((\"utils.py\" 121) literal (intOrNat 256)))) ((\"utils.py\" 122) verify ((\"utils.py\" 122) eq ((\"utils.py\" 122) call_lambda ((\"smartpy/tests/utils.py\" 89) private \"int_of_bytes\") ((\"utils.py\" 122) literal (bytes \"0x0100\"))) ((\"utils.py\" 122) literal (intOrNat 256)))) ((\"utils.py\" 271) define_local \"utils_100\" ((\"utils.py\" 271) literal (intOrNat 0)) True) ((\"utils.py\" 272) define_local \"utils_101\" ((\"utils.py\" 272) list ) True) ((\"utils.py\" 273) for_group \"utils_102\" ((\"utils.py\" 273) range ((\"utils.py\" 273) literal (intOrNat 0)) ((\"utils.py\" 273) size ((\"utils.py\" 273) literal (string \"a b\"))) ((\"utils.py\" 273) literal (intOrNat 1))) (((\"utils.py\" 274) if_block ((\"utils.py\" 274) eq ((\"utils.py\" 274) open_variant ((\"utils.py\" 274) slice ((\"utils.py\" 273) iter \"utils_102\") ((\"utils.py\" 274) literal (intOrNat 1)) ((\"utils.py\" 274) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 274) literal (string \" \"))) (((\"utils.py\" 275) set ((\"utils.py\" 275) get_local \"utils_101\") ((\"utils.py\" 275) cons ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) slice ((\"utils.py\" 275) get_local \"utils_100\") ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) is_nat ((\"utils.py\" 275) sub ((\"utils.py\" 273) iter \"utils_102\") ((\"utils.py\" 275) get_local \"utils_100\"))) \"Some\" \"None\") ((\"utils.py\" 275) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 275) get_local \"utils_101\"))) ((\"utils.py\" 276) set ((\"\" -1) get_local \"utils_100\") ((\"utils.py\" 276) add ((\"utils.py\" 273) iter \"utils_102\") ((\"utils.py\" 276) literal (intOrNat 1)))))))) ((\"utils.py\" 277) if_block ((\"utils.py\" 277) gt ((\"utils.py\" 277) size ((\"utils.py\" 277) literal (string \"a b\"))) ((\"utils.py\" 277) literal (intOrNat 0))) (((\"utils.py\" 278) set ((\"utils.py\" 278) get_local \"utils_101\") ((\"utils.py\" 278) cons ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) slice ((\"utils.py\" 278) get_local \"utils_100\") ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) is_nat ((\"utils.py\" 278) sub ((\"utils.py\" 278) size ((\"utils.py\" 278) literal (string \"a b\"))) ((\"utils.py\" 278) get_local \"utils_100\"))) \"Some\" \"None\") ((\"utils.py\" 278) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 278) get_local \"utils_101\"))))) ((\"utils.py\" 124) verify ((\"utils.py\" 124) eq ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 279) rev ((\"utils.py\" 279) get_local \"utils_101\")) (unknown 253))) ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 124) list ((\"utils.py\" 124) literal (string \"a\")) ((\"utils.py\" 124) literal (string \"b\"))) (unknown 253))))) ((\"utils.py\" 271) define_local \"utils_103\" ((\"utils.py\" 271) literal (intOrNat 0)) True) ((\"utils.py\" 272) define_local \"utils_104\" ((\"utils.py\" 272) list ) True) ((\"utils.py\" 273) for_group \"utils_105\" ((\"utils.py\" 273) range ((\"utils.py\" 273) literal (intOrNat 0)) ((\"utils.py\" 273) size ((\"utils.py\" 273) literal (string \"b,a\"))) ((\"utils.py\" 273) literal (intOrNat 1))) (((\"utils.py\" 274) if_block ((\"utils.py\" 274) eq ((\"utils.py\" 274) open_variant ((\"utils.py\" 274) slice ((\"utils.py\" 273) iter \"utils_105\") ((\"utils.py\" 274) literal (intOrNat 1)) ((\"utils.py\" 274) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 274) literal (string \",\"))) (((\"utils.py\" 275) set ((\"utils.py\" 275) get_local \"utils_104\") ((\"utils.py\" 275) cons ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) slice ((\"utils.py\" 275) get_local \"utils_103\") ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) is_nat ((\"utils.py\" 275) sub ((\"utils.py\" 273) iter \"utils_105\") ((\"utils.py\" 275) get_local \"utils_103\"))) \"Some\" \"None\") ((\"utils.py\" 275) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 275) get_local \"utils_104\"))) ((\"utils.py\" 276) set ((\"\" -1) get_local \"utils_103\") ((\"utils.py\" 276) add ((\"utils.py\" 273) iter \"utils_105\") ((\"utils.py\" 276) literal (intOrNat 1)))))))) ((\"utils.py\" 277) if_block ((\"utils.py\" 277) gt ((\"utils.py\" 277) size ((\"utils.py\" 277) literal (string \"b,a\"))) ((\"utils.py\" 277) literal (intOrNat 0))) (((\"utils.py\" 278) set ((\"utils.py\" 278) get_local \"utils_104\") ((\"utils.py\" 278) cons ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) slice ((\"utils.py\" 278) get_local \"utils_103\") ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) is_nat ((\"utils.py\" 278) sub ((\"utils.py\" 278) size ((\"utils.py\" 278) literal (string \"b,a\"))) ((\"utils.py\" 278) get_local \"utils_103\"))) \"Some\" \"None\") ((\"utils.py\" 278) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 278) get_local \"utils_104\"))))) ((\"utils.py\" 125) verify ((\"utils.py\" 125) eq ((\"utils.py\" 125) pack ((\"utils.py\" 125) type_annotation ((\"utils.py\" 279) rev ((\"utils.py\" 279) get_local \"utils_104\")) (unknown 256))) ((\"utils.py\" 125) pack ((\"utils.py\" 125) type_annotation ((\"utils.py\" 125) list ((\"utils.py\" 125) literal (string \"b\")) ((\"utils.py\" 125) literal (string \"a\"))) (unknown 256))))) ((\"utils.py\" 126) verify ((\"utils.py\" 126) eq ((\"utils.py\" 126) pack ((\"utils.py\" 126) type_annotation ((\"utils.py\" 126) call_lambda ((\"smartpy/tests/utils.py\" 93) private \"string_split\") ((\"utils.py\" 126) record (separator ((\"utils.py\" 126) literal (string \",,\"))) (text ((\"utils.py\" 126) literal (string \"a,b\"))))) (unknown 257))) ((\"utils.py\" 126) pack ((\"utils.py\" 126) type_annotation ((\"utils.py\" 126) list ((\"utils.py\" 126) literal (string \"a,b\"))) (unknown 257))))) ((\"utils.py\" 128) verify ((\"utils.py\" 128) eq ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"a\")) ((\"utils.py\" 234) literal (string \"abc\"))) ((\"utils.py\" 128) literal (bool True)))) ((\"utils.py\" 129) verify ((\"utils.py\" 129) eq ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"b\")) ((\"utils.py\" 234) literal (string \"abc\"))) ((\"utils.py\" 129) literal (bool False)))) ((\"utils.py\" 130) verify ((\"utils.py\" 130) eq ((\"utils.py\" 130) call_lambda ((\"smartpy/tests/utils.py\" 97) private \"string_starts_with\") ((\"utils.py\" 130) record (prefix ((\"utils.py\" 130) literal (string \"a\"))) (text ((\"utils.py\" 130) literal (string \"abc\"))))) ((\"utils.py\" 130) literal (bool True)))) ((\"utils.py\" 132) verify ((\"utils.py\" 132) eq ((\"utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 175) literal (string \"abc\")) ((\"utils.py\" 175) literal (string \"c\"))) ((\"utils.py\" 132) literal (bool True)))) ((\"utils.py\" 133) verify ((\"utils.py\" 133) eq ((\"utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 175) literal (string \"abc\")) ((\"utils.py\" 175) literal (string \"b\"))) ((\"utils.py\" 133) literal (bool False)))) ((\"utils.py\" 134) verify ((\"utils.py\" 134) eq ((\"utils.py\" 134) call_lambda ((\"smartpy/tests/utils.py\" 101) private \"string_ends_with\") ((\"utils.py\" 134) record (postfix ((\"utils.py\" 134) literal (string \"c\"))) (text ((\"utils.py\" 134) literal (string \"abc\"))))) ((\"utils.py\" 134) literal (bool True)))) ((\"utils.py\" 83) define_local \"utils_106_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_107_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3)) ((\"utils.py\" 84) literal (intOrNat 4)) ((\"utils.py\" 84) literal (intOrNat 5))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_106_hist\") ((\"utils.py\" 84) iter \"utils_107_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_106_hist\") ((\"utils.py\" 84) iter \"utils_107_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_106_hist\") ((\"utils.py\" 84) iter \"utils_107_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_106_hist\") ((\"utils.py\" 84) iter \"utils_107_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)) ((\"utils.py\" 90) literal (intOrNat 4)) ((\"utils.py\" 90) literal (intOrNat 5)))) True) ((\"utils.py\" 91) define_local \"utils_108_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_109_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_110_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_109_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_111_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_112_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_106_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_110_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_111_i\") ((\"utils.py\" 97) get_local \"utils_109_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_108_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_112_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_111_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_111_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_112_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_111_i\") ((\"utils.py\" 100) get_local \"utils_109_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_110_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_108_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_108_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_112_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_108_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_108_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_110_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_111_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_111_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_112_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_111_i\") ((\"utils.py\" 108) get_local \"utils_109_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_108_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_112_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_111_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_111_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_112_x\") \"value\"))))))))) ((\"utils.py\" 136) verify ((\"utils.py\" 136) eq ((\"utils.py\" 112) get_local \"utils_108_result\") ((\"utils.py\" 136) literal (intOrNat 3)))) ((\"utils.py\" 83) define_local \"utils_113_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_114_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_113_hist\") ((\"utils.py\" 84) iter \"utils_114_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_113_hist\") ((\"utils.py\" 84) iter \"utils_114_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_113_hist\") ((\"utils.py\" 84) iter \"utils_114_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_113_hist\") ((\"utils.py\" 84) iter \"utils_114_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90i\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)))) True) ((\"utils.py\" 91) define_local \"utils_115_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_116_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90i\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_117_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_116_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90i\")) True) ((\"utils.py\" 94) define_local \"utils_118_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_119_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_113_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_117_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_118_i\") ((\"utils.py\" 97) get_local \"utils_116_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_115_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_119_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_118_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_118_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_119_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_118_i\") ((\"utils.py\" 100) get_local \"utils_116_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_117_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_115_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_115_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_119_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_115_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_115_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_117_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_118_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_118_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_119_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_118_i\") ((\"utils.py\" 108) get_local \"utils_116_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_115_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_119_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_118_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_118_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_119_x\") \"value\"))))))))) ((\"utils.py\" 137) verify ((\"utils.py\" 137) eq ((\"utils.py\" 112) get_local \"utils_115_result\") ((\"utils.py\" 137) literal (intOrNat 2)))) ((\"utils.py\" 138) verify ((\"utils.py\" 138) eq ((\"utils.py\" 138) call_lambda ((\"smartpy/tests/utils.py\" 109) private \"math_median\") ((\"utils.py\" 138) list ((\"utils.py\" 138) literal (intOrNat 1)) ((\"utils.py\" 138) literal (intOrNat 2)) ((\"utils.py\" 138) literal (intOrNat 2)) ((\"utils.py\" 138) literal (intOrNat 5)))) ((\"utils.py\" 138) literal (intOrNat 2)))) ((\"utils.py\" 118) define_local \"compute_utils_118\" ((\"utils.py\" 118) sub ((\"utils.py\" 118) literal (intOrNat 3)) ((\"utils.py\" 118) size ((\"utils.py\" 140) literal (bytes \"0x11\")))) True) ((\"utils.py\" 119) define_local \"utils_120_bytes\" ((\"utils.py\" 119) literal (bytes \"0x\")) True) ((\"utils.py\" 120) while_block ((\"utils.py\" 120) lt ((\"utils.py\" 120) size ((\"utils.py\" 120) get_local \"utils_120_bytes\")) ((\"utils.py\" 118) open_variant ((\"utils.py\" 118) is_nat ((\"utils.py\" 118) get_local \"compute_utils_118\")) \"Some\" \"None\")) (((\"utils.py\" 121) set ((\"\" -1) get_local \"utils_120_bytes\") ((\"utils.py\" 121) add ((\"utils.py\" 140) literal (bytes \"0x00\")) ((\"utils.py\" 121) get_local \"utils_120_bytes\"))))) ((\"utils.py\" 140) verify ((\"utils.py\" 140) eq ((\"utils.py\" 122) add ((\"utils.py\" 122) get_local \"utils_120_bytes\") ((\"utils.py\" 140) literal (bytes \"0x11\"))) ((\"utils.py\" 140) literal (bytes \"0x000011\")))) ((\"utils.py\" 126) define_local \"compute_utils_126\" ((\"utils.py\" 126) sub ((\"utils.py\" 126) literal (intOrNat 3)) ((\"utils.py\" 126) size ((\"utils.py\" 141) literal (bytes \"0x11\")))) True) ((\"utils.py\" 127) define_local \"utils_121_bytes\" ((\"utils.py\" 127) literal (bytes \"0x\")) True) ((\"utils.py\" 128) while_block ((\"utils.py\" 128) lt ((\"utils.py\" 128) size ((\"utils.py\" 128) get_local \"utils_121_bytes\")) ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) is_nat ((\"utils.py\" 126) get_local \"compute_utils_126\")) \"Some\" \"None\")) (((\"utils.py\" 129) set ((\"\" -1) get_local \"utils_121_bytes\") ((\"utils.py\" 129) add ((\"utils.py\" 141) literal (bytes \"0x00\")) ((\"utils.py\" 129) get_local \"utils_121_bytes\"))))) ((\"utils.py\" 141) verify ((\"utils.py\" 141) eq ((\"utils.py\" 130) add ((\"utils.py\" 141) literal (bytes \"0x11\")) ((\"utils.py\" 130) get_local \"utils_121_bytes\")) ((\"utils.py\" 141) literal (bytes \"0x110000\")))) ((\"utils.py\" 151) define_local \"utils_122_value\" ((\"utils.py\" 151) type_annotation ((\"utils.py\" 151) literal (intOrNat 54)) \"nat\") True) ((\"utils.py\" 152) define_local \"utils_123_left_nibble\" ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 153) define_local \"utils_124_bytes\" ((\"utils.py\" 153) list ) True) ((\"utils.py\" 154) while_block ((\"utils.py\" 154) neq ((\"utils.py\" 154) get_local \"utils_122_value\") ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 155) match_tuple ((\"utils.py\" 155) open_variant ((\"utils.py\" 155) ediv ((\"utils.py\" 155) get_local \"utils_122_value\") ((\"utils.py\" 155) literal (intOrNat 16))) \"Some\" \"None\") \"match_pair_utils_155_fst\" \"match_pair_utils_155_snd\") ((\"utils.py\" 156) set ((\"\" -1) get_local \"utils_122_value\") ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_fst\")) ((\"utils.py\" 157) match_cases ((\"utils.py\" 157) get_local \"utils_123_left_nibble\") \"match_utils_157\" (((\"utils.py\" 158) match ((\"utils.py\" 157) cases_arg \"match_utils_157\") \"Some\" \"Some\" (((\"utils.py\" 159) set ((\"\" -1) get_local \"utils_123_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) lt ((\"utils.py\" 160) or ((\"utils.py\" 160) lsl ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\") ((\"utils.py\" 160) literal (intOrNat 4))) ((\"utils.py\" 158) variant_arg \"Some\")) ((\"utils.py\" 144) literal (intOrNat 256))) ((\"utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 160) set ((\"utils.py\" 160) get_local \"utils_124_bytes\") ((\"utils.py\" 160) cons ((\"utils.py\" 147) open_variant ((\"utils.py\" 145) slice ((\"utils.py\" 145) literal (intOrNat 6)) ((\"utils.py\" 145) literal (intOrNat 1)) ((\"utils.py\" 146) pack ((\"utils.py\" 146) MUL ((\"utils.py\" 146) to_int ((\"utils.py\" 160) or ((\"utils.py\" 160) lsl ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\") ((\"utils.py\" 160) literal (intOrNat 4))) ((\"utils.py\" 158) variant_arg \"Some\"))) ((\"utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 160) get_local \"utils_124_bytes\"))))) ((\"utils.py\" 161) match ((\"utils.py\" 157) cases_arg \"match_utils_157\") \"None\" \"None\" (((\"utils.py\" 162) set ((\"\" -1) get_local \"utils_123_left_nibble\") ((\"utils.py\" 162) variant \"Some\" ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\"))))))))) ((\"utils.py\" 164) match_cases ((\"utils.py\" 164) get_local \"utils_123_left_nibble\") \"match_utils_164\" (((\"utils.py\" 165) match ((\"utils.py\" 164) cases_arg \"match_utils_164\") \"Some\" \"Some\" (((\"utils.py\" 166) set ((\"\" -1) get_local \"utils_123_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) lt ((\"utils.py\" 167) or ((\"utils.py\" 167) literal (intOrNat 0)) ((\"utils.py\" 165) variant_arg \"Some\")) ((\"utils.py\" 144) literal (intOrNat 256))) ((\"utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 167) set ((\"utils.py\" 167) get_local \"utils_124_bytes\") ((\"utils.py\" 167) cons ((\"utils.py\" 147) open_variant ((\"utils.py\" 145) slice ((\"utils.py\" 145) literal (intOrNat 6)) ((\"utils.py\" 145) literal (intOrNat 1)) ((\"utils.py\" 146) pack ((\"utils.py\" 146) MUL ((\"utils.py\" 146) to_int ((\"utils.py\" 167) or ((\"utils.py\" 167) literal (intOrNat 0)) ((\"utils.py\" 165) variant_arg \"Some\"))) ((\"utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 167) get_local \"utils_124_bytes\"))))))) ((\"utils.py\" 142) verify ((\"utils.py\" 142) eq ((\"utils.py\" 169) concat ((\"utils.py\" 169) get_local \"utils_124_bytes\")) ((\"utils.py\" 142) literal (bytes \"0x36\")))) ((\"utils.py\" 143) verify ((\"utils.py\" 143) eq ((\"utils.py\" 139) open_variant ((\"utils.py\" 139) slice ((\"utils.py\" 139) literal (intOrNat 6)) ((\"utils.py\" 139) open_variant ((\"utils.py\" 139) is_nat ((\"utils.py\" 139) sub ((\"utils.py\" 139) size ((\"utils.py\" 134) pack ((\"utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 139) literal (intOrNat 6)))) \"Some\" \"None\") ((\"utils.py\" 134) pack ((\"utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"utils.py\" 139) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 143) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"utils.py\" 151) define_local \"utils_125_value\" ((\"utils.py\" 151) type_annotation ((\"utils.py\" 305) size ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) \"nat\") True) ((\"utils.py\" 152) define_local \"utils_126_left_nibble\" ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 153) define_local \"utils_127_bytes\" ((\"utils.py\" 153) list ) True) ((\"utils.py\" 154) while_block ((\"utils.py\" 154) neq ((\"utils.py\" 154) get_local \"utils_125_value\") ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 155) match_tuple ((\"utils.py\" 155) open_variant ((\"utils.py\" 155) ediv ((\"utils.py\" 155) get_local \"utils_125_value\") ((\"utils.py\" 155) literal (intOrNat 16))) \"Some\" \"None\") \"match_pair_utils_155_fst\" \"match_pair_utils_155_snd\") ((\"utils.py\" 156) set ((\"\" -1) get_local \"utils_125_value\") ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_fst\")) ((\"utils.py\" 157) match_cases ((\"utils.py\" 157) get_local \"utils_126_left_nibble\") \"match_utils_157\" (((\"utils.py\" 158) match ((\"utils.py\" 157) cases_arg \"match_utils_157\") \"Some\" \"Some\" (((\"utils.py\" 159) set ((\"\" -1) get_local \"utils_126_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) lt ((\"utils.py\" 160) or ((\"utils.py\" 160) lsl ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\") ((\"utils.py\" 160) literal (intOrNat 4))) ((\"utils.py\" 158) variant_arg \"Some\")) ((\"utils.py\" 144) literal (intOrNat 256))) ((\"utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 160) set ((\"utils.py\" 160) get_local \"utils_127_bytes\") ((\"utils.py\" 160) cons ((\"utils.py\" 147) open_variant ((\"utils.py\" 145) slice ((\"utils.py\" 145) literal (intOrNat 6)) ((\"utils.py\" 145) literal (intOrNat 1)) ((\"utils.py\" 146) pack ((\"utils.py\" 146) MUL ((\"utils.py\" 146) to_int ((\"utils.py\" 160) or ((\"utils.py\" 160) lsl ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\") ((\"utils.py\" 160) literal (intOrNat 4))) ((\"utils.py\" 158) variant_arg \"Some\"))) ((\"utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 160) get_local \"utils_127_bytes\"))))) ((\"utils.py\" 161) match ((\"utils.py\" 157) cases_arg \"match_utils_157\") \"None\" \"None\" (((\"utils.py\" 162) set ((\"\" -1) get_local \"utils_126_left_nibble\") ((\"utils.py\" 162) variant \"Some\" ((\"utils.py\" 155) variant_arg \"match_pair_utils_155_snd\"))))))))) ((\"utils.py\" 164) match_cases ((\"utils.py\" 164) get_local \"utils_126_left_nibble\") \"match_utils_164\" (((\"utils.py\" 165) match ((\"utils.py\" 164) cases_arg \"match_utils_164\") \"Some\" \"Some\" (((\"utils.py\" 166) set ((\"\" -1) get_local \"utils_126_left_nibble\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) lt ((\"utils.py\" 167) or ((\"utils.py\" 167) literal (intOrNat 0)) ((\"utils.py\" 165) variant_arg \"Some\")) ((\"utils.py\" 144) literal (intOrNat 256))) ((\"utils.py\" 144) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 167) set ((\"utils.py\" 167) get_local \"utils_127_bytes\") ((\"utils.py\" 167) cons ((\"utils.py\" 147) open_variant ((\"utils.py\" 145) slice ((\"utils.py\" 145) literal (intOrNat 6)) ((\"utils.py\" 145) literal (intOrNat 1)) ((\"utils.py\" 146) pack ((\"utils.py\" 146) MUL ((\"utils.py\" 146) to_int ((\"utils.py\" 167) or ((\"utils.py\" 167) literal (intOrNat 0)) ((\"utils.py\" 165) variant_arg \"Some\"))) ((\"utils.py\" 146) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 167) get_local \"utils_127_bytes\"))))))) ((\"utils.py\" 305) define_local \"lengthBytes\" ((\"utils.py\" 169) concat ((\"utils.py\" 169) get_local \"utils_127_bytes\")) True) ((\"utils.py\" 306) while_block ((\"utils.py\" 306) lt ((\"utils.py\" 306) size ((\"utils.py\" 306) get_local \"lengthBytes\")) ((\"utils.py\" 306) literal (intOrNat 4))) (((\"utils.py\" 307) set ((\"\" -1) get_local \"lengthBytes\") ((\"utils.py\" 307) add ((\"utils.py\" 307) literal (bytes \"0x00\")) ((\"utils.py\" 307) get_local \"lengthBytes\"))))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) eq ((\"utils.py\" 314) open_variant ((\"utils.py\" 314) unpack ((\"utils.py\" 313) concat ((\"utils.py\" 313) list ((\"utils.py\" 313) literal (bytes \"0x05\")) ((\"utils.py\" 313) literal (bytes \"0x01\")) ((\"utils.py\" 313) get_local \"lengthBytes\") ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"utils.py\" 314) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 144) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 146) verify ((\"utils.py\" 146) eq ((\"utils.py\" 359) and ((\"utils.py\" 359) ge ((\"utils.py\" 359) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 146) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"utils.py\" 359) le ((\"utils.py\" 359) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 146) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 146) literal (bool False)))) ((\"utils.py\" 147) verify ((\"utils.py\" 359) and ((\"utils.py\" 359) ge ((\"utils.py\" 359) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 147) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"utils.py\" 359) le ((\"utils.py\" 359) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 147) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"\" -1) lambda_general None False None \"_x0\" \"\" (((\"smartpy_utils.py\" 339) define_local \"utils_117\" ((\"smartpy_utils.py\" 339) size ((\"\" -1) lambda_params \"_x0\")) True) ((\"smartpy_utils.py\" 340) define_local \"utils_118\" ((\"smartpy_utils.py\" 340) literal (nat 0)) True) ((\"smartpy_utils.py\" 341) for_group \"utils_119\" ((\"smartpy_utils.py\" 341) range ((\"smartpy_utils.py\" 341) literal (intOrNat 0)) ((\"smartpy_utils.py\" 341) get_local \"utils_117\") ((\"smartpy_utils.py\" 341) literal (intOrNat 1))) (((\"smartpy_utils.py\" 342) define_local \"compute_smartpy_utils_342\" ((\"smartpy_utils.py\" 342) open_variant ((\"smartpy_utils.py\" 342) slice ((\"smartpy_utils.py\" 341) iter \"utils_119\") ((\"smartpy_utils.py\" 342) literal (intOrNat 1)) ((\"\" -1) lambda_params \"_x0\")) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 343) define_local \"compute_smartpy_utils_343\" ((\"smartpy_utils.py\" 343) mul_homo ((\"smartpy_utils.py\" 343) open_variant ((\"smartpy_utils.py\" 343) is_nat ((\"smartpy_utils.py\" 343) sub ((\"smartpy_utils.py\" 343) get_local \"utils_117\") ((\"smartpy_utils.py\" 343) add ((\"smartpy_utils.py\" 341) iter \"utils_119\") ((\"smartpy_utils.py\" 343) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 343) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 349) set ((\"\" -1) get_local \"utils_118\") ((\"smartpy_utils.py\" 349) add ((\"smartpy_utils.py\" 349) get_local \"utils_118\") ((\"smartpy_utils.py\" 349) mul_homo ((\"smartpy_utils.py\" 349) open_variant ((\"smartpy_utils.py\" 349) is_nat ((\"smartpy_utils.py\" 350) to_int ((\"smartpy_utils.py\" 350) open_variant ((\"smartpy_utils.py\" 350) unpack ((\"smartpy_utils.py\" 348) add ((\"smartpy_utils.py\" 348) add ((\"smartpy_utils.py\" 348) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 342) get_local \"compute_smartpy_utils_342\")) ((\"smartpy_utils.py\" 348) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 343) get_local \"compute_smartpy_utils_343\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 90) result ((\"smartpy_utils.py\" 353) get_local \"utils_118\"))))) (int_of_string ((\"\" -1) lambda_general None False None \"_x2\" \"\" (((\"utils.py\" 324) define_local \"utils_69\" ((\"\" -1) lambda_params \"_x2\") True) ((\"utils.py\" 325) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"\" -1) lambda_params \"_x2\")) (((\"utils.py\" 326) set ((\"\" -1) get_local \"utils_69\") ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) slice ((\"utils.py\" 326) literal (intOrNat 1)) ((\"utils.py\" 326) open_variant ((\"utils.py\" 326) is_nat ((\"utils.py\" 326) sub ((\"utils.py\" 326) size ((\"\" -1) lambda_params \"_x2\")) ((\"utils.py\" 326) literal (intOrNat 1)))) \"Some\" \"None\") ((\"\" -1) lambda_params \"_x2\")) \"Some\" ((\"utils.py\" 326) literal (string \"\")))))) ((\"utils.py\" 328) define_local \"utils_70\" ((\"utils.py\" 328) literal (intOrNat 0)) True) ((\"utils.py\" 329) for_group \"utils_71\" ((\"utils.py\" 329) range ((\"utils.py\" 329) literal (intOrNat 0)) ((\"utils.py\" 329) size ((\"utils.py\" 329) get_local \"utils_69\")) ((\"utils.py\" 329) literal (intOrNat 1))) (((\"utils.py\" 330) set ((\"\" -1) get_local \"utils_70\") ((\"utils.py\" 330) add ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) literal (intOrNat 10)) ((\"utils.py\" 330) get_local \"utils_70\")) ((\"utils.py\" 330) get_item ((\"utils.py\" 321) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) slice ((\"utils.py\" 329) iter \"utils_71\") ((\"utils.py\" 330) literal (intOrNat 1)) ((\"utils.py\" 330) get_local \"utils_69\")) \"Some\" \"None\")))))) ((\"utils.py\" 332) if_block ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 234) literal (string \"-\")) ((\"\" -1) lambda_params \"_x2\")) (((\"utils.py\" 333) set ((\"\" -1) get_local \"utils_70\") ((\"utils.py\" 333) mul_homo ((\"utils.py\" 333) get_local \"utils_70\") ((\"utils.py\" 333) literal (int -1)))))) ((\"utils.py\" 86) result ((\"utils.py\" 335) get_local \"utils_70\"))))) (math_median ((\"\" -1) lambda_general None False None \"_x4\" \"\" (((\"utils.py\" 83) define_local \"utils_72_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_73_x\" ((\"\" -1) lambda_params \"_x4\") (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_72_hist\") ((\"utils.py\" 84) iter \"utils_73_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_72_hist\") ((\"utils.py\" 84) iter \"utils_73_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_72_hist\") ((\"utils.py\" 84) iter \"utils_73_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_72_hist\") ((\"utils.py\" 84) iter \"utils_73_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"\" -1) lambda_params \"_x4\")) True) ((\"utils.py\" 91) define_local \"utils_74_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_75_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_76_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_75_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_77_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_78_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_72_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_76_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_77_i\") ((\"utils.py\" 97) get_local \"utils_75_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_74_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_78_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_77_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_77_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_78_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_77_i\") ((\"utils.py\" 100) get_local \"utils_75_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_76_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_74_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_74_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_78_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_74_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_74_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_76_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_77_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_77_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_78_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_77_i\") ((\"utils.py\" 108) get_local \"utils_75_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_74_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_78_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_77_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_77_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_78_x\") \"value\"))))))))) ((\"utils.py\" 110) result ((\"utils.py\" 112) get_local \"utils_74_result\"))))) (math_pow ((\"\" -1) lambda_general None False None \"_x6\" \"\" (((\"utils.py\" 106) result ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 106) attr ((\"\" -1) lambda_params \"_x6\") \"exponent\") ((\"utils.py\" 106) attr ((\"\" -1) lambda_params \"_x6\") \"base\") ((\"utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"\" -1) lambda_general None False None \"_x8\" \"\" (((\"utils.py\" 102) result ((\"utils.py\" 175) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 102) attr ((\"\" -1) lambda_params \"_x8\") \"text\") ((\"utils.py\" 102) attr ((\"\" -1) lambda_params \"_x8\") \"postfix\")))))) (string_of_int ((\"\" -1) lambda_general None False None \"_x10\" \"\" (((\"utils.py\" 286) define_local \"utils_79\" ((\"utils.py\" 286) abs ((\"\" -1) lambda_params \"_x10\")) True) ((\"utils.py\" 287) define_local \"utils_80\" ((\"utils.py\" 287) list ) True) ((\"utils.py\" 289) if_block ((\"utils.py\" 289) eq ((\"utils.py\" 289) get_local \"utils_79\") ((\"utils.py\" 289) literal (intOrNat 0))) (((\"utils.py\" 290) set ((\"utils.py\" 290) get_local \"utils_80\") ((\"utils.py\" 290) cons ((\"utils.py\" 290) literal (string \"0\")) ((\"utils.py\" 290) get_local \"utils_80\"))))) ((\"utils.py\" 291) while_block ((\"utils.py\" 291) gt ((\"utils.py\" 291) get_local \"utils_79\") ((\"utils.py\" 291) literal (intOrNat 0))) (((\"utils.py\" 292) set ((\"utils.py\" 292) get_local \"utils_80\") ((\"utils.py\" 292) cons ((\"utils.py\" 292) get_item ((\"utils.py\" 284) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 292) mod ((\"utils.py\" 292) get_local \"utils_79\") ((\"utils.py\" 292) literal (intOrNat 10)))) ((\"utils.py\" 292) get_local \"utils_80\"))) ((\"utils.py\" 293) set ((\"\" -1) get_local \"utils_79\") ((\"utils.py\" 293) div ((\"utils.py\" 293) get_local \"utils_79\") ((\"utils.py\" 293) literal (intOrNat 10)))))) ((\"utils.py\" 295) define_local \"utils_81\" ((\"utils.py\" 295) concat ((\"utils.py\" 295) get_local \"utils_80\")) True) ((\"utils.py\" 296) if_block ((\"utils.py\" 285) lt ((\"\" -1) lambda_params \"_x10\") ((\"utils.py\" 285) literal (intOrNat 0))) (((\"utils.py\" 297) set ((\"\" -1) get_local \"utils_81\") ((\"utils.py\" 297) add ((\"utils.py\" 297) literal (string \"-\")) ((\"utils.py\" 297) get_local \"utils_81\"))))) ((\"utils.py\" 82) result ((\"utils.py\" 299) get_local \"utils_81\"))))) (string_split ((\"\" -1) lambda_general None False None \"_x12\" \"\" (((\"utils.py\" 271) define_local \"utils_82\" ((\"utils.py\" 271) literal (intOrNat 0)) True) ((\"utils.py\" 272) define_local \"utils_83\" ((\"utils.py\" 272) list ) True) ((\"utils.py\" 273) for_group \"utils_84\" ((\"utils.py\" 273) range ((\"utils.py\" 273) literal (intOrNat 0)) ((\"utils.py\" 273) size ((\"utils.py\" 94) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) ((\"utils.py\" 273) literal (intOrNat 1))) (((\"utils.py\" 274) if_block ((\"utils.py\" 274) eq ((\"utils.py\" 274) open_variant ((\"utils.py\" 274) slice ((\"utils.py\" 273) iter \"utils_84\") ((\"utils.py\" 274) literal (intOrNat 1)) ((\"utils.py\" 94) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"\" -1) lambda_params \"_x12\") \"separator\")) (((\"utils.py\" 275) set ((\"utils.py\" 275) get_local \"utils_83\") ((\"utils.py\" 275) cons ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) slice ((\"utils.py\" 275) get_local \"utils_82\") ((\"utils.py\" 275) open_variant ((\"utils.py\" 275) is_nat ((\"utils.py\" 275) sub ((\"utils.py\" 273) iter \"utils_84\") ((\"utils.py\" 275) get_local \"utils_82\"))) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"utils.py\" 275) get_local \"utils_83\"))) ((\"utils.py\" 276) set ((\"\" -1) get_local \"utils_82\") ((\"utils.py\" 276) add ((\"utils.py\" 273) iter \"utils_84\") ((\"utils.py\" 276) literal (intOrNat 1)))))))) ((\"utils.py\" 277) if_block ((\"utils.py\" 277) gt ((\"utils.py\" 277) size ((\"utils.py\" 94) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) ((\"utils.py\" 277) literal (intOrNat 0))) (((\"utils.py\" 278) set ((\"utils.py\" 278) get_local \"utils_83\") ((\"utils.py\" 278) cons ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) slice ((\"utils.py\" 278) get_local \"utils_82\") ((\"utils.py\" 278) open_variant ((\"utils.py\" 278) is_nat ((\"utils.py\" 278) sub ((\"utils.py\" 278) size ((\"utils.py\" 94) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) ((\"utils.py\" 278) get_local \"utils_82\"))) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"\" -1) lambda_params \"_x12\") \"text\")) \"Some\" \"None\") ((\"utils.py\" 278) get_local \"utils_83\"))))) ((\"utils.py\" 94) result ((\"utils.py\" 279) rev ((\"utils.py\" 279) get_local \"utils_83\")))))) (string_starts_with ((\"\" -1) lambda_general None False None \"_x14\" \"\" (((\"utils.py\" 98) result ((\"utils.py\" 234) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 98) attr ((\"\" -1) lambda_params \"_x14\") \"prefix\") ((\"utils.py\" 98) attr ((\"\" -1) lambda_params \"_x14\") \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"\" -1) static_id 0)",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 }
]