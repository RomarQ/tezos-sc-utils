parameter (unit %test);
storage   unit;
code
  {
    # Private variable: int_of_bytes # pair @parameter @storage
    LAMBDA
      bytes
      nat
      {
        # utils_57 = sp.local("utils_57", sp.len(_x0)) # bytes
        DUP;        # bytes : bytes
        SIZE;       # nat : bytes
        # utils_58 = sp.local("utils_58", 0) # nat : bytes
        PUSH nat 0; # nat : nat : bytes
        SWAP;       # nat : nat : bytes
        # for utils_59 in sp.range(0, utils_57.value): ... (sp.TNat) # nat : nat : bytes
        DUP;        # nat : nat : nat : bytes
        DUG 2;      # nat : nat : nat : bytes
        PUSH nat 0; # nat : nat : nat : nat : bytes
        DUP;        # nat : nat : nat : nat : nat : bytes
        DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
        COMPARE;    # int : nat : nat : nat : nat : bytes
        GT;         # bool : nat : nat : nat : nat : bytes
        LOOP
          {
            # compute_smartpy_utils_342 = sp.local("compute_smartpy_utils_342", sp.slice(_x0, utils_59, 1).open_some(message = sp.unit)) # nat : nat : nat : nat : bytes
            DUP 5;      # bytes : nat : nat : nat : nat : bytes
            PUSH nat 1; # nat : bytes : nat : nat : nat : nat : bytes
            DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : bytes
            SLICE;      # option bytes : nat : nat : nat : nat : bytes
            IF_NONE
              {
                UNIT;       # unit : nat : nat : nat : nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : nat : nat : nat : bytes
            # compute_smartpy_utils_343 = sp.local("compute_smartpy_utils_343", sp.as_nat(utils_57.value - (utils_59 + 1)) * 2) # @some : nat : nat : nat : nat : bytes
            PUSH nat 2; # nat : @some : nat : nat : nat : nat : bytes
            PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
            DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
            ADD;        # nat : nat : @some : nat : nat : nat : nat : bytes
            DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : bytes
            SUB;        # int : nat : @some : nat : nat : nat : nat : bytes
            ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : bytes
            IF_NONE
              {
                PUSH int 343; # int : nat : @some : nat : nat : nat : nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @some : nat : nat : nat : nat : bytes
            MUL;        # nat : @some : nat : nat : nat : nat : bytes
            # utils_58.value += sp.as_nat(sp.to_int(sp.unpack((sp.bytes('0x050a00000020') + compute_smartpy_utils_342.value) + sp.bytes('0x00000000000000000000000000000000000000000000000000000000000000'), sp.TBls12_381_fr).open_some(message = sp.unit))) * sp.michelson("\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            ")(compute_smartpy_utils_343.value, 16, 1) # nat : @some : nat : nat : nat : nat : bytes
            PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : bytes
            PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : bytes
            DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
            PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
            LOOP
              {
                PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                IF_NONE
                  {
                    UNIT;       # unit : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    FAILWITH;   # FAILED
                  }
                  {
                    CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                  }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                IF
                  {
                    SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                    DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                  }
                  {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
                NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
              }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : bytes
            DROP 2;     # nat : nat : @some : nat : nat : nat : nat : bytes
            SWAP;       # nat : nat : @some : nat : nat : nat : nat : bytes
            DROP;       # nat : @some : nat : nat : nat : nat : bytes
            PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : bytes
            DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : bytes
            PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : bytes
            CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : bytes
            CONCAT;     # bytes : nat : nat : nat : nat : nat : bytes
            UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : bytes
            IF_NONE
              {
                UNIT;       # unit : nat : nat : nat : nat : nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : nat : nat : nat : nat : bytes
            INT;        # int : nat : nat : nat : nat : nat : bytes
            ISNAT;      # option nat : nat : nat : nat : nat : nat : bytes
            IF_NONE
              {
                PUSH int 349; # int : nat : nat : nat : nat : nat : bytes
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : nat : nat : nat : nat : bytes
            MUL;        # nat : nat : nat : nat : nat : bytes
            DIG 3;      # nat : nat : nat : nat : nat : bytes
            ADD;        # nat : nat : nat : nat : bytes
            DUG 2;      # nat : nat : nat : nat : bytes
            # loop step # nat : nat : nat : nat : bytes
            PUSH nat 1; # nat : nat : nat : nat : nat : bytes
            ADD;        # nat : nat : nat : nat : bytes
            DUP;        # nat : nat : nat : nat : nat : bytes
            DUP 3;      # nat : nat : nat : nat : nat : nat : bytes
            COMPARE;    # int : nat : nat : nat : nat : bytes
            GT;         # bool : nat : nat : nat : nat : bytes
          }; # nat : nat : nat : nat : bytes
        DROP 2;     # nat : nat : bytes
        SWAP;       # nat : nat : bytes
        DROP;       # nat : bytes
        SWAP;       # bytes : nat
        DROP;       # nat
        # sp.result(utils_58.value) # nat
      }; # lambda bytes nat : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda bytes nat
    # Private variable: int_of_string # pair @parameter @storage : lambda bytes nat
    LAMBDA
      string
      int
      {
        # utils_5 = sp.local("utils_5", _x2) # string
        DUP;        # string : string
        # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', _x2): # string : string
        DUP;        # string : string : string
        DUG 2;      # string : string : string
        PUSH string "-"; # string : string : string : string
        DUP;        # string : string : string : string : string
        SIZE;       # nat : string : string : string : string
        DIG 2;      # string : nat : string : string : string
        SWAP;       # nat : string : string : string : string
        PUSH nat 0; # nat : nat : string : string : string : string
        SLICE;      # option string : string : string : string
        IF_NONE
          {
            DROP;       # string : string
            PUSH bool False; # bool : string : string
          }
          {
            COMPARE;    # int : string : string
            EQ;         # bool : string : string
          }; # bool : string : string
        IF
          {
            DROP;       # string
            # utils_5.value = sp.slice(_x2, 1, sp.as_nat(sp.len(_x2) - 1)).open_some(message = '') # string
            DUP;        # string : string
            PUSH nat 1; # nat : string : string
            DUP 3;      # string : nat : string : string
            SIZE;       # nat : nat : string : string
            SUB;        # int : string : string
            ISNAT;      # option nat : string : string
            IF_NONE
              {
                PUSH int 326; # int : string : string
                FAILWITH;   # FAILED
              }
              {}; # @some : string : string
            PUSH nat 1; # nat : @some : string : string
            SLICE;      # option string : string
            IF_NONE
              {
                PUSH string ""; # string : string
                FAILWITH;   # FAILED
              }
              {}; # @some : string
          }
          {}; # string : string
        # utils_6 = sp.local("utils_6", 0) # string : string
        PUSH int 0; # int : string : string
        SWAP;       # string : int : string
        # for utils_7 in sp.range(0, sp.len(utils_5.value)): ... (sp.TNat) # string : int : string
        DUP;        # string : string : int : string
        DUG 2;      # string : int : string : string
        SIZE;       # nat : int : string : string
        PUSH nat 0; # nat : nat : int : string : string
        DUP;        # nat : nat : nat : int : string : string
        DUP 3;      # nat : nat : nat : nat : int : string : string
        COMPARE;    # int : nat : nat : int : string : string
        GT;         # bool : nat : nat : int : string : string
        LOOP
          {
            # utils_6.value = (10 * utils_6.value) + {'0' : 0, '1' : 1, '2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9}[sp.slice(utils_5.value, utils_7, 1).open_some()] # nat : nat : int : string : string
            PUSH (map string int) {Elt "0" 0; Elt "1" 1; Elt "2" 2; Elt "3" 3; Elt "4" 4; Elt "5" 5; Elt "6" 6; Elt "7" 7; Elt "8" 8; Elt "9" 9}; # map string int : nat : nat : int : string : string
            DUP 5;      # string : map string int : nat : nat : int : string : string
            PUSH nat 1; # nat : string : map string int : nat : nat : int : string : string
            DUP 4;      # nat : nat : string : map string int : nat : nat : int : string : string
            SLICE;      # option string : map string int : nat : nat : int : string : string
            IF_NONE
              {
                PUSH int 330; # int : map string int : nat : nat : int : string : string
                FAILWITH;   # FAILED
              }
              {}; # @some : map string int : nat : nat : int : string : string
            GET;        # option int : nat : nat : int : string : string
            IF_NONE
              {
                PUSH int 330; # int : nat : nat : int : string : string
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : nat : int : string : string
            DIG 3;      # int : @some : nat : nat : string : string
            PUSH int 10; # int : int : @some : nat : nat : string : string
            MUL;        # int : @some : nat : nat : string : string
            ADD;        # int : nat : nat : string : string
            DUG 2;      # nat : nat : int : string : string
            # loop step # nat : nat : int : string : string
            PUSH nat 1; # nat : nat : nat : int : string : string
            ADD;        # nat : nat : int : string : string
            DUP;        # nat : nat : nat : int : string : string
            DUP 3;      # nat : nat : nat : nat : int : string : string
            COMPARE;    # int : nat : nat : int : string : string
            GT;         # bool : nat : nat : int : string : string
          }; # nat : nat : int : string : string
        DROP 2;     # int : string : string
        SWAP;       # string : int : string
        DROP;       # int : string
        SWAP;       # string : int
        # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', _x2): # string : int
        PUSH string "-"; # string : string : int
        DUP;        # string : string : string : int
        SIZE;       # nat : string : string : int
        DIG 2;      # string : nat : string : int
        SWAP;       # nat : string : string : int
        PUSH nat 0; # nat : nat : string : string : int
        SLICE;      # option string : string : int
        IF_NONE
          {
            DROP;       # int
            PUSH bool False; # bool : int
          }
          {
            COMPARE;    # int : int
            EQ;         # bool : int
          }; # bool : int
        IF
          {
            # utils_6.value *= -1 # int
            PUSH int -1; # int : int
            SWAP;       # int : int
            MUL;        # int
          }
          {}; # int
        # sp.result(utils_6.value) # int
      }; # lambda string int : pair @parameter @storage : lambda bytes nat
    SWAP;       # pair @parameter @storage : lambda string int : lambda bytes nat
    # Private variable: math_median # pair @parameter @storage : lambda string int : lambda bytes nat
    LAMBDA
      (list nat)
      nat
      {
        # utils_8_hist = sp.local("utils_8_hist", {}) # list nat
        EMPTY_MAP nat nat; # map nat nat : list nat
        SWAP;       # list nat : map nat nat
        # for utils_9_x in _x4: ... # list nat : map nat nat
        DUP;        # list nat : list nat : map nat nat
        DUG 2;      # list nat : map nat nat : list nat
        ITER
          {
            SWAP;       # map nat nat : nat : list nat
            # if utils_8_hist.value.contains(utils_9_x): # map nat nat : nat : list nat
            DUP;        # map nat nat : map nat nat : nat : list nat
            DUG 2;      # map nat nat : nat : map nat nat : list nat
            SWAP;       # nat : map nat nat : map nat nat : list nat
            DUP;        # nat : nat : map nat nat : map nat nat : list nat
            DUG 2;      # nat : map nat nat : nat : map nat nat : list nat
            MEM;        # bool : nat : map nat nat : list nat
            IF
              {
                SWAP;       # map nat nat : nat : list nat
                # utils_8_hist.value[utils_9_x] += 1 # map nat nat : nat : list nat
                DUP;        # map nat nat : map nat nat : nat : list nat
                DIG 2;      # nat : map nat nat : map nat nat : list nat
                DUP;        # nat : nat : map nat nat : map nat nat : list nat
                DUG 2;      # nat : map nat nat : nat : map nat nat : list nat
                GET;        # option nat : nat : map nat nat : list nat
                IF_NONE
                  {
                    PUSH int 86; # int : nat : map nat nat : list nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : map nat nat : list nat
                PUSH nat 1; # nat : @some : nat : map nat nat : list nat
                ADD;        # nat : nat : map nat nat : list nat
                SOME;       # option nat : nat : map nat nat : list nat
                SWAP;       # nat : option nat : map nat nat : list nat
                UPDATE;     # map nat nat : list nat
              }
              {
                SWAP;       # map nat nat : nat : list nat
                # utils_8_hist.value[utils_9_x] = 1 # map nat nat : nat : list nat
                PUSH (option nat) (Some 1); # option nat : map nat nat : nat : list nat
                DIG 2;      # nat : option nat : map nat nat : list nat
                UPDATE;     # map nat nat : list nat
              }; # map nat nat : list nat
          }; # map nat nat : list nat
        SWAP;       # list nat : map nat nat
        # compute_utils_90 = sp.local("compute_utils_90", sp.len(_x4)) # list nat : map nat nat
        DUP;        # list nat : list nat : map nat nat
        DUG 2;      # list nat : map nat nat : list nat
        SIZE;       # nat : map nat nat : list nat
        # utils_10_result = sp.local("utils_10_result", 0) # nat : map nat nat : list nat
        PUSH nat 0; # nat : nat : map nat nat : list nat
        # utils_11_half = sp.local("utils_11_half", compute_utils_90.value // 2) # nat : nat : map nat nat : list nat
        PUSH nat 2; # nat : nat : nat : map nat nat : list nat
        DUP 3;      # nat : nat : nat : nat : map nat nat : list nat
        EDIV;       # option (pair nat nat) : nat : nat : map nat nat : list nat
        IF_NONE
          {
            PUSH int 92; # int : nat : nat : map nat nat : list nat
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat : nat : map nat nat : list nat
          }; # nat : nat : nat : map nat nat : list nat
        # utils_12_use_average = sp.local("utils_12_use_average", (utils_11_half.value * 2) == compute_utils_90.value) # nat : nat : nat : map nat nat : list nat
        DUP 3;      # nat : nat : nat : nat : map nat nat : list nat
        PUSH nat 2; # nat : nat : nat : nat : nat : map nat nat : list nat
        DUP 3;      # nat : nat : nat : nat : nat : nat : map nat nat : list nat
        MUL;        # nat : nat : nat : nat : nat : map nat nat : list nat
        COMPARE;    # int : nat : nat : nat : map nat nat : list nat
        EQ;         # bool : nat : nat : nat : map nat nat : list nat
        # utils_13_i = sp.local("utils_13_i", 0) # bool : nat : nat : nat : map nat nat : list nat
        PUSH nat 0; # nat : bool : nat : nat : nat : map nat nat : list nat
        # for utils_14_x in utils_8_hist.value.items(): ... # nat : bool : nat : nat : nat : map nat nat : list nat
        DUP 6;      # map nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
        ITER
          {
            # if utils_12_use_average.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
            DUP 3;      # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
            IF
              {
                # if utils_13_i.value < utils_11_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                LT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                IF
                  {
                    DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    # utils_10_result.value = utils_14_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    # utils_13_i.value += utils_14_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    CDR;        # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    DIG 2;      # nat : nat : pair nat nat : bool : nat : nat : nat : map nat nat : list nat
                    ADD;        # nat : pair nat nat : bool : nat : nat : nat : map nat nat : list nat
                    SWAP;       # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    # if utils_13_i.value > utils_11_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    GT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    IF
                      {
                        DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                        DROP 2;     # nat : nat : nat : nat : map nat nat : list nat
                        # utils_12_use_average.value = False # nat : nat : nat : nat : map nat nat : list nat
                        PUSH bool False; # bool : nat : nat : nat : nat : map nat nat : list nat
                        SWAP;       # nat : bool : nat : nat : nat : map nat nat : list nat
                      }
                      {
                        DROP;       # nat : bool : nat : nat : nat : map nat nat : list nat
                      }; # nat : bool : nat : nat : nat : map nat nat : list nat
                  }
                  {
                    DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DROP;       # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    # utils_10_result.value += utils_14_x.key # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DUP;        # pair nat nat : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    CAR;        # nat : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                    ADD;        # nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                    DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    # utils_10_result.value //= 2 # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    PUSH nat 2; # nat : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                    EDIV;       # option (pair nat nat) : pair nat nat : nat : nat : nat : map nat nat : list nat
                    IF_NONE
                      {
                        PUSH int 104; # int : pair nat nat : nat : nat : nat : map nat nat : list nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                      }; # nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                    DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    # utils_12_use_average.value = False # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    PUSH bool False; # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DUG 2;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    # utils_13_i.value += utils_14_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    ADD;        # nat : bool : nat : nat : nat : map nat nat : list nat
                  }; # nat : bool : nat : nat : nat : map nat nat : list nat
              }
              {
                # if utils_13_i.value <= utils_11_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                LE;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                IF
                  {
                    DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    # utils_10_result.value = utils_14_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    # utils_13_i.value += utils_14_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    ADD;        # nat : bool : nat : nat : nat : map nat nat : list nat
                  }
                  {
                    DROP;       # nat : bool : nat : nat : nat : map nat nat : list nat
                  }; # nat : bool : nat : nat : nat : map nat nat : list nat
              }; # nat : bool : nat : nat : nat : map nat nat : list nat
          }; # nat : bool : nat : nat : nat : map nat nat : list nat
        DROP 3;     # nat : nat : map nat nat : list nat
        SWAP;       # nat : nat : map nat nat : list nat
        DROP;       # nat : map nat nat : list nat
        SWAP;       # map nat nat : nat : list nat
        DROP;       # nat : list nat
        SWAP;       # list nat : nat
        DROP;       # nat
        # sp.result(utils_10_result.value) # nat
      }; # lambda (list nat) nat : pair @parameter @storage : lambda string int : lambda bytes nat
    SWAP;       # pair @parameter @storage : lambda (list nat) nat : lambda string int : lambda bytes nat
    # Private variable: math_pow # pair @parameter @storage : lambda (list nat) nat : lambda string int : lambda bytes nat
    LAMBDA
      (pair nat nat)
      nat
      {
        # sp.result(sp.michelson("\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            ")(_x6.exponent, _x6.base, 1)) # pair nat nat
        PUSH nat 1; # nat : pair nat nat
        SWAP;       # pair nat nat : nat
        DUP;        # pair nat nat : pair nat nat : nat
        CAR;        # nat : pair nat nat : nat
        SWAP;       # pair nat nat : nat : nat
        DUP;        # pair nat nat : pair nat nat : nat : nat
        DUG 3;      # pair nat nat : nat : nat : pair nat nat
        CDR;        # nat : nat : nat : pair nat nat
        DUP;        # nat : nat : nat : nat : pair nat nat
        PUSH nat 0; # nat : nat : nat : nat : nat : pair nat nat
        COMPARE;    # int : nat : nat : nat : pair nat nat
        NEQ;        # bool : nat : nat : nat : pair nat nat
        LOOP
          {
            PUSH nat 0; # nat : nat : nat : nat : pair nat nat
            PUSH nat 2; # nat : nat : nat : nat : nat : pair nat nat
            DUP 3;      # nat : nat : nat : nat : nat : nat : pair nat nat
            EDIV;       # option (pair nat nat) : nat : nat : nat : nat : pair nat nat
            IF_NONE
              {
                UNIT;       # unit : nat : nat : nat : nat : pair nat nat
                FAILWITH;   # FAILED
              }
              {
                CDR;        # nat : nat : nat : nat : nat : pair nat nat
              }; # nat : nat : nat : nat : nat : pair nat nat
            COMPARE;    # int : nat : nat : nat : pair nat nat
            NEQ;        # bool : nat : nat : nat : pair nat nat
            IF
              {
                SWAP;       # nat : nat : nat : pair nat nat
                DUP;        # nat : nat : nat : nat : pair nat nat
                DUG 2;      # nat : nat : nat : nat : pair nat nat
                DIG 3;      # nat : nat : nat : nat : pair nat nat
                MUL;        # nat : nat : nat : pair nat nat
                DUG 2;      # nat : nat : nat : pair nat nat
              }
              {}; # nat : nat : nat : pair nat nat
            PUSH nat 1; # nat : nat : nat : nat : pair nat nat
            SWAP;       # nat : nat : nat : nat : pair nat nat
            LSR;        # nat : nat : nat : pair nat nat
            SWAP;       # nat : nat : nat : pair nat nat
            DUP;        # nat : nat : nat : nat : pair nat nat
            MUL;        # nat : nat : nat : pair nat nat
            SWAP;       # nat : nat : nat : pair nat nat
            DUP;        # nat : nat : nat : nat : pair nat nat
            PUSH nat 0; # nat : nat : nat : nat : nat : pair nat nat
            COMPARE;    # int : nat : nat : nat : pair nat nat
            NEQ;        # bool : nat : nat : nat : pair nat nat
          }; # nat : nat : nat : pair nat nat
        DROP 2;     # nat : pair nat nat
        SWAP;       # pair nat nat : nat
        DROP;       # nat
      }; # lambda (pair nat nat) nat : pair @parameter @storage : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # pair @parameter @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # Private variable: string_ends_with # pair @parameter @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LAMBDA
      (pair string string)
      bool
      {
        # sp.result(sp.michelson("\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            ")(_x8.text, _x8.postfix)) # pair string string
        DUP;        # pair string string : pair string string
        CAR;        # string : pair string string
        SWAP;       # pair string string : string
        DUP;        # pair string string : pair string string : string
        DUG 2;      # pair string string : string : pair string string
        CDR;        # string : string : pair string string
        DUP;        # string : string : string : pair string string
        SIZE;       # nat : string : string : pair string string
        DUP 3;      # string : nat : string : string : pair string string
        SIZE;       # nat : nat : string : string : pair string string
        SWAP;       # nat : nat : string : string : pair string string
        PAIR;       # pair nat nat : string : string : pair string string
        DUP;        # pair nat nat : pair nat nat : string : string : pair string string
        UNPAIR;     # nat : nat : pair nat nat : string : string : pair string string
        COMPARE;    # int : pair nat nat : string : string : pair string string
        GE;         # bool : pair nat nat : string : string : pair string string
        IF
          {
            DIG 3;      # pair string string : pair nat nat : string : string
            DROP;       # pair nat nat : string : string
            UNPAIR;     # nat : nat : string : string
            DUP 2;      # nat : nat : nat : string : string
            SWAP;       # nat : nat : nat : string : string
            SUB;        # int : nat : string : string
            ABS;        # nat : nat : string : string
            SLICE;      # option string : string
            IF_NONE
              {
                DROP;       # 
                PUSH bool False; # bool
              }
              {
                COMPARE;    # int
                EQ;         # bool
              }; # bool
          }
          {
            DROP 4;     # 
            PUSH bool False; # bool
          }; # bool
      }; # lambda (pair string string) bool : pair @parameter @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # pair @parameter @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # Private variable: string_of_int # pair @parameter @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LAMBDA
      int
      string
      {
        # utils_15 = sp.local("utils_15", abs(_x10)) # int
        DUP;        # int : int
        ABS;        # nat : int
        # utils_16 = sp.local("utils_16", sp.list([])) # nat : int
        NIL string; # list string : nat : int
        # if utils_15.value == 0: # list string : nat : int
        PUSH nat 0; # nat : list string : nat : int
        DUP 3;      # nat : nat : list string : nat : int
        COMPARE;    # int : list string : nat : int
        EQ;         # bool : list string : nat : int
        IF
          {
            # utils_16.value.push('0') # list string : nat : int
            PUSH string "0"; # string : list string : nat : int
            CONS;       # list string : nat : int
          }
          {}; # list string : nat : int
        # while utils_15.value > 0 : ... # list string : nat : int
        PUSH nat 0; # nat : list string : nat : int
        DUP 3;      # nat : nat : list string : nat : int
        COMPARE;    # int : list string : nat : int
        GT;         # bool : list string : nat : int
        LOOP
          {
            # utils_16.value.push({0 : '0', 1 : '1', 2 : '2', 3 : '3', 4 : '4', 5 : '5', 6 : '6', 7 : '7', 8 : '8', 9 : '9'}[utils_15.value % 10]) # list string : nat : int
            PUSH (map nat string) {Elt 0 "0"; Elt 1 "1"; Elt 2 "2"; Elt 3 "3"; Elt 4 "4"; Elt 5 "5"; Elt 6 "6"; Elt 7 "7"; Elt 8 "8"; Elt 9 "9"}; # map nat string : list string : nat : int
            PUSH nat 10; # nat : map nat string : list string : nat : int
            DUP 4;      # nat : nat : map nat string : list string : nat : int
            EDIV;       # option (pair nat nat) : map nat string : list string : nat : int
            IF_NONE
              {
                PUSH int 292; # int : map nat string : list string : nat : int
                FAILWITH;   # FAILED
              }
              {
                CDR;        # nat : map nat string : list string : nat : int
              }; # nat : map nat string : list string : nat : int
            GET;        # option string : list string : nat : int
            IF_NONE
              {
                PUSH int 292; # int : list string : nat : int
                FAILWITH;   # FAILED
              }
              {}; # @some : list string : nat : int
            CONS;       # list string : nat : int
            # utils_15.value //= 10 # list string : nat : int
            PUSH nat 10; # nat : list string : nat : int
            DIG 2;      # nat : nat : list string : int
            EDIV;       # option (pair nat nat) : list string : int
            IF_NONE
              {
                PUSH int 293; # int : list string : int
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : list string : int
              }; # nat : list string : int
            SWAP;       # list string : nat : int
            # check for next loop: utils_15.value > 0 # list string : nat : int
            PUSH nat 0; # nat : list string : nat : int
            DUP 3;      # nat : nat : list string : nat : int
            COMPARE;    # int : list string : nat : int
            GT;         # bool : list string : nat : int
          }; # list string : nat : int
        SWAP;       # nat : list string : int
        DROP;       # list string : int
        # utils_17 = sp.local("utils_17", sp.concat(utils_16.value)) # list string : int
        CONCAT;     # string : int
        # if _x10 < 0: # string : int
        PUSH int 0; # int : string : int
        DIG 2;      # int : int : string
        COMPARE;    # int : string
        LT;         # bool : string
        IF
          {
            # utils_17.value = '-' + utils_17.value # string
            PUSH string "-"; # string : string
            CONCAT;     # string
          }
          {}; # string
        # sp.result(utils_17.value) # string
      }; # lambda int string : pair @parameter @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # pair @parameter @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # Private variable: string_split # pair @parameter @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LAMBDA
      (pair string string)
      (list string)
      {
        # utils_18 = sp.local("utils_18", 0) # pair string string
        PUSH nat 0; # nat : pair string string
        # utils_19 = sp.local("utils_19", sp.list([])) # nat : pair string string
        NIL string; # list string : nat : pair string string
        # for utils_20 in sp.range(0, sp.len(_x12.text)): ... (sp.TNat) # list string : nat : pair string string
        DUP 3;      # pair string string : list string : nat : pair string string
        CDR;        # string : list string : nat : pair string string
        SIZE;       # nat : list string : nat : pair string string
        PUSH nat 0; # nat : nat : list string : nat : pair string string
        DUP;        # nat : nat : nat : list string : nat : pair string string
        DUP 3;      # nat : nat : nat : nat : list string : nat : pair string string
        COMPARE;    # int : nat : nat : list string : nat : pair string string
        GT;         # bool : nat : nat : list string : nat : pair string string
        LOOP
          {
            # if sp.slice(_x12.text, utils_20, 1).open_some() == _x12.separator: # nat : nat : list string : nat : pair string string
            DIG 4;      # pair string string : nat : nat : list string : nat
            DUP;        # pair string string : pair string string : nat : nat : list string : nat
            CAR;        # string : pair string string : nat : nat : list string : nat
            SWAP;       # pair string string : string : nat : nat : list string : nat
            DUP;        # pair string string : pair string string : string : nat : nat : list string : nat
            DUG 6;      # pair string string : string : nat : nat : list string : nat : pair string string
            CDR;        # string : string : nat : nat : list string : nat : pair string string
            PUSH nat 1; # nat : string : string : nat : nat : list string : nat : pair string string
            DUP 4;      # nat : nat : string : string : nat : nat : list string : nat : pair string string
            SLICE;      # option string : string : nat : nat : list string : nat : pair string string
            IF_NONE
              {
                PUSH int 274; # int : string : nat : nat : list string : nat : pair string string
                FAILWITH;   # FAILED
              }
              {}; # @some : string : nat : nat : list string : nat : pair string string
            COMPARE;    # int : nat : nat : list string : nat : pair string string
            EQ;         # bool : nat : nat : list string : nat : pair string string
            IF
              {
                # utils_19.value.push(sp.slice(_x12.text, utils_18.value, sp.as_nat(utils_20 - utils_18.value)).open_some()) # nat : nat : list string : nat : pair string string
                DIG 2;      # list string : nat : nat : nat : pair string string
                DUP 5;      # pair string string : list string : nat : nat : nat : pair string string
                CDR;        # string : list string : nat : nat : nat : pair string string
                DUP 5;      # nat : string : list string : nat : nat : nat : pair string string
                DUP 4;      # nat : nat : string : list string : nat : nat : nat : pair string string
                SUB;        # int : string : list string : nat : nat : nat : pair string string
                ISNAT;      # option nat : string : list string : nat : nat : nat : pair string string
                IF_NONE
                  {
                    PUSH int 275; # int : string : list string : nat : nat : nat : pair string string
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : string : list string : nat : nat : nat : pair string string
                DIG 5;      # nat : @some : string : list string : nat : nat : pair string string
                SLICE;      # option string : list string : nat : nat : pair string string
                IF_NONE
                  {
                    PUSH int 275; # int : list string : nat : nat : pair string string
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list string : nat : nat : pair string string
                CONS;       # list string : nat : nat : pair string string
                DUG 2;      # nat : nat : list string : pair string string
                # utils_18.value = utils_20 + 1 # nat : nat : list string : pair string string
                DUP;        # nat : nat : nat : list string : pair string string
                PUSH nat 1; # nat : nat : nat : nat : list string : pair string string
                ADD;        # nat : nat : nat : list string : pair string string
                DUG 3;      # nat : nat : list string : nat : pair string string
              }
              {}; # nat : nat : list string : nat : pair string string
            # loop step # nat : nat : list string : nat : pair string string
            PUSH nat 1; # nat : nat : nat : list string : nat : pair string string
            ADD;        # nat : nat : list string : nat : pair string string
            DUP;        # nat : nat : nat : list string : nat : pair string string
            DUP 3;      # nat : nat : nat : nat : list string : nat : pair string string
            COMPARE;    # int : nat : nat : list string : nat : pair string string
            GT;         # bool : nat : nat : list string : nat : pair string string
          }; # nat : nat : list string : nat : pair string string
        DROP 2;     # list string : nat : pair string string
        # if sp.len(_x12.text) > 0: # list string : nat : pair string string
        PUSH nat 0; # nat : list string : nat : pair string string
        DUP 4;      # pair string string : nat : list string : nat : pair string string
        CDR;        # string : nat : list string : nat : pair string string
        SIZE;       # nat : nat : list string : nat : pair string string
        COMPARE;    # int : list string : nat : pair string string
        GT;         # bool : list string : nat : pair string string
        IF
          {
            # utils_19.value.push(sp.slice(_x12.text, utils_18.value, sp.as_nat(sp.len(_x12.text) - utils_18.value)).open_some()) # list string : nat : pair string string
            DUP 3;      # pair string string : list string : nat : pair string string
            CDR;        # string : list string : nat : pair string string
            DUP 3;      # nat : string : list string : nat : pair string string
            DIG 4;      # pair string string : nat : string : list string : nat
            CDR;        # string : nat : string : list string : nat
            SIZE;       # nat : nat : string : list string : nat
            SUB;        # int : string : list string : nat
            ISNAT;      # option nat : string : list string : nat
            IF_NONE
              {
                PUSH int 278; # int : string : list string : nat
                FAILWITH;   # FAILED
              }
              {}; # @some : string : list string : nat
            DIG 3;      # nat : @some : string : list string
            SLICE;      # option string : list string
            IF_NONE
              {
                PUSH int 278; # int : list string
                FAILWITH;   # FAILED
              }
              {}; # @some : list string
            CONS;       # list string
          }
          {
            SWAP;       # nat : list string : pair string string
            DROP;       # list string : pair string string
            SWAP;       # pair string string : list string
            DROP;       # list string
          }; # list string
        # sp.result(utils_19.value.rev()) # list string
        NIL string; # list string : list string
        SWAP;       # list string : list string
        ITER
          {
            CONS;       # list string
          }; # list string
      }; # lambda (pair string string) (list string) : pair @parameter @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # pair @parameter @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # Private variable: string_starts_with # pair @parameter @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LAMBDA
      (pair string string)
      bool
      {
        # sp.result(sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")(_x14.prefix, _x14.text)) # pair string string
        UNPAIR;     # string : string
        DUP;        # string : string : string
        SIZE;       # nat : string : string
        DIG 2;      # string : nat : string
        SWAP;       # nat : string : string
        PUSH nat 0; # nat : nat : string : string
        SLICE;      # option string : string
        IF_NONE
          {
            DROP;       # 
            PUSH bool False; # bool
          }
          {
            COMPARE;    # int
            EQ;         # bool
          }; # bool
      }; # lambda (pair string string) bool : pair @parameter @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # pair @parameter @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    UNPAIR;     # @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # == test ==
    # utils_21 = sp.local("utils_21", 1) # @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 1; # nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_22 = sp.local("utils_22", sp.list([])) # nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NIL string; # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if utils_21.value == 0: # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        # utils_22.value.push('0') # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "0"; # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONS;       # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {}; # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # while utils_21.value > 0 : ... # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # utils_22.value.push({0 : '0', 1 : '1', 2 : '2', 3 : '3', 4 : '4', 5 : '5', 6 : '6', 7 : '7', 8 : '8', 9 : '9'}[utils_21.value % 10]) # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH (map nat string) {Elt 0 "0"; Elt 1 "1"; Elt 2 "2"; Elt 3 "3"; Elt 4 "4"; Elt 5 "5"; Elt 6 "6"; Elt 7 "7"; Elt 8 "8"; Elt 9 "9"}; # map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 10; # nat : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EDIV;       # option (pair nat nat) : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 292; # int : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {
            CDR;        # nat : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # nat : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GET;        # option string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 292; # int : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONS;       # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_21.value //= 10 # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 10; # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 2;      # nat : nat : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EDIV;       # option (pair nat nat) : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 293; # int : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # nat : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # check for next loop: utils_21.value > 0 # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 0; # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GT;         # bool : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_23 = sp.local("utils_23", sp.concat(utils_22.value)) # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # list string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    CONCAT;     # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if True:
    # utils_23.value = '-' + utils_23.value # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-"; # string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    CONCAT;     # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(utils_23.value == '-1') # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-1"; # string : string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: utils_23.value == '-1'"; # string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_24 = sp.local("utils_24", 1) # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 1; # nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_25 = sp.local("utils_25", sp.list([])) # nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NIL string; # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if utils_24.value == 0: # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        # utils_25.value.push('0') # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "0"; # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONS;       # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {}; # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # while utils_24.value > 0 : ... # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # utils_25.value.push({0 : '0', 1 : '1', 2 : '2', 3 : '3', 4 : '4', 5 : '5', 6 : '6', 7 : '7', 8 : '8', 9 : '9'}[utils_24.value % 10]) # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH (map nat string) {Elt 0 "0"; Elt 1 "1"; Elt 2 "2"; Elt 3 "3"; Elt 4 "4"; Elt 5 "5"; Elt 6 "6"; Elt 7 "7"; Elt 8 "8"; Elt 9 "9"}; # map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 10; # nat : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EDIV;       # option (pair nat nat) : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 292; # int : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {
            CDR;        # nat : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # nat : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GET;        # option string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 292; # int : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONS;       # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_24.value //= 10 # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 10; # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 2;      # nat : nat : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EDIV;       # option (pair nat nat) : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 293; # int : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # nat : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # check for next loop: utils_24.value > 0 # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 0; # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GT;         # bool : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_26 = sp.local("utils_26", sp.concat(utils_25.value)) # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # list string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    CONCAT;     # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if False:
    # sp.verify(utils_26.value == '1') # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "1"; # string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: utils_26.value == '1'"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(self.string_of_int(2) == '2') # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "2"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 12;     # lambda int string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH int 2; # int : lambda int string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EXEC;       # string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: self.string_of_int(2) == '2'"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_27 = sp.local("utils_27", '1') # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "1"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', '1'): # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "1"; # string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-"; # string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : nat : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SLICE;      # option string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        DROP;       # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bool False; # bool : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {
        COMPARE;    # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EQ;         # bool : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bool : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        DROP;       # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_27.value = sp.slice('1', 1, sp.as_nat(sp.len('1') - 1)).open_some(message = '') # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "1"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "1"; # string : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SIZE;       # nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SUB;        # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ISNAT;      # option nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 326; # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : @some : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH string ""; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {}; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_28 = sp.local("utils_28", 0) # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH int 0; # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # string : int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_29 in sp.range(0, sp.len(utils_27.value)): ... (sp.TNat) # string : int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # utils_28.value = (10 * utils_28.value) + {'0' : 0, '1' : 1, '2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9}[sp.slice(utils_27.value, utils_29, 1).open_some()] # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH (map string int) {Elt "0" 0; Elt "1" 1; Elt "2" 2; Elt "3" 3; Elt "4" 4; Elt "5" 5; Elt "6" 6; Elt "7" 7; Elt "8" 8; Elt "9" 9}; # map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 5;      # string : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : string : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : string : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 330; # int : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GET;        # option int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 330; # int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 3;      # int : @some : nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH int 10; # int : int : @some : nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MUL;        # int : @some : nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # int : nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # loop step # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GT;         # bool : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP 2;     # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', '1'): # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "1"; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-"; # string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SLICE;      # option string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        DROP;       # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bool False; # bool : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {
        COMPARE;    # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EQ;         # bool : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bool : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        # utils_28.value *= -1 # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH int -1; # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MUL;        # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {}; # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(utils_28.value == 1) # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH int 1; # int : int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: utils_28.value == 1"; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_30 = sp.local("utils_30", '-1') # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-1"; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', '-1'): # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-1"; # string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-"; # string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : nat : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SLICE;      # option string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        DROP;       # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bool False; # bool : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {
        COMPARE;    # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EQ;         # bool : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bool : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        DROP;       # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_30.value = sp.slice('-1', 1, sp.as_nat(sp.len('-1') - 1)).open_some(message = '') # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "-1"; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "-1"; # string : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SIZE;       # nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SUB;        # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ISNAT;      # option nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 326; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : @some : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH string ""; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {}; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_31 = sp.local("utils_31", 0) # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH int 0; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # string : int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_32 in sp.range(0, sp.len(utils_30.value)): ... (sp.TNat) # string : int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # utils_31.value = (10 * utils_31.value) + {'0' : 0, '1' : 1, '2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9}[sp.slice(utils_30.value, utils_32, 1).open_some()] # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH (map string int) {Elt "0" 0; Elt "1" 1; Elt "2" 2; Elt "3" 3; Elt "4" 4; Elt "5" 5; Elt "6" 6; Elt "7" 7; Elt "8" 8; Elt "9" 9}; # map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 5;      # string : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : string : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : string : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 330; # int : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GET;        # option int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 330; # int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 3;      # int : @some : nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH int 10; # int : int : @some : nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MUL;        # int : @some : nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # int : nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # loop step # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GT;         # bool : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP 2;     # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', '-1'): # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-1"; # string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "-"; # string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : nat : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SLICE;      # option string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        DROP;       # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bool False; # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {
        COMPARE;    # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EQ;         # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        # utils_31.value *= -1 # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH int -1; # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MUL;        # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {}; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(utils_31.value == (-1)) # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH int -1; # int : int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: utils_31.value == (-1)"; # string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(self.int_of_string('2') == 2) # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH int 2; # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 20;     # lambda string int : int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "2"; # string : lambda string int : int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EXEC;       # int : int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: self.int_of_string('2') == 2"; # string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_33 = sp.local("utils_33", sp.len(sp.bytes('0x0100'))) # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x0100; # bytes : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_34 = sp.local("utils_34", 0) # nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_35 in sp.range(0, utils_33.value): ... (sp.TNat) # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # compute_utils_342 = sp.local("compute_utils_342", sp.slice(sp.bytes('0x0100'), utils_35, 1).open_some(message = sp.unit)) # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bytes 0x0100; # bytes : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : bytes : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : bytes : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option bytes : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            UNIT;       # unit : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # compute_utils_343 = sp.local("compute_utils_343", sp.as_nat(utils_33.value - (utils_35 + 1)) * 2) # @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 2; # nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 7;      # nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SUB;        # int : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ISNAT;      # option nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 343; # int : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MUL;        # nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_34.value += sp.as_nat(sp.to_int(sp.unpack((sp.bytes('0x050a00000020') + compute_utils_342.value) + sp.bytes('0x00000000000000000000000000000000000000000000000000000000000000'), sp.TBls12_381_fr).open_some(message = sp.unit))) * sp.michelson("\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            ")(compute_utils_343.value, 16, 1) # nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 16; # nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        LOOP
          {
            PUSH nat 0; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 2; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 3;      # nat : nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            EDIV;       # option (pair nat nat) : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                UNIT;       # unit : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {
                CDR;        # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF
              {
                SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 2;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DIG 3;      # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 2;      # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }
              {}; # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 1; # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LSR;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            MUL;        # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 0; # nat : nat : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            COMPARE;    # int : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            NEQ;        # bool : nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # nat : nat : nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DROP 2;     # nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # nat : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DROP;       # nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bytes 0x00000000000000000000000000000000000000000000000000000000000000; # bytes : nat : @some : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 2;      # @some : bytes : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bytes 0x050a00000020; # bytes : @some : bytes : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONCAT;     # bytes : bytes : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONCAT;     # bytes : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        UNPACK bls12_381_fr; # option bls12_381_fr : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            UNIT;       # unit : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        INT;        # int : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ISNAT;      # option nat : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 349; # int : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MUL;        # nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 3;      # nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # loop step # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GT;         # bool : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP 2;     # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(utils_34.value == 256) # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 256; # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: utils_34.value == 256"; # string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(self.int_of_bytes(sp.bytes('0x0100')) == 256) # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 256; # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 23;     # lambda bytes nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x0100; # bytes : lambda bytes nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EXEC;       # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: self.int_of_bytes(sp.bytes('0x0100')) == 256"; # string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_36 = sp.local("utils_36", 0) # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_37 = sp.local("utils_37", sp.list([])) # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NIL string; # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_38 in sp.range(0, sp.len('a b')): ... (sp.TNat) # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "a b"; # string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # if sp.slice('a b', utils_38, 1).open_some() == ' ': # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string " "; # string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "a b"; # string : string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : string : string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : string : string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 274; # int : string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EQ;         # bool : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF
          {
            # utils_37.value.push(sp.slice('a b', utils_36.value, sp.as_nat(utils_38 - utils_36.value)).open_some()) # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # list string : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH string "a b"; # string : list string : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 5;      # nat : string : list string : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 4;      # nat : nat : string : list string : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SUB;        # int : string : list string : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            ISNAT;      # option nat : string : list string : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                PUSH int 275; # int : string : list string : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : string : list string : nat : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 5;      # nat : @some : string : list string : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SLICE;      # option string : list string : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                PUSH int 275; # int : list string : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : list string : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            CONS;       # list string : nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUG 2;      # nat : nat : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_36.value = utils_38 + 1 # nat : nat : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # nat : nat : nat : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 1; # nat : nat : nat : nat : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            ADD;        # nat : nat : nat : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUG 3;      # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {}; # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # loop step # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GT;         # bool : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP 2;     # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if sp.len('a b') > 0: # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "a b"; # string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        # utils_37.value.push(sp.slice('a b', utils_36.value, sp.as_nat(sp.len('a b') - utils_36.value)).open_some()) # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "a b"; # string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "a b"; # string : nat : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SIZE;       # nat : nat : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SUB;        # int : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ISNAT;      # option nat : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 278; # int : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : @some : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 278; # int : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONS;       # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {}; # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.pack(sp.set_type_expr(utils_37.value.rev(), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['a', 'b']), sp.TList(sp.TString)))) # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (list string) {"a"; "b"}; # list string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PACK;       # bytes : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # list string : bytes : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # list string : list string : bytes : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # list string : bytes : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NIL string; # list string : list string : bytes : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # list string : list string : bytes : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ITER
      {
        CONS;       # list string : bytes : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # list string : bytes : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PACK;       # bytes : bytes : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.pack(sp.set_type_expr(utils_37.value.rev(), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['a', 'b']), sp.TList(sp.TString)))"; # string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_39 = sp.local("utils_39", 0) # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_40 = sp.local("utils_40", sp.list([])) # nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NIL string; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_41 in sp.range(0, sp.len('b,a')): ... (sp.TNat) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "b,a"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # nat : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # if sp.slice('b,a', utils_41, 1).open_some() == ',': # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string ","; # string : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "b,a"; # string : string : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : string : string : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : string : string : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : string : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 274; # int : string : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : string : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EQ;         # bool : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF
          {
            # utils_40.value.push(sp.slice('b,a', utils_39.value, sp.as_nat(utils_41 - utils_39.value)).open_some()) # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # list string : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH string "b,a"; # string : list string : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 5;      # nat : string : list string : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 4;      # nat : nat : string : list string : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SUB;        # int : string : list string : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            ISNAT;      # option nat : string : list string : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                PUSH int 275; # int : string : list string : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : string : list string : nat : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 5;      # nat : @some : string : list string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SLICE;      # option string : list string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                PUSH int 275; # int : list string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : list string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            CONS;       # list string : nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUG 2;      # nat : nat : list string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_39.value = utils_41 + 1 # nat : nat : list string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # nat : nat : nat : list string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 1; # nat : nat : nat : nat : list string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            ADD;        # nat : nat : nat : list string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUG 3;      # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {}; # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # loop step # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ADD;        # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : nat : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        GT;         # bool : nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP 2;     # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # if sp.len('b,a') > 0: # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "b,a"; # string : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GT;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        # utils_40.value.push(sp.slice('b,a', utils_39.value, sp.as_nat(sp.len('b,a') - utils_39.value)).open_some()) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "b,a"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # nat : string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH string "b,a"; # string : nat : string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SIZE;       # nat : nat : string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SUB;        # int : string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ISNAT;      # option nat : string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 278; # int : string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : @some : string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 278; # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONS;       # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {}; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.pack(sp.set_type_expr(utils_40.value.rev(), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['b', 'a']), sp.TList(sp.TString)))) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (list string) {"b"; "a"}; # list string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PACK;       # bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # list string : bytes : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # list string : list string : bytes : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # list string : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NIL string; # list string : list string : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # list string : list string : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ITER
      {
        CONS;       # list string : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # list string : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PACK;       # bytes : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.pack(sp.set_type_expr(utils_40.value.rev(), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['b', 'a']), sp.TList(sp.TString)))"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.pack(sp.set_type_expr(self.string_split(sp.record(separator = ',,', text = 'a,b')), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['a,b']), sp.TList(sp.TString)))) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (list string) {"a,b"}; # list string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PACK;       # bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 21;     # lambda (pair string string) (list string) : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (pair string string) (Pair ",," "a,b"); # pair string string : lambda (pair string string) (list string) : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EXEC;       # list string : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PACK;       # bytes : bytes : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.pack(sp.set_type_expr(self.string_split(sp.record(separator = ',,', text = 'a,b')), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['a,b']), sp.TList(sp.TString)))"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('a', 'abc') == True) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bool True; # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "abc"; # string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "a"; # string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : nat : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SLICE;      # option string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        DROP;       # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bool False; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {
        COMPARE;    # int : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EQ;         # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.michelson(\"\\n            DUP;\\n            SIZE;\\n            DIG 2;\\n            SWAP;\\n            PUSH nat 0;\\n            SLICE;\\n            IF_NONE\\n                {\\n                    DROP;\\n                    PUSH bool False;\\n                }\\n                {\\n                    COMPARE;\\n                    EQ;\\n                };\\n            \")('a', 'abc') == True"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('b', 'abc') == False) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bool False; # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "abc"; # string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "b"; # string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : nat : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SLICE;      # option string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        DROP;       # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bool False; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {
        COMPARE;    # int : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EQ;         # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.michelson(\"\\n            DUP;\\n            SIZE;\\n            DIG 2;\\n            SWAP;\\n            PUSH nat 0;\\n            SLICE;\\n            IF_NONE\\n                {\\n                    DROP;\\n                    PUSH bool False;\\n                }\\n                {\\n                    COMPARE;\\n                    EQ;\\n                };\\n            \")('b', 'abc') == False"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(self.string_starts_with(sp.record(prefix = 'a', text = 'abc')) == True) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bool True; # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 20;     # lambda (pair string string) bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (pair string string) (Pair "a" "abc"); # pair string string : lambda (pair string string) bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EXEC;       # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: self.string_starts_with(sp.record(prefix = 'a', text = 'abc')) == True"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.michelson("\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            ")('abc', 'c') == True) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bool True; # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "c"; # string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "abc"; # string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # string : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PAIR;       # pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # pair nat nat : pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    UNPAIR;     # nat : nat : pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GE;         # bool : pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        UNPAIR;     # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 2;      # nat : nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # nat : nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SUB;        # int : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ABS;        # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            DROP;       # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH bool False; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {
            COMPARE;    # int : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            EQ;         # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {
        DROP 3;     # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bool False; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.michelson(\"\\n            DUP;\\n            SIZE;\\n            DUP 3;\\n            SIZE;\\n            SWAP;\\n            PAIR;\\n            DUP;\\n            UNPAIR;\\n            COMPARE;\\n            GE;\\n            IF\\n            {\\n                UNPAIR;\\n                DUP 2;\\n                SWAP;\\n                SUB;\\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\\n                SLICE;\\n                IF_NONE\\n                {\\n                    DROP;\\n                    PUSH bool False;\\n                }\\n                {\\n                    COMPARE;\\n                    EQ;\\n                };\\n            }\\n            {\\n                DROP 3;\\n                PUSH bool False;\\n            };\\n            \")('abc', 'c') == True"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.michelson("\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            ")('abc', 'b') == False) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bool False; # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "b"; # string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "abc"; # string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # string : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # string : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PAIR;       # pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # pair nat nat : pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    UNPAIR;     # nat : nat : pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    GE;         # bool : pair nat nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {
        UNPAIR;     # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 2;      # nat : nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # nat : nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SUB;        # int : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ABS;        # nat : nat : string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option string : string : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            DROP;       # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH bool False; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {
            COMPARE;    # int : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            EQ;         # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }
      {
        DROP 3;     # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bool False; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.michelson(\"\\n            DUP;\\n            SIZE;\\n            DUP 3;\\n            SIZE;\\n            SWAP;\\n            PAIR;\\n            DUP;\\n            UNPAIR;\\n            COMPARE;\\n            GE;\\n            IF\\n            {\\n                UNPAIR;\\n                DUP 2;\\n                SWAP;\\n                SUB;\\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\\n                SLICE;\\n                IF_NONE\\n                {\\n                    DROP;\\n                    PUSH bool False;\\n                }\\n                {\\n                    COMPARE;\\n                    EQ;\\n                };\\n            }\\n            {\\n                DROP 3;\\n                PUSH bool False;\\n            };\\n            \")('abc', 'b') == False"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(self.string_ends_with(sp.record(postfix = 'c', text = 'abc')) == True) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bool True; # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 23;     # lambda (pair string string) bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (pair string string) (Pair "c" "abc"); # pair string string : lambda (pair string string) bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EXEC;       # bool : bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: self.string_ends_with(sp.record(postfix = 'c', text = 'abc')) == True"; # string : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_42_hist = sp.local("utils_42_hist", {}) # list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EMPTY_MAP nat nat; # map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_43_x in sp.list([1, 2, 3, 4, 5]): ... # map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (list nat) {1; 2; 3; 4; 5}; # list nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ITER
      {
        SWAP;       # map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # if utils_42_hist.value.contains(utils_43_x): # map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # map nat nat : map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # map nat nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # nat : map nat nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : map nat nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # nat : map nat nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MEM;        # bool : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF
          {
            SWAP;       # map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_42_hist.value[utils_43_x] += 1 # map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # map nat nat : map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # nat : map nat nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # nat : nat : map nat nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUG 2;      # nat : map nat nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            GET;        # option nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                PUSH int 86; # int : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 1; # nat : @some : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            ADD;        # nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SOME;       # option nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # nat : option nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            UPDATE;     # map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {
            SWAP;       # map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_42_hist.value[utils_43_x] = 1 # map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH (option nat) (Some 1); # option nat : map nat nat : nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # nat : option nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            UPDATE;     # map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # compute_utils_90 = sp.local("compute_utils_90", sp.len(sp.list([1, 2, 3, 4, 5]))) # map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (list int) {1; 2; 3; 4; 5}; # list int : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_44_result = sp.local("utils_44_result", 0) # nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_45_half = sp.local("utils_45_half", compute_utils_90.value // 2) # nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 2; # nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EDIV;       # option (pair nat nat) : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        PUSH int 92; # int : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }
      {
        CAR;        # nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_46_use_average = sp.local("utils_46_use_average", (utils_45_half.value * 2) == compute_utils_90.value) # nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 2; # nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    MUL;        # nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_47_i = sp.local("utils_47_i", 0) # bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_48_x in utils_42_hist.value.items(): ... # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 6;      # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ITER
      {
        # if utils_46_use_average.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF
          {
            # if utils_47_i.value < utils_45_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF
              {
                DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_44_result.value = utils_48_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_47_i.value += utils_48_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CDR;        # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DIG 2;      # nat : nat : pair nat nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                ADD;        # nat : pair nat nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                SWAP;       # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # if utils_47_i.value > utils_45_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                GT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                IF
                  {
                    DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    DROP 2;     # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    # utils_46_use_average.value = False # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    PUSH bool False; # bool : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    SWAP;       # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                  }
                  {
                    DROP;       # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                  }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }
              {
                DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DROP;       # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_44_result.value += utils_48_x.key # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # pair nat nat : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CAR;        # nat : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                ADD;        # nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_44_result.value //= 2 # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                PUSH nat 2; # nat : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                EDIV;       # option (pair nat nat) : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                IF_NONE
                  {
                    PUSH int 104; # int : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                  }; # nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_46_use_average.value = False # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                PUSH bool False; # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 2;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_47_i.value += utils_48_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                ADD;        # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {
            # if utils_47_i.value <= utils_45_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LE;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF
              {
                DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_44_result.value = utils_48_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_47_i.value += utils_48_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                ADD;        # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }
              {
                DROP;       # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(utils_44_result.value == 3) # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 3; # nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 5;      # nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: utils_44_result.value == 3"; # string : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_49_hist = sp.local("utils_49_hist", {}) # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EMPTY_MAP nat nat; # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_50_x in sp.list([1, 2, 2, 3]): ... # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (list nat) {1; 2; 2; 3}; # list nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ITER
      {
        SWAP;       # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # if utils_49_hist.value.contains(utils_50_x): # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # map nat nat : map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # map nat nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # nat : map nat nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : map nat nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # nat : map nat nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MEM;        # bool : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF
          {
            SWAP;       # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_49_hist.value[utils_50_x] += 1 # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # map nat nat : map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # nat : map nat nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # nat : nat : map nat nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUG 2;      # nat : map nat nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            GET;        # option nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                PUSH int 86; # int : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 1; # nat : @some : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            ADD;        # nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SOME;       # option nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # nat : option nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            UPDATE;     # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {
            SWAP;       # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_49_hist.value[utils_50_x] = 1 # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH (option nat) (Some 1); # option nat : map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # nat : option nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            UPDATE;     # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # compute_utils_90i = sp.local("compute_utils_90i", sp.len(sp.list([1, 2, 2, 3]))) # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (list int) {1; 2; 2; 3}; # list int : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_51_result = sp.local("utils_51_result", 0) # nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_52_half = sp.local("utils_52_half", compute_utils_90i.value // 2) # nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 2; # nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EDIV;       # option (pair nat nat) : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        PUSH int 92; # int : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }
      {
        CAR;        # nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_53_use_average = sp.local("utils_53_use_average", (utils_52_half.value * 2) == compute_utils_90i.value) # nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 2; # nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # nat : nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    MUL;        # nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_54_i = sp.local("utils_54_i", 0) # bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # for utils_55_x in utils_49_hist.value.items(): ... # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 6;      # map nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ITER
      {
        # if utils_53_use_average.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 3;      # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF
          {
            # if utils_54_i.value < utils_52_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF
              {
                DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_51_result.value = utils_55_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_54_i.value += utils_55_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CDR;        # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DIG 2;      # nat : nat : pair nat nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                ADD;        # nat : pair nat nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                SWAP;       # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # if utils_54_i.value > utils_52_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                GT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                IF
                  {
                    DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    DROP 2;     # nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    # utils_53_use_average.value = False # nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    PUSH bool False; # bool : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    SWAP;       # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                  }
                  {
                    DROP;       # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                  }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }
              {
                DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DROP;       # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_51_result.value += utils_55_x.key # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # pair nat nat : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CAR;        # nat : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                ADD;        # nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_51_result.value //= 2 # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                PUSH nat 2; # nat : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                EDIV;       # option (pair nat nat) : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                IF_NONE
                  {
                    PUSH int 104; # int : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                  }; # nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_53_use_average.value = False # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                PUSH bool False; # bool : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 2;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_54_i.value += utils_55_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                ADD;        # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {
            # if utils_54_i.value <= utils_52_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LE;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF
              {
                DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_51_result.value = utils_55_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                # utils_54_i.value += utils_55_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                ADD;        # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }
              {
                DROP;       # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
              }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(utils_51_result.value == 2) # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 2; # nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 5;      # nat : nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: utils_51_result.value == 2"; # string : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(self.math_median(sp.list([1, 2, 2, 5])) == 2) # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 2; # nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 37;     # lambda (list nat) nat : nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH (list nat) {1; 2; 2; 5}; # list nat : lambda (list nat) nat : nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EXEC;       # nat : nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: self.math_median(sp.list([1, 2, 2, 5])) == 2"; # string : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # compute_utils_118 = sp.local("compute_utils_118", 3 - sp.len(sp.bytes('0x11'))) # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x11; # bytes : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 3; # nat : nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SUB;        # int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_56_bytes = sp.local("utils_56_bytes", sp.bytes('0x')) # int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x; # bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # int : bytes : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # while sp.len(utils_56_bytes.value) < sp.as_nat(compute_utils_118.value) : ... # int : bytes : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # int : int : bytes : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ISNAT;      # option nat : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        PUSH int 118; # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # bytes : @some : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # bytes : bytes : @some : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # bytes : @some : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : @some : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LT;         # bool : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # utils_56_bytes.value = sp.bytes('0x00') + utils_56_bytes.value # bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bytes 0x00; # bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONCAT;     # bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # int : bytes : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # check for next loop: sp.len(utils_56_bytes.value) < sp.as_nat(compute_utils_118.value) # int : bytes : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # int : int : bytes : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ISNAT;      # option nat : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 118; # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # bytes : @some : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # bytes : bytes : @some : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # bytes : @some : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SIZE;       # nat : @some : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        LT;         # bool : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify((utils_56_bytes.value + sp.bytes('0x11')) == sp.bytes('0x000011')) # bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x000011; # bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x11; # bytes : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 3;      # bytes : bytes : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    CONCAT;     # bytes : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: (utils_56_bytes.value + sp.bytes('0x11')) == sp.bytes('0x000011')"; # string : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # compute_utils_126 = sp.local("compute_utils_126", 3 - sp.len(sp.bytes('0x11'))) # bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x11; # bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 3; # nat : nat : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SUB;        # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_57_bytes = sp.local("utils_57_bytes", sp.bytes('0x')) # int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x; # bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # int : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # while sp.len(utils_57_bytes.value) < sp.as_nat(compute_utils_126.value) : ... # int : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # int : int : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # int : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ISNAT;      # option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        PUSH int 126; # int : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # bytes : @some : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # bytes : bytes : @some : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # bytes : @some : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : @some : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LT;         # bool : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # utils_57_bytes.value = sp.bytes('0x00') + utils_57_bytes.value # bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bytes 0x00; # bytes : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONCAT;     # bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # int : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # check for next loop: sp.len(utils_57_bytes.value) < sp.as_nat(compute_utils_126.value) # int : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # int : int : bytes : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # int : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        ISNAT;      # option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 126; # int : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # bytes : @some : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # bytes : bytes : @some : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # bytes : @some : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SIZE;       # nat : @some : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        LT;         # bool : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify((sp.bytes('0x11') + utils_57_bytes.value) == sp.bytes('0x110000')) # bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # bytes : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x110000; # bytes : bytes : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # bytes : bytes : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x11; # bytes : bytes : bytes : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    CONCAT;     # bytes : bytes : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: (sp.bytes('0x11') + utils_57_bytes.value) == sp.bytes('0x110000')"; # string : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_58_value = sp.local("utils_58_value", 54, sp.TNat) # bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 54; # nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_59_left_nibble = sp.local("utils_59_left_nibble", sp.none) # nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NONE nat;   # option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_60_bytes = sp.local("utils_60_bytes", sp.list([])) # option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NIL bytes;  # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # while utils_58_value.value != 0 : ... # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 4;      # nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NEQ;        # bool : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # match_pair_utils_155_fst, match_pair_utils_155_snd = sp.match_tuple(sp.ediv(utils_58_value.value, 16).open_some(), "match_pair_utils_155_fst", "match_pair_utils_155_snd") # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 16; # nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 3;      # nat : nat : list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EDIV;       # option (pair nat nat) : list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 155; # int : list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        UNPAIR;     # nat : nat : list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_58_value.value = match_pair_utils_155_fst # nat : nat : list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : nat : list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 4;      # nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # with utils_59_left_nibble.value.match_cases(...): # nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # option nat : nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            DIG 3;      # option nat : nat : nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DROP 2;     # nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_59_left_nibble.value = sp.some(match_pair_utils_155_snd) # nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SOME;       # option nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {
            SWAP;       # nat : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DROP;       # @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 3;      # option nat : @some : nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DROP;       # @some : nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_59_left_nibble.value = sp.none # @some : nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            NONE nat;   # option nat : @some : nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUG 3;      # @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # sp.verify(((match_pair_utils_155_snd << 4) | Some) < 256, 'NUMBER_TOO_BIG') # @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # @some : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 256; # nat : @some : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # @some : nat : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 4; # nat : @some : nat : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 5;      # nat : nat : @some : nat : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LSL;        # nat : @some : nat : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            OR;         # nat : nat : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            COMPARE;    # int : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LT;         # bool : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF
              {}
              {
                PUSH string "NUMBER_TOO_BIG"; # string : @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }; # @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_60_bytes.value.push(sp.slice(sp.pack(sp.mul(sp.to_int((match_pair_utils_155_snd << 4) | Some), sp.bls12_381_fr('0x01'))), 6, 1).open_some()) # @some : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # list bytes : @some : nat : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH bls12_381_fr 0x01; # bls12_381_fr : list bytes : @some : nat : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # @some : bls12_381_fr : list bytes : nat : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 4; # nat : @some : bls12_381_fr : list bytes : nat : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 4;      # nat : nat : @some : bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LSL;        # nat : @some : bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            OR;         # nat : bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            INT;        # int : bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            MUL;        # bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PACK;       # bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 1; # nat : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 6; # nat : nat : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SLICE;      # option bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                PUSH int 147; # int : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            CONS;       # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # check for next loop: utils_58_value.value != 0 # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 0; # nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        NEQ;        # bool : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SWAP;       # option nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # with utils_59_left_nibble.value.match_cases(...): # option nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # option nat : option nat : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUG 2;      # option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {}
      {
        DIG 2;      # option nat : @some : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DROP;       # @some : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_59_left_nibble.value = sp.none # @some : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        NONE nat;   # option nat : @some : list bytes : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 2;      # @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # sp.verify((0 | Some) < 256, 'NUMBER_TOO_BIG') # @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # @some : @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 256; # nat : @some : @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # @some : nat : @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 0; # nat : @some : nat : @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        OR;         # nat : nat : @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        LT;         # bool : @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF
          {}
          {
            PUSH string "NUMBER_TOO_BIG"; # string : @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }; # @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SWAP;       # list bytes : @some : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_60_bytes.value.push(sp.slice(sp.pack(sp.mul(sp.to_int(0 | Some), sp.bls12_381_fr('0x01'))), 6, 1).open_some()) # list bytes : @some : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH bls12_381_fr 0x01; # bls12_381_fr : list bytes : @some : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 2;      # @some : bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 0; # nat : @some : bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        OR;         # nat : bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        INT;        # int : bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        MUL;        # bls12_381_fr : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PACK;       # bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 1; # nat : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 6; # nat : nat : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        SLICE;      # option bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 147; # int : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        CONS;       # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.concat(utils_60_bytes.value) == sp.bytes('0x36')) # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP;        # list bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    CONCAT;     # bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x36; # bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.concat(utils_60_bytes.value) == sp.bytes('0x36')"; # string : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # sp.verify(sp.slice(sp.pack('TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'), 6, sp.as_nat(sp.len(sp.pack('TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')) - 6)).open_some(message = 'Could not encode string to bytes.') == sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')) # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858; # bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; # string : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PACK;       # bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 6; # nat : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH string "TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; # string : nat : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PACK;       # bytes : nat : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : nat : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SUB;        # int : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    ISNAT;      # option nat : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        PUSH int 139; # int : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 6; # nat : @some : bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SLICE;      # option bytes : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF_NONE
      {
        PUSH string "Could not encode string to bytes."; # string : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    EQ;         # bool : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    IF
      {}
      {
        PUSH string "WrongCondition: sp.slice(sp.pack('TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'), 6, sp.as_nat(sp.len(sp.pack('TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')) - 6)).open_some(message = 'Could not encode string to bytes.') == sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')"; # string : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        FAILWITH;   # FAILED
      }; # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_61_value = sp.local("utils_61_value", sp.len(sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')), sp.TNat) # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH bytes 0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858; # bytes : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    SIZE;       # nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_62_left_nibble = sp.local("utils_62_left_nibble", sp.none) # nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NONE nat;   # option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # utils_63_bytes = sp.local("utils_63_bytes", sp.list([])) # option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NIL bytes;  # list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    # while utils_61_value.value != 0 : ... # list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    PUSH nat 0; # nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DUP 4;      # nat : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    COMPARE;    # int : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    NEQ;        # bool : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    LOOP
      {
        # match_pair_utils_155_fst, match_pair_utils_155_snd = sp.match_tuple(sp.ediv(utils_61_value.value, 16).open_some(), "match_pair_utils_155_fst", "match_pair_utils_155_snd") # list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 16; # nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DIG 3;      # nat : nat : list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        EDIV;       # option (pair nat nat) : list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            PUSH int 155; # int : list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            FAILWITH;   # FAILED
          }
          {}; # @some : list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        UNPAIR;     # nat : nat : list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # utils_61_value.value = match_pair_utils_155_fst # nat : nat : list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP;        # nat : nat : nat : list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUG 4;      # nat : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # with utils_62_left_nibble.value.match_cases(...): # nat : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # option nat : nat : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        IF_NONE
          {
            DIG 3;      # option nat : nat : nat : list bytes : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DROP 2;     # nat : list bytes : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_62_left_nibble.value = sp.some(match_pair_utils_155_snd) # nat : list bytes : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SOME;       # option nat : list bytes : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }
          {
            SWAP;       # nat : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DROP;       # @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 3;      # option nat : @some : nat : list bytes : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DROP;       # @some : nat : list bytes : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_62_left_nibble.value = sp.none # @some : nat : list bytes : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            NONE nat;   # option nat : @some : nat : list bytes : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUG 3;      # @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # sp.verify(((match_pair_utils_155_snd << 4) | Some) < 256, 'NUMBER_TOO_BIG') # @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP;        # @some : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 256; # nat : @some : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SWAP;       # @some : nat : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 4; # nat : @some : nat : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DUP 5;      # nat : nat : @some : nat : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LSL;        # nat : @some : nat : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            OR;         # nat : nat : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            COMPARE;    # int : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LT;         # bool : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF
              {}
              {
                PUSH string "NUMBER_TOO_BIG"; # string : @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }; # @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            # utils_63_bytes.value.push(sp.slice(sp.pack(sp.mul(sp.to_int((match_pair_utils_155_snd << 4) | Some), sp.bls12_381_fr('0x01'))), 6, 1).open_some()) # @some : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # list bytes : @some : nat : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH bls12_381_fr 0x01; # bls12_381_fr : list bytes : @some : nat : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 2;      # @some : bls12_381_fr : list bytes : nat : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 4; # nat : @some : bls12_381_fr : list bytes : nat : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            DIG 4;      # nat : nat : @some : bls12_381_fr : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            LSL;        # nat : @some : bls12_381_fr : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            OR;         # nat : bls12_381_fr : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            INT;        # int : bls12_381_fr : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            MUL;        # bls12_381_fr : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PACK;       # bytes : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 1; # nat : bytes : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            PUSH nat 6; # nat : nat : bytes : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            SLICE;      # option bytes : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            IF_NONE
              {
                PUSH int 147; # int : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
                FAILWITH;   # FAILED
              }
              {}; # @some : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
            CONS;       # list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
          }; # list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        # check for next loop: utils_61_value.value != 0 # list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        PUSH nat 0; # nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        DUP 4;      # nat : nat : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        COMPARE;    # int : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
        NEQ;        # bool : list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
      }; # list bytes : option nat : nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # list bytes : list bytes : option nat : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # option nat : list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : bytes : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # bytes : list bytes : option nat : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : int : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # int : list bytes : option nat : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : bytes : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # bytes : list bytes : option nat : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : int : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # int : list bytes : option nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # bool : list bytes : option nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # map nat nat : list bytes : option nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # bool : list bytes : option nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : map nat nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # map nat nat : list bytes : option nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : list string : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # list string : list bytes : option nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # list string : list bytes : option nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # int : list bytes : option nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : list bytes : option nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # int : list bytes : option nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : list bytes : option nat : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : list bytes : option nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # list string : list bytes : option nat : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # string : list bytes : option nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # list string : list bytes : option nat : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # nat : list bytes : option nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 2;      # @parameter : list bytes : option nat : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 3;      # lambda (pair string string) bool : list bytes : option nat : @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 3;      # lambda (pair string string) (list string) : list bytes : option nat : @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 3;      # lambda int string : list bytes : option nat : @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 3;      # lambda (pair string string) bool : list bytes : option nat : @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 3;      # lambda (pair nat nat) nat : list bytes : option nat : @storage : lambda (list nat) nat : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : @storage : lambda (list nat) nat : lambda string int : lambda bytes nat
    DIG 3;      # lambda (list nat) nat : list bytes : option nat : @storage : lambda string int : lambda bytes nat
    DROP;       # list bytes : option nat : @storage : lambda string int : lambda bytes nat
    DIG 3;      # lambda string int : list bytes : option nat : @storage : lambda bytes nat
    DROP;       # list bytes : option nat : @storage : lambda bytes nat
    DIG 3;      # lambda bytes nat : list bytes : option nat : @storage
    DROP;       # list bytes : option nat : @storage
    SWAP;       # option nat : list bytes : @storage
    # with utils_62_left_nibble.value.match_cases(...): # option nat : list bytes : @storage
    DUP;        # option nat : option nat : list bytes : @storage
    DUG 2;      # option nat : list bytes : option nat : @storage
    IF_NONE
      {
        SWAP;       # option nat : list bytes : @storage
        DROP;       # list bytes : @storage
      }
      {
        DIG 2;      # option nat : @some : list bytes : @storage
        DROP;       # @some : list bytes : @storage
        # utils_62_left_nibble.value = sp.none
        # sp.verify((0 | Some) < 256, 'NUMBER_TOO_BIG') # @some : list bytes : @storage
        DUP;        # @some : @some : list bytes : @storage
        PUSH nat 256; # nat : @some : @some : list bytes : @storage
        SWAP;       # @some : nat : @some : list bytes : @storage
        PUSH nat 0; # nat : @some : nat : @some : list bytes : @storage
        OR;         # nat : nat : @some : list bytes : @storage
        COMPARE;    # int : @some : list bytes : @storage
        LT;         # bool : @some : list bytes : @storage
        IF
          {}
          {
            PUSH string "NUMBER_TOO_BIG"; # string : @some : list bytes : @storage
            FAILWITH;   # FAILED
          }; # @some : list bytes : @storage
        SWAP;       # list bytes : @some : @storage
        # utils_63_bytes.value.push(sp.slice(sp.pack(sp.mul(sp.to_int(0 | Some), sp.bls12_381_fr('0x01'))), 6, 1).open_some()) # list bytes : @some : @storage
        PUSH bls12_381_fr 0x01; # bls12_381_fr : list bytes : @some : @storage
        DIG 2;      # @some : bls12_381_fr : list bytes : @storage
        PUSH nat 0; # nat : @some : bls12_381_fr : list bytes : @storage
        OR;         # nat : bls12_381_fr : list bytes : @storage
        INT;        # int : bls12_381_fr : list bytes : @storage
        MUL;        # bls12_381_fr : list bytes : @storage
        PACK;       # bytes : list bytes : @storage
        PUSH nat 1; # nat : bytes : list bytes : @storage
        PUSH nat 6; # nat : nat : bytes : list bytes : @storage
        SLICE;      # option bytes : list bytes : @storage
        IF_NONE
          {
            PUSH int 147; # int : list bytes : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : list bytes : @storage
        CONS;       # list bytes : @storage
      }; # list bytes : @storage
    # lengthBytes = sp.local("lengthBytes", sp.concat(utils_63_bytes.value)) # list bytes : @storage
    CONCAT;     # bytes : @storage
    # while sp.len(lengthBytes.value) < 4 : ... # bytes : @storage
    DUP;        # bytes : bytes : @storage
    SIZE;       # nat : bytes : @storage
    PUSH nat 4; # nat : nat : bytes : @storage
    COMPARE;    # int : bytes : @storage
    GT;         # bool : bytes : @storage
    LOOP
      {
        # lengthBytes.value = sp.bytes('0x00') + lengthBytes.value # bytes : @storage
        PUSH bytes 0x00; # bytes : bytes : @storage
        CONCAT;     # bytes : @storage
        # check for next loop: sp.len(lengthBytes.value) < 4 # bytes : @storage
        DUP;        # bytes : bytes : @storage
        SIZE;       # nat : bytes : @storage
        PUSH nat 4; # nat : nat : bytes : @storage
        COMPARE;    # int : bytes : @storage
        GT;         # bool : bytes : @storage
      }; # bytes : @storage
    # sp.verify(sp.unpack(sp.concat(sp.list([sp.bytes('0x05'), sp.bytes('0x01'), lengthBytes.value, sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')])), sp.TString).open_some(message = 'Could not decode bytes to string') == 'TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') # bytes : @storage
    PUSH string "TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; # string : bytes : @storage
    PUSH (list bytes) {0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858}; # list bytes : string : bytes : @storage
    DIG 2;      # bytes : list bytes : string : @storage
    CONS;       # list bytes : string : @storage
    PUSH bytes 0x01; # bytes : list bytes : string : @storage
    CONS;       # list bytes : string : @storage
    PUSH bytes 0x05; # bytes : list bytes : string : @storage
    CONS;       # list bytes : string : @storage
    CONCAT;     # bytes : string : @storage
    UNPACK string; # option string : string : @storage
    IF_NONE
      {
        PUSH string "Could not decode bytes to string"; # string : string : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : string : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: sp.unpack(sp.concat(sp.list([sp.bytes('0x05'), sp.bytes('0x01'), lengthBytes.value, sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')])), sp.TString).open_some(message = 'Could not decode bytes to string') == 'TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # sp.verify(((sp.address('KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG') >= sp.address('tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC')) & (sp.address('KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT') <= sp.address('tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC'))) == False) # @storage
    PUSH bool False; # bool : @storage
    PUSH address "tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC"; # address : bool : @storage
    PUSH address "KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG"; # address : address : bool : @storage
    COMPARE;    # int : bool : @storage
    GE;         # bool : bool : @storage
    IF
      {
        PUSH address "tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC"; # address : bool : @storage
        PUSH address "KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT"; # address : address : bool : @storage
        COMPARE;    # int : bool : @storage
        LE;         # bool : bool : @storage
      }
      {
        PUSH bool False; # bool : bool : @storage
      }; # bool : bool : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: ((sp.address('KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG') >= sp.address('tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC')) & (sp.address('KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT') <= sp.address('tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC'))) == False"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # sp.verify((sp.address('KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG') >= sp.address('KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ')) & (sp.address('KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT') <= sp.address('KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ'))) # @storage
    PUSH address "KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ"; # address : @storage
    PUSH address "KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG"; # address : address : @storage
    COMPARE;    # int : @storage
    GE;         # bool : @storage
    IF
      {
        PUSH address "KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ"; # address : @storage
        PUSH address "KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT"; # address : address : @storage
        COMPARE;    # int : @storage
        LE;         # bool : @storage
      }
      {
        PUSH bool False; # bool : @storage
      }; # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: (sp.address('KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG') >= sp.address('KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ')) & (sp.address('KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT') <= sp.address('KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ'))"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };