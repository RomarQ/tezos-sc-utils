parameter (unit %test);
storage   unit;
code
  {
    # Private variable: int_of_string # pair @parameter @storage
    LAMBDA
      string
      int
      {
        # utils_0 = sp.local("utils_0", _x0) # string
        DUP;        # string : string
        # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', _x0): # string : string
        DUP;        # string : string : string
        DUG 2;      # string : string : string
        PUSH string "-"; # string : string : string : string
        DUP;        # string : string : string : string : string
        SIZE;       # nat : string : string : string : string
        DIG 2;      # string : nat : string : string : string
        SWAP;       # nat : string : string : string : string
        PUSH nat 0; # nat : nat : string : string : string : string
        SLICE;      # option string : string : string : string
        IF_NONE
          {
            DROP;       # string : string
            PUSH bool False; # bool : string : string
          }
          {
            COMPARE;    # int : string : string
            EQ;         # bool : string : string
          }; # bool : string : string
        IF
          {
            DROP;       # string
            # utils_0.value = sp.slice(_x0, 1, sp.as_nat(sp.len(_x0) - 1)).open_some(message = '') # string
            DUP;        # string : string
            PUSH nat 1; # nat : string : string
            DUP 3;      # string : nat : string : string
            SIZE;       # nat : nat : string : string
            SUB;        # int : string : string
            ISNAT;      # option nat : string : string
            IF_NONE
              {
                PUSH int 288; # int : string : string
                FAILWITH;   # FAILED
              }
              {}; # @some : string : string
            PUSH nat 1; # nat : @some : string : string
            SLICE;      # option string : string
            IF_NONE
              {
                PUSH string ""; # string : string
                FAILWITH;   # FAILED
              }
              {}; # @some : string
          }
          {}; # string : string
        # utils_1 = sp.local("utils_1", 0) # string : string
        PUSH int 0; # int : string : string
        SWAP;       # string : int : string
        # for utils_2 in sp.range(0, sp.len(utils_0.value)): ... (sp.TNat) # string : int : string
        DUP;        # string : string : int : string
        DUG 2;      # string : int : string : string
        SIZE;       # nat : int : string : string
        PUSH nat 0; # nat : nat : int : string : string
        DUP;        # nat : nat : nat : int : string : string
        DUP 3;      # nat : nat : nat : nat : int : string : string
        COMPARE;    # int : nat : nat : int : string : string
        GT;         # bool : nat : nat : int : string : string
        LOOP
          {
            # utils_1.value = (10 * utils_1.value) + {'0' : 0, '1' : 1, '2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9}[sp.slice(utils_0.value, utils_2, 1).open_some()] # nat : nat : int : string : string
            PUSH (map string int) {Elt "0" 0; Elt "1" 1; Elt "2" 2; Elt "3" 3; Elt "4" 4; Elt "5" 5; Elt "6" 6; Elt "7" 7; Elt "8" 8; Elt "9" 9}; # map string int : nat : nat : int : string : string
            DUP 5;      # string : map string int : nat : nat : int : string : string
            PUSH nat 1; # nat : string : map string int : nat : nat : int : string : string
            DUP 4;      # nat : nat : string : map string int : nat : nat : int : string : string
            SLICE;      # option string : map string int : nat : nat : int : string : string
            IF_NONE
              {
                PUSH int 292; # int : map string int : nat : nat : int : string : string
                FAILWITH;   # FAILED
              }
              {}; # @some : map string int : nat : nat : int : string : string
            GET;        # option int : nat : nat : int : string : string
            IF_NONE
              {
                PUSH int 292; # int : nat : nat : int : string : string
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:292 # @some : nat : nat : int : string : string
              }; # @some : nat : nat : int : string : string
            DIG 3;      # int : @some : nat : nat : string : string
            PUSH int 10; # int : int : @some : nat : nat : string : string
            MUL;        # int : @some : nat : nat : string : string
            ADD;        # int : nat : nat : string : string
            DUG 2;      # nat : nat : int : string : string
            # loop step # nat : nat : int : string : string
            PUSH nat 1; # nat : nat : nat : int : string : string
            ADD;        # nat : nat : int : string : string
            DUP;        # nat : nat : nat : int : string : string
            DUP 3;      # nat : nat : nat : nat : int : string : string
            COMPARE;    # int : nat : nat : int : string : string
            GT;         # bool : nat : nat : int : string : string
          }; # nat : nat : int : string : string
        DROP 2;     # int : string : string
        SWAP;       # string : int : string
        DROP;       # int : string
        SWAP;       # string : int
        # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', _x0): # string : int
        PUSH string "-"; # string : string : int
        DUP;        # string : string : string : int
        SIZE;       # nat : string : string : int
        DIG 2;      # string : nat : string : int
        SWAP;       # nat : string : string : int
        PUSH nat 0; # nat : nat : string : string : int
        SLICE;      # option string : string : int
        IF_NONE
          {
            DROP;       # int
            PUSH bool False; # bool : int
          }
          {
            COMPARE;    # int : int
            EQ;         # bool : int
          }; # bool : int
        IF
          {
            # utils_1.value *= -1 # int
            PUSH int -1; # int : int
            SWAP;       # int : int
            MUL;        # int
          }
          {}; # int
        # sp.result(utils_1.value) # int
      }; # lambda string int : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda string int
    # Private variable: math_median # pair @parameter @storage : lambda string int
    LAMBDA
      (list nat)
      nat
      {
        # utils_3_hist = sp.local("utils_3_hist", {}) # list nat
        EMPTY_MAP nat nat; # map nat nat : list nat
        SWAP;       # list nat : map nat nat
        # for utils_4_x in _x1: ... # list nat : map nat nat
        DUP;        # list nat : list nat : map nat nat
        DUG 2;      # list nat : map nat nat : list nat
        ITER
          {
            SWAP;       # map nat nat : nat : list nat
            # if utils_3_hist.value.contains(utils_4_x): # map nat nat : nat : list nat
            DUP;        # map nat nat : map nat nat : nat : list nat
            DUG 2;      # map nat nat : nat : map nat nat : list nat
            SWAP;       # nat : map nat nat : map nat nat : list nat
            DUP;        # nat : nat : map nat nat : map nat nat : list nat
            DUG 2;      # nat : map nat nat : nat : map nat nat : list nat
            MEM;        # bool : nat : map nat nat : list nat
            IF
              {
                SWAP;       # map nat nat : nat : list nat
                # utils_3_hist.value[utils_4_x] += 1 # map nat nat : nat : list nat
                DUP;        # map nat nat : map nat nat : nat : list nat
                DIG 2;      # nat : map nat nat : map nat nat : list nat
                DUP;        # nat : nat : map nat nat : map nat nat : list nat
                DUG 2;      # nat : map nat nat : nat : map nat nat : list nat
                GET;        # option nat : nat : map nat nat : list nat
                IF_NONE
                  {
                    PUSH int 86; # int : nat : map nat nat : list nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : map nat nat : list nat
                PUSH nat 1; # nat : @some : nat : map nat nat : list nat
                ADD;        # nat : nat : map nat nat : list nat
                SOME;       # option nat : nat : map nat nat : list nat
                SWAP;       # nat : option nat : map nat nat : list nat
                UPDATE;     # map nat nat : list nat
              }
              {
                SWAP;       # map nat nat : nat : list nat
                # utils_3_hist.value[utils_4_x] = 1 # map nat nat : nat : list nat
                PUSH (option nat) (Some 1); # option nat : map nat nat : nat : list nat
                DIG 2;      # nat : option nat : map nat nat : list nat
                UPDATE;     # map nat nat : list nat
              }; # map nat nat : list nat
          }; # map nat nat : list nat
        SWAP;       # list nat : map nat nat
        # compute_utils_90 = sp.local("compute_utils_90", sp.len(_x1)) # list nat : map nat nat
        DUP;        # list nat : list nat : map nat nat
        DUG 2;      # list nat : map nat nat : list nat
        SIZE;       # nat : map nat nat : list nat
        # utils_5_result = sp.local("utils_5_result", 0) # nat : map nat nat : list nat
        PUSH nat 0; # nat : nat : map nat nat : list nat
        # utils_6_half = sp.local("utils_6_half", compute_utils_90.value // 2) # nat : nat : map nat nat : list nat
        PUSH nat 2; # nat : nat : nat : map nat nat : list nat
        DUP 3;      # nat : nat : nat : nat : map nat nat : list nat
        EDIV;       # option (pair nat nat) : nat : nat : map nat nat : list nat
        IF_NONE
          {
            PUSH int 92; # int : nat : nat : map nat nat : list nat
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat : nat : map nat nat : list nat
          }; # nat : nat : nat : map nat nat : list nat
        # utils_7_use_average = sp.local("utils_7_use_average", (utils_6_half.value * 2) == compute_utils_90.value) # nat : nat : nat : map nat nat : list nat
        DUP 3;      # nat : nat : nat : nat : map nat nat : list nat
        PUSH nat 2; # nat : nat : nat : nat : nat : map nat nat : list nat
        DUP 3;      # nat : nat : nat : nat : nat : nat : map nat nat : list nat
        MUL;        # nat : nat : nat : nat : nat : map nat nat : list nat
        COMPARE;    # int : nat : nat : nat : map nat nat : list nat
        EQ;         # bool : nat : nat : nat : map nat nat : list nat
        # utils_8_i = sp.local("utils_8_i", 0) # bool : nat : nat : nat : map nat nat : list nat
        PUSH nat 0; # nat : bool : nat : nat : nat : map nat nat : list nat
        # for utils_9_x in utils_3_hist.value.items(): ... # nat : bool : nat : nat : nat : map nat nat : list nat
        DUP 6;      # map nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
        ITER
          {
            # if utils_7_use_average.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
            DUP 3;      # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
            IF
              {
                # if utils_8_i.value < utils_6_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                LT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                IF
                  {
                    DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    # utils_5_result.value = utils_9_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    # utils_8_i.value += utils_9_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    CDR;        # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    DIG 2;      # nat : nat : pair nat nat : bool : nat : nat : nat : map nat nat : list nat
                    ADD;        # nat : pair nat nat : bool : nat : nat : nat : map nat nat : list nat
                    SWAP;       # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    # if utils_8_i.value > utils_6_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    GT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    IF
                      {
                        DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                        DROP 2;     # nat : nat : nat : nat : map nat nat : list nat
                        # utils_7_use_average.value = False # nat : nat : nat : nat : map nat nat : list nat
                        PUSH bool False; # bool : nat : nat : nat : nat : map nat nat : list nat
                        SWAP;       # nat : bool : nat : nat : nat : map nat nat : list nat
                      }
                      {
                        DROP;       # nat : bool : nat : nat : nat : map nat nat : list nat
                      }; # nat : bool : nat : nat : nat : map nat nat : list nat
                  }
                  {
                    DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DROP;       # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    # utils_5_result.value += utils_9_x.key # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DUP;        # pair nat nat : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    CAR;        # nat : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                    ADD;        # nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                    DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    # utils_5_result.value //= 2 # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    PUSH nat 2; # nat : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                    EDIV;       # option (pair nat nat) : pair nat nat : nat : nat : nat : map nat nat : list nat
                    IF_NONE
                      {
                        PUSH int 104; # int : pair nat nat : nat : nat : nat : map nat nat : list nat
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                      }; # nat : pair nat nat : nat : nat : nat : map nat nat : list nat
                    DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    # utils_7_use_average.value = False # pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    PUSH bool False; # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list nat
                    DUG 2;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    # utils_8_i.value += utils_9_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    ADD;        # nat : bool : nat : nat : nat : map nat nat : list nat
                  }; # nat : bool : nat : nat : nat : map nat nat : list nat
              }
              {
                # if utils_8_i.value <= utils_6_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                LE;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                IF
                  {
                    DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    # utils_5_result.value = utils_9_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list nat
                    DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    # utils_8_i.value += utils_9_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : list nat
                    ADD;        # nat : bool : nat : nat : nat : map nat nat : list nat
                  }
                  {
                    DROP;       # nat : bool : nat : nat : nat : map nat nat : list nat
                  }; # nat : bool : nat : nat : nat : map nat nat : list nat
              }; # nat : bool : nat : nat : nat : map nat nat : list nat
          }; # nat : bool : nat : nat : nat : map nat nat : list nat
        DROP 3;     # nat : nat : map nat nat : list nat
        SWAP;       # nat : nat : map nat nat : list nat
        DROP;       # nat : map nat nat : list nat
        SWAP;       # map nat nat : nat : list nat
        DROP;       # nat : list nat
        SWAP;       # list nat : nat
        DROP;       # nat
        # sp.result(utils_5_result.value) # nat
      }; # lambda (list nat) nat : pair @parameter @storage : lambda string int
    SWAP;       # pair @parameter @storage : lambda (list nat) nat : lambda string int
    # Private variable: math_pow # pair @parameter @storage : lambda (list nat) nat : lambda string int
    LAMBDA
      (pair nat nat)
      nat
      {
        # sp.result(sp.michelson("\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            ")(_x2.exponent, _x2.base, 1)) # pair nat nat
        PUSH nat 1; # nat : pair nat nat
        SWAP;       # pair nat nat : nat
        DUP;        # pair nat nat : pair nat nat : nat
        CAR;        # nat : pair nat nat : nat
        SWAP;       # pair nat nat : nat : nat
        DUP;        # pair nat nat : pair nat nat : nat : nat
        DUG 3;      # pair nat nat : nat : nat : pair nat nat
        CDR;        # nat : nat : nat : pair nat nat
        DUP;        # nat : nat : nat : nat : pair nat nat
        PUSH nat 0; # nat : nat : nat : nat : nat : pair nat nat
        COMPARE;    # int : nat : nat : nat : pair nat nat
        NEQ;        # bool : nat : nat : nat : pair nat nat
        LOOP
          {
            PUSH nat 0; # nat : nat : nat : nat : pair nat nat
            PUSH nat 2; # nat : nat : nat : nat : nat : pair nat nat
            DUP 3;      # nat : nat : nat : nat : nat : nat : pair nat nat
            EDIV;       # option (pair nat nat) : nat : nat : nat : nat : pair nat nat
            IF_NONE
              {
                UNIT;       # unit : nat : nat : nat : nat : pair nat nat
                FAILWITH;   # FAILED
              }
              {
                CDR;        # nat : nat : nat : nat : nat : pair nat nat
              }; # nat : nat : nat : nat : nat : pair nat nat
            COMPARE;    # int : nat : nat : nat : pair nat nat
            NEQ;        # bool : nat : nat : nat : pair nat nat
            IF
              {
                SWAP;       # nat : nat : nat : pair nat nat
                DUP;        # nat : nat : nat : nat : pair nat nat
                DUG 2;      # nat : nat : nat : nat : pair nat nat
                DIG 3;      # nat : nat : nat : nat : pair nat nat
                MUL;        # nat : nat : nat : pair nat nat
                DUG 2;      # nat : nat : nat : pair nat nat
              }
              {}; # nat : nat : nat : pair nat nat
            PUSH nat 1; # nat : nat : nat : nat : pair nat nat
            SWAP;       # nat : nat : nat : nat : pair nat nat
            LSR;        # nat : nat : nat : pair nat nat
            SWAP;       # nat : nat : nat : pair nat nat
            DUP;        # nat : nat : nat : nat : pair nat nat
            MUL;        # nat : nat : nat : pair nat nat
            SWAP;       # nat : nat : nat : pair nat nat
            DUP;        # nat : nat : nat : nat : pair nat nat
            PUSH nat 0; # nat : nat : nat : nat : nat : pair nat nat
            COMPARE;    # int : nat : nat : nat : pair nat nat
            NEQ;        # bool : nat : nat : nat : pair nat nat
          }; # nat : nat : nat : pair nat nat
        DROP 2;     # nat : pair nat nat
        SWAP;       # pair nat nat : nat
        DROP;       # nat
      }; # lambda (pair nat nat) nat : pair @parameter @storage : lambda (list nat) nat : lambda string int
    SWAP;       # pair @parameter @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # Private variable: string_ends_with # pair @parameter @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LAMBDA
      (pair string string)
      bool
      {
        # sp.result(sp.michelson("\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            ")(_x3.text, _x3.postfix)) # pair string string
        DUP;        # pair string string : pair string string
        CAR;        # string : pair string string
        SWAP;       # pair string string : string
        DUP;        # pair string string : pair string string : string
        DUG 2;      # pair string string : string : pair string string
        CDR;        # string : string : pair string string
        DUP;        # string : string : string : pair string string
        SIZE;       # nat : string : string : pair string string
        DUP 3;      # string : nat : string : string : pair string string
        SIZE;       # nat : nat : string : string : pair string string
        SWAP;       # nat : nat : string : string : pair string string
        PAIR;       # pair nat nat : string : string : pair string string
        DUP;        # pair nat nat : pair nat nat : string : string : pair string string
        UNPAIR;     # nat : nat : pair nat nat : string : string : pair string string
        COMPARE;    # int : pair nat nat : string : string : pair string string
        GE;         # bool : pair nat nat : string : string : pair string string
        IF
          {
            DIG 3;      # pair string string : pair nat nat : string : string
            DROP;       # pair nat nat : string : string
            UNPAIR;     # nat : nat : string : string
            DUP 2;      # nat : nat : nat : string : string
            SWAP;       # nat : nat : nat : string : string
            SUB;        # int : nat : string : string
            ABS;        # nat : nat : string : string
            SLICE;      # option string : string
            IF_NONE
              {
                DROP;       # 
                PUSH bool False; # bool
              }
              {
                COMPARE;    # int
                EQ;         # bool
              }; # bool
          }
          {
            DROP 4;     # 
            PUSH bool False; # bool
          }; # bool
      }; # lambda (pair string string) bool : pair @parameter @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # pair @parameter @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # Private variable: string_of_int # pair @parameter @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LAMBDA
      int
      string
      {
        # utils_10 = sp.local("utils_10", abs(_x4)) # int
        DUP;        # int : int
        ABS;        # nat : int
        # utils_11 = sp.local("utils_11", sp.list([])) # nat : int
        NIL string; # list string : nat : int
        # if utils_10.value == 0: # list string : nat : int
        PUSH nat 0; # nat : list string : nat : int
        DUP 3;      # nat : nat : list string : nat : int
        COMPARE;    # int : list string : nat : int
        EQ;         # bool : list string : nat : int
        IF
          {
            # utils_11.value.push('0') # list string : nat : int
            PUSH string "0"; # string : list string : nat : int
            CONS;       # list string : nat : int
          }
          {}; # list string : nat : int
        # while utils_10.value > 0 : ... # list string : nat : int
        PUSH nat 0; # nat : list string : nat : int
        DUP 3;      # nat : nat : list string : nat : int
        COMPARE;    # int : list string : nat : int
        GT;         # bool : list string : nat : int
        LOOP
          {
            # utils_11.value.push({0 : '0', 1 : '1', 2 : '2', 3 : '3', 4 : '4', 5 : '5', 6 : '6', 7 : '7', 8 : '8', 9 : '9'}[utils_10.value % 10]) # list string : nat : int
            PUSH (map nat string) {Elt 0 "0"; Elt 1 "1"; Elt 2 "2"; Elt 3 "3"; Elt 4 "4"; Elt 5 "5"; Elt 6 "6"; Elt 7 "7"; Elt 8 "8"; Elt 9 "9"}; # map nat string : list string : nat : int
            PUSH nat 10; # nat : map nat string : list string : nat : int
            DUP 4;      # nat : nat : map nat string : list string : nat : int
            EDIV;       # option (pair nat nat) : map nat string : list string : nat : int
            IF_NONE
              {
                PUSH int 254; # int : map nat string : list string : nat : int
                FAILWITH;   # FAILED
              }
              {
                CDR;        # nat : map nat string : list string : nat : int
              }; # nat : map nat string : list string : nat : int
            GET;        # option string : list string : nat : int
            IF_NONE
              {
                PUSH int 254; # int : list string : nat : int
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:254 # @some : list string : nat : int
              }; # @some : list string : nat : int
            CONS;       # list string : nat : int
            # utils_10.value //= 10 # list string : nat : int
            PUSH nat 10; # nat : list string : nat : int
            DIG 2;      # nat : nat : list string : int
            EDIV;       # option (pair nat nat) : list string : int
            IF_NONE
              {
                PUSH int 255; # int : list string : int
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : list string : int
              }; # nat : list string : int
            SWAP;       # list string : nat : int
            # check for next loop: utils_10.value > 0 # list string : nat : int
            PUSH nat 0; # nat : list string : nat : int
            DUP 3;      # nat : nat : list string : nat : int
            COMPARE;    # int : list string : nat : int
            GT;         # bool : list string : nat : int
          }; # list string : nat : int
        SWAP;       # nat : list string : int
        DROP;       # list string : int
        # utils_12 = sp.local("utils_12", sp.concat(utils_11.value)) # list string : int
        CONCAT;     # string : int
        # if _x4 < 0: # string : int
        PUSH int 0; # int : string : int
        DIG 2;      # int : int : string
        COMPARE;    # int : string
        LT;         # bool : string
        IF
          {
            # utils_12.value = '-' + utils_12.value # string
            PUSH string "-"; # string : string
            CONCAT;     # string
          }
          {}; # string
        # sp.result(utils_12.value) # string
      }; # lambda int string : pair @parameter @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # pair @parameter @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # Private variable: string_split # pair @parameter @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LAMBDA
      (pair string string)
      (list string)
      {
        # utils_13 = sp.local("utils_13", 0) # pair string string
        PUSH nat 0; # nat : pair string string
        # utils_14 = sp.local("utils_14", sp.list([])) # nat : pair string string
        NIL string; # list string : nat : pair string string
        # for utils_15 in sp.range(0, sp.len(_x5.text)): ... (sp.TNat) # list string : nat : pair string string
        DUP 3;      # pair string string : list string : nat : pair string string
        CDR;        # string : list string : nat : pair string string
        SIZE;       # nat : list string : nat : pair string string
        PUSH nat 0; # nat : nat : list string : nat : pair string string
        DUP;        # nat : nat : nat : list string : nat : pair string string
        DUP 3;      # nat : nat : nat : nat : list string : nat : pair string string
        COMPARE;    # int : nat : nat : list string : nat : pair string string
        GT;         # bool : nat : nat : list string : nat : pair string string
        LOOP
          {
            # if sp.slice(_x5.text, utils_15, 1).open_some() == _x5.separator: # nat : nat : list string : nat : pair string string
            DIG 4;      # pair string string : nat : nat : list string : nat
            DUP;        # pair string string : pair string string : nat : nat : list string : nat
            CAR;        # string : pair string string : nat : nat : list string : nat
            SWAP;       # pair string string : string : nat : nat : list string : nat
            DUP;        # pair string string : pair string string : string : nat : nat : list string : nat
            DUG 6;      # pair string string : string : nat : nat : list string : nat : pair string string
            CDR;        # string : string : nat : nat : list string : nat : pair string string
            PUSH nat 1; # nat : string : string : nat : nat : list string : nat : pair string string
            DUP 4;      # nat : nat : string : string : nat : nat : list string : nat : pair string string
            SLICE;      # option string : string : nat : nat : list string : nat : pair string string
            IF_NONE
              {
                PUSH int 236; # int : string : nat : nat : list string : nat : pair string string
                FAILWITH;   # FAILED
              }
              {}; # @some : string : nat : nat : list string : nat : pair string string
            COMPARE;    # int : nat : nat : list string : nat : pair string string
            EQ;         # bool : nat : nat : list string : nat : pair string string
            IF
              {
                # utils_14.value.push(sp.slice(_x5.text, utils_13.value, sp.as_nat(utils_15 - utils_13.value)).open_some()) # nat : nat : list string : nat : pair string string
                DIG 2;      # list string : nat : nat : nat : pair string string
                DUP 5;      # pair string string : list string : nat : nat : nat : pair string string
                CDR;        # string : list string : nat : nat : nat : pair string string
                DUP 5;      # nat : string : list string : nat : nat : nat : pair string string
                DUP 4;      # nat : nat : string : list string : nat : nat : nat : pair string string
                SUB;        # int : string : list string : nat : nat : nat : pair string string
                ISNAT;      # option nat : string : list string : nat : nat : nat : pair string string
                IF_NONE
                  {
                    PUSH int 237; # int : string : list string : nat : nat : nat : pair string string
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : string : list string : nat : nat : nat : pair string string
                DIG 5;      # nat : @some : string : list string : nat : nat : pair string string
                SLICE;      # option string : list string : nat : nat : pair string string
                IF_NONE
                  {
                    PUSH int 237; # int : list string : nat : nat : pair string string
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list string : nat : nat : pair string string
                CONS;       # list string : nat : nat : pair string string
                DUG 2;      # nat : nat : list string : pair string string
                # utils_13.value = utils_15 + 1 # nat : nat : list string : pair string string
                DUP;        # nat : nat : nat : list string : pair string string
                PUSH nat 1; # nat : nat : nat : nat : list string : pair string string
                ADD;        # nat : nat : nat : list string : pair string string
                DUG 3;      # nat : nat : list string : nat : pair string string
              }
              {}; # nat : nat : list string : nat : pair string string
            # loop step # nat : nat : list string : nat : pair string string
            PUSH nat 1; # nat : nat : nat : list string : nat : pair string string
            ADD;        # nat : nat : list string : nat : pair string string
            DUP;        # nat : nat : nat : list string : nat : pair string string
            DUP 3;      # nat : nat : nat : nat : list string : nat : pair string string
            COMPARE;    # int : nat : nat : list string : nat : pair string string
            GT;         # bool : nat : nat : list string : nat : pair string string
          }; # nat : nat : list string : nat : pair string string
        DROP 2;     # list string : nat : pair string string
        # if sp.len(_x5.text) > 0: # list string : nat : pair string string
        PUSH nat 0; # nat : list string : nat : pair string string
        DUP 4;      # pair string string : nat : list string : nat : pair string string
        CDR;        # string : nat : list string : nat : pair string string
        SIZE;       # nat : nat : list string : nat : pair string string
        COMPARE;    # int : list string : nat : pair string string
        GT;         # bool : list string : nat : pair string string
        IF
          {
            # utils_14.value.push(sp.slice(_x5.text, utils_13.value, sp.as_nat(sp.len(_x5.text) - utils_13.value)).open_some()) # list string : nat : pair string string
            DUP 3;      # pair string string : list string : nat : pair string string
            CDR;        # string : list string : nat : pair string string
            DUP 3;      # nat : string : list string : nat : pair string string
            DIG 4;      # pair string string : nat : string : list string : nat
            CDR;        # string : nat : string : list string : nat
            SIZE;       # nat : nat : string : list string : nat
            SUB;        # int : string : list string : nat
            ISNAT;      # option nat : string : list string : nat
            IF_NONE
              {
                PUSH int 240; # int : string : list string : nat
                FAILWITH;   # FAILED
              }
              {}; # @some : string : list string : nat
            DIG 3;      # nat : @some : string : list string
            SLICE;      # option string : list string
            IF_NONE
              {
                PUSH int 240; # int : list string
                FAILWITH;   # FAILED
              }
              {}; # @some : list string
            CONS;       # list string
          }
          {
            SWAP;       # nat : list string : pair string string
            DROP;       # list string : pair string string
            SWAP;       # pair string string : list string
            DROP;       # list string
          }; # list string
        # sp.result(utils_14.value.rev()) # list string
        NIL string; # list string : list string
        SWAP;       # list string : list string
        ITER
          {
            CONS;       # list string
          }; # list string
      }; # lambda (pair string string) (list string) : pair @parameter @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # pair @parameter @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # Private variable: string_starts_with # pair @parameter @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LAMBDA
      (pair string string)
      bool
      {
        # sp.result(sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")(_x6.prefix, _x6.text)) # pair string string
        UNPAIR;     # string : string
        DUP;        # string : string : string
        SIZE;       # nat : string : string
        DIG 2;      # string : nat : string
        SWAP;       # nat : string : string
        PUSH nat 0; # nat : nat : string : string
        SLICE;      # option string : string
        IF_NONE
          {
            DROP;       # 
            PUSH bool False; # bool
          }
          {
            COMPARE;    # int
            EQ;         # bool
          }; # bool
      }; # lambda (pair string string) bool : pair @parameter @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # pair @parameter @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    UNPAIR;     # @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # == test ==
    # utils_16 = sp.local("utils_16", 1) # @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 1; # nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_17 = sp.local("utils_17", sp.list([])) # nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    NIL string; # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if utils_16.value == 0: # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        # utils_17.value.push('0') # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "0"; # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        CONS;       # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {}; # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # while utils_16.value > 0 : ... # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GT;         # bool : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LOOP
      {
        # utils_17.value.push({0 : '0', 1 : '1', 2 : '2', 3 : '3', 4 : '4', 5 : '5', 6 : '6', 7 : '7', 8 : '8', 9 : '9'}[utils_16.value % 10]) # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH (map nat string) {Elt 0 "0"; Elt 1 "1"; Elt 2 "2"; Elt 3 "3"; Elt 4 "4"; Elt 5 "5"; Elt 6 "6"; Elt 7 "7"; Elt 8 "8"; Elt 9 "9"}; # map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 10; # nat : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 4;      # nat : nat : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EDIV;       # option (pair nat nat) : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 254; # int : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {
            CDR;        # nat : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # nat : map nat string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GET;        # option string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 254; # int : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {
            # of_some: Get-item:254 # @some : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # @some : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        CONS;       # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # utils_16.value //= 10 # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 10; # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DIG 2;      # nat : nat : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EDIV;       # option (pair nat nat) : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 255; # int : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # nat : list string : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SWAP;       # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # check for next loop: utils_16.value > 0 # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 0; # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # nat : nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        COMPARE;    # int : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GT;         # bool : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_18 = sp.local("utils_18", sp.concat(utils_17.value)) # list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # list string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    CONCAT;     # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if True:
    # utils_18.value = '-' + utils_18.value # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-"; # string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    CONCAT;     # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(utils_18.value == '-1') # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-1"; # string : string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: utils_18.value == '-1'"; # string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_19 = sp.local("utils_19", 1) # string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 1; # nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_20 = sp.local("utils_20", sp.list([])) # nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    NIL string; # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if utils_19.value == 0: # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        # utils_20.value.push('0') # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "0"; # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        CONS;       # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {}; # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # while utils_19.value > 0 : ... # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GT;         # bool : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LOOP
      {
        # utils_20.value.push({0 : '0', 1 : '1', 2 : '2', 3 : '3', 4 : '4', 5 : '5', 6 : '6', 7 : '7', 8 : '8', 9 : '9'}[utils_19.value % 10]) # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH (map nat string) {Elt 0 "0"; Elt 1 "1"; Elt 2 "2"; Elt 3 "3"; Elt 4 "4"; Elt 5 "5"; Elt 6 "6"; Elt 7 "7"; Elt 8 "8"; Elt 9 "9"}; # map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 10; # nat : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 4;      # nat : nat : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EDIV;       # option (pair nat nat) : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 254; # int : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {
            CDR;        # nat : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # nat : map nat string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GET;        # option string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 254; # int : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {
            # of_some: Get-item:254 # @some : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # @some : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        CONS;       # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # utils_19.value //= 10 # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 10; # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DIG 2;      # nat : nat : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EDIV;       # option (pair nat nat) : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 255; # int : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # nat : list string : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SWAP;       # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # check for next loop: utils_19.value > 0 # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 0; # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # nat : nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        COMPARE;    # int : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GT;         # bool : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_21 = sp.local("utils_21", sp.concat(utils_20.value)) # list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # list string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    CONCAT;     # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if False:
    # sp.verify(utils_21.value == '1') # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "1"; # string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: utils_21.value == '1'"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(self.string_of_int(2) == '2') # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "2"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 12;     # lambda int string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH int 2; # int : lambda int string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EXEC;       # string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: self.string_of_int(2) == '2'"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_22 = sp.local("utils_22", '1') # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "1"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', '1'): # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "1"; # string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-"; # string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # string : nat : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SLICE;      # option string : string : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF_NONE
      {
        DROP;       # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH bool False; # bool : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {
        COMPARE;    # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EQ;         # bool : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # bool : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        DROP;       # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # utils_22.value = sp.slice('1', 1, sp.as_nat(sp.len('1') - 1)).open_some(message = '') # string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "1"; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "1"; # string : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SIZE;       # nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SUB;        # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ISNAT;      # option nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 288; # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : @some : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH string ""; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {}; # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_23 = sp.local("utils_23", 0) # string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH int 0; # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # string : int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # for utils_24 in sp.range(0, sp.len(utils_22.value)): ... (sp.TNat) # string : int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : int : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUG 2;      # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GT;         # bool : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LOOP
      {
        # utils_23.value = (10 * utils_23.value) + {'0' : 0, '1' : 1, '2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9}[sp.slice(utils_22.value, utils_24, 1).open_some()] # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH (map string int) {Elt "0" 0; Elt "1" 1; Elt "2" 2; Elt "3" 3; Elt "4" 4; Elt "5" 5; Elt "6" 6; Elt "7" 7; Elt "8" 8; Elt "9" 9}; # map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 5;      # string : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : string : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 4;      # nat : nat : string : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 292; # int : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : map string int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GET;        # option int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 292; # int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {
            # of_some: Get-item:292 # @some : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # @some : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DIG 3;      # int : @some : nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH int 10; # int : int : @some : nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        MUL;        # int : @some : nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ADD;        # int : nat : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUG 2;      # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # loop step # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ADD;        # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP;        # nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # nat : nat : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        COMPARE;    # int : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GT;         # bool : nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # nat : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP 2;     # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', '1'): # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "1"; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-"; # string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # string : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SLICE;      # option string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF_NONE
      {
        DROP;       # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH bool False; # bool : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {
        COMPARE;    # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EQ;         # bool : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # bool : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        # utils_23.value *= -1 # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH int -1; # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SWAP;       # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        MUL;        # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {}; # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(utils_23.value == 1) # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH int 1; # int : int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: utils_23.value == 1"; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_25 = sp.local("utils_25", '-1') # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-1"; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', '-1'): # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-1"; # string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-"; # string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # string : nat : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SLICE;      # option string : string : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF_NONE
      {
        DROP;       # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH bool False; # bool : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {
        COMPARE;    # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EQ;         # bool : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # bool : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        DROP;       # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # utils_25.value = sp.slice('-1', 1, sp.as_nat(sp.len('-1') - 1)).open_some(message = '') # int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "-1"; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "-1"; # string : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SIZE;       # nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SUB;        # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ISNAT;      # option nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 288; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : @some : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH string ""; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {}; # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_26 = sp.local("utils_26", 0) # string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH int 0; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # string : int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # for utils_27 in sp.range(0, sp.len(utils_25.value)): ... (sp.TNat) # string : int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : int : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUG 2;      # string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GT;         # bool : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LOOP
      {
        # utils_26.value = (10 * utils_26.value) + {'0' : 0, '1' : 1, '2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9}[sp.slice(utils_25.value, utils_27, 1).open_some()] # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH (map string int) {Elt "0" 0; Elt "1" 1; Elt "2" 2; Elt "3" 3; Elt "4" 4; Elt "5" 5; Elt "6" 6; Elt "7" 7; Elt "8" 8; Elt "9" 9}; # map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 5;      # string : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : string : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 4;      # nat : nat : string : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 292; # int : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : map string int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GET;        # option int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 292; # int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {
            # of_some: Get-item:292 # @some : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # @some : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DIG 3;      # int : @some : nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH int 10; # int : int : @some : nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        MUL;        # int : @some : nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ADD;        # int : nat : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUG 2;      # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # loop step # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ADD;        # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP;        # nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # nat : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        COMPARE;    # int : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GT;         # bool : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP 2;     # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('-', '-1'): # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-1"; # string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "-"; # string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # string : nat : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SLICE;      # option string : string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF_NONE
      {
        DROP;       # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH bool False; # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {
        COMPARE;    # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EQ;         # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        # utils_26.value *= -1 # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH int -1; # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SWAP;       # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        MUL;        # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {}; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(utils_26.value == (-1)) # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH int -1; # int : int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: utils_26.value == (-1)"; # string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(self.int_of_string('2') == 2) # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH int 2; # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 20;     # lambda string int : int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "2"; # string : lambda string int : int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EXEC;       # int : int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: self.int_of_string('2') == 2"; # string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_28 = sp.local("utils_28", 0) # int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_29 = sp.local("utils_29", sp.list([])) # nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    NIL string; # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # for utils_30 in sp.range(0, sp.len('a b')): ... (sp.TNat) # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "a b"; # string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GT;         # bool : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LOOP
      {
        # if sp.slice('a b', utils_30, 1).open_some() == ' ': # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string " "; # string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "a b"; # string : string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : string : string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 4;      # nat : nat : string : string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 236; # int : string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        COMPARE;    # int : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EQ;         # bool : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF
          {
            # utils_29.value.push(sp.slice('a b', utils_28.value, sp.as_nat(utils_30 - utils_28.value)).open_some()) # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DIG 2;      # list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH string "a b"; # string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 5;      # nat : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 4;      # nat : nat : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            SUB;        # int : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            ISNAT;      # option nat : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF_NONE
              {
                PUSH int 237; # int : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                FAILWITH;   # FAILED
              }
              {}; # @some : string : list string : nat : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DIG 5;      # nat : @some : string : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            SLICE;      # option string : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF_NONE
              {
                PUSH int 237; # int : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                FAILWITH;   # FAILED
              }
              {}; # @some : list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            CONS;       # list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUG 2;      # nat : nat : list string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            # utils_28.value = utils_30 + 1 # nat : nat : list string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP;        # nat : nat : nat : list string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH nat 1; # nat : nat : nat : nat : list string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            ADD;        # nat : nat : nat : list string : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUG 3;      # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }
          {}; # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # loop step # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ADD;        # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP;        # nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # nat : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        COMPARE;    # int : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GT;         # bool : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP 2;     # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if sp.len('a b') > 0: # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "a b"; # string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GT;         # bool : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        # utils_29.value.push(sp.slice('a b', utils_28.value, sp.as_nat(sp.len('a b') - utils_28.value)).open_some()) # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "a b"; # string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # nat : string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "a b"; # string : nat : string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SIZE;       # nat : nat : string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SUB;        # int : string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ISNAT;      # option nat : string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 240; # int : string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 4;      # nat : @some : string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 240; # int : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        CONS;       # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {}; # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(sp.pack(sp.set_type_expr(utils_29.value.rev(), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['a', 'b']), sp.TList(sp.TString)))) # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (list string) {"a"; "b"}; # list string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PACK;       # bytes : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # list string : bytes : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # list string : list string : bytes : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUG 2;      # list string : bytes : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    NIL string; # list string : list string : bytes : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # list string : list string : bytes : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    ITER
      {
        CONS;       # list string : bytes : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # list string : bytes : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PACK;       # bytes : bytes : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: sp.pack(sp.set_type_expr(utils_29.value.rev(), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['a', 'b']), sp.TList(sp.TString)))"; # string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_31 = sp.local("utils_31", 0) # list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_32 = sp.local("utils_32", sp.list([])) # nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    NIL string; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # for utils_33 in sp.range(0, sp.len('b,a')): ... (sp.TNat) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "b,a"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # nat : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GT;         # bool : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    LOOP
      {
        # if sp.slice('b,a', utils_33, 1).open_some() == ',': # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string ","; # string : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "b,a"; # string : string : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : string : string : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 4;      # nat : nat : string : string : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : string : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 236; # int : string : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : string : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        COMPARE;    # int : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EQ;         # bool : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF
          {
            # utils_32.value.push(sp.slice('b,a', utils_31.value, sp.as_nat(utils_33 - utils_31.value)).open_some()) # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DIG 2;      # list string : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH string "b,a"; # string : list string : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 5;      # nat : string : list string : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 4;      # nat : nat : string : list string : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            SUB;        # int : string : list string : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            ISNAT;      # option nat : string : list string : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF_NONE
              {
                PUSH int 237; # int : string : list string : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                FAILWITH;   # FAILED
              }
              {}; # @some : string : list string : nat : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DIG 5;      # nat : @some : string : list string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            SLICE;      # option string : list string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF_NONE
              {
                PUSH int 237; # int : list string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                FAILWITH;   # FAILED
              }
              {}; # @some : list string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            CONS;       # list string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUG 2;      # nat : nat : list string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            # utils_31.value = utils_33 + 1 # nat : nat : list string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP;        # nat : nat : nat : list string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH nat 1; # nat : nat : nat : nat : list string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            ADD;        # nat : nat : nat : list string : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUG 3;      # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }
          {}; # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # loop step # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH nat 1; # nat : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ADD;        # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP;        # nat : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # nat : nat : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        COMPARE;    # int : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        GT;         # bool : nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP 2;     # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # if sp.len('b,a') > 0: # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "b,a"; # string : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GT;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        # utils_32.value.push(sp.slice('b,a', utils_31.value, sp.as_nat(sp.len('b,a') - utils_31.value)).open_some()) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "b,a"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # nat : string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH string "b,a"; # string : nat : string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SIZE;       # nat : nat : string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SUB;        # int : string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ISNAT;      # option nat : string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 240; # int : string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 4;      # nat : @some : string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            PUSH int 240; # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            FAILWITH;   # FAILED
          }
          {}; # @some : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        CONS;       # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {}; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(sp.pack(sp.set_type_expr(utils_32.value.rev(), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['b', 'a']), sp.TList(sp.TString)))) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (list string) {"b"; "a"}; # list string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PACK;       # bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # list string : bytes : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # list string : list string : bytes : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUG 2;      # list string : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    NIL string; # list string : list string : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # list string : list string : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    ITER
      {
        CONS;       # list string : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # list string : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PACK;       # bytes : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: sp.pack(sp.set_type_expr(utils_32.value.rev(), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['b', 'a']), sp.TList(sp.TString)))"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(sp.pack(sp.set_type_expr(self.string_split(sp.record(separator = ',,', text = 'a,b')), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['a,b']), sp.TList(sp.TString)))) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (list string) {"a,b"}; # list string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PACK;       # bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 19;     # lambda (pair string string) (list string) : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (pair string string) (Pair ",," "a,b"); # pair string string : lambda (pair string string) (list string) : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EXEC;       # list string : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PACK;       # bytes : bytes : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: sp.pack(sp.set_type_expr(self.string_split(sp.record(separator = ',,', text = 'a,b')), sp.TList(sp.TString))) == sp.pack(sp.set_type_expr(sp.list(['a,b']), sp.TList(sp.TString)))"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('a', 'abc') == True) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH bool True; # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "abc"; # string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "a"; # string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # string : nat : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SLICE;      # option string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF_NONE
      {
        DROP;       # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH bool False; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {
        COMPARE;    # int : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EQ;         # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: sp.michelson(\"\\n            DUP;\\n            SIZE;\\n            DIG 2;\\n            SWAP;\\n            PUSH nat 0;\\n            SLICE;\\n            IF_NONE\\n                {\\n                    DROP;\\n                    PUSH bool False;\\n                }\\n                {\\n                    COMPARE;\\n                    EQ;\\n                };\\n            \")('a', 'abc') == True"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(sp.michelson("\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            ")('b', 'abc') == False) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH bool False; # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "abc"; # string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "b"; # string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # string : nat : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SLICE;      # option string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF_NONE
      {
        DROP;       # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH bool False; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {
        COMPARE;    # int : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        EQ;         # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: sp.michelson(\"\\n            DUP;\\n            SIZE;\\n            DIG 2;\\n            SWAP;\\n            PUSH nat 0;\\n            SLICE;\\n            IF_NONE\\n                {\\n                    DROP;\\n                    PUSH bool False;\\n                }\\n                {\\n                    COMPARE;\\n                    EQ;\\n                };\\n            \")('b', 'abc') == False"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(self.string_starts_with(sp.record(prefix = 'a', text = 'abc')) == True) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH bool True; # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 18;     # lambda (pair string string) bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (pair string string) (Pair "a" "abc"); # pair string string : lambda (pair string string) bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EXEC;       # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: self.string_starts_with(sp.record(prefix = 'a', text = 'abc')) == True"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(sp.michelson("\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            ")('abc', 'c') == True) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH bool True; # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "c"; # string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "abc"; # string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # string : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PAIR;       # pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # pair nat nat : pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    UNPAIR;     # nat : nat : pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GE;         # bool : pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        UNPAIR;     # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 2;      # nat : nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SWAP;       # nat : nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SUB;        # int : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ABS;        # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            DROP;       # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH bool False; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }
          {
            COMPARE;    # int : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            EQ;         # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {
        DROP 3;     # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH bool False; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: sp.michelson(\"\\n            DUP;\\n            SIZE;\\n            DUP 3;\\n            SIZE;\\n            SWAP;\\n            PAIR;\\n            DUP;\\n            UNPAIR;\\n            COMPARE;\\n            GE;\\n            IF\\n            {\\n                UNPAIR;\\n                DUP 2;\\n                SWAP;\\n                SUB;\\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\\n                SLICE;\\n                IF_NONE\\n                {\\n                    DROP;\\n                    PUSH bool False;\\n                }\\n                {\\n                    COMPARE;\\n                    EQ;\\n                };\\n            }\\n            {\\n                DROP 3;\\n                PUSH bool False;\\n            };\\n            \")('abc', 'c') == True"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(sp.michelson("\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            ")('abc', 'b') == False) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH bool False; # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "b"; # string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH string "abc"; # string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # string : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # string : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PAIR;       # pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP;        # pair nat nat : pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    UNPAIR;     # nat : nat : pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    GE;         # bool : pair nat nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {
        UNPAIR;     # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 2;      # nat : nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SWAP;       # nat : nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SUB;        # int : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        ABS;        # nat : nat : string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SLICE;      # option string : string : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF_NONE
          {
            DROP;       # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH bool False; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }
          {
            COMPARE;    # int : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            EQ;         # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }
      {
        DROP 3;     # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        PUSH bool False; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: sp.michelson(\"\\n            DUP;\\n            SIZE;\\n            DUP 3;\\n            SIZE;\\n            SWAP;\\n            PAIR;\\n            DUP;\\n            UNPAIR;\\n            COMPARE;\\n            GE;\\n            IF\\n            {\\n                UNPAIR;\\n                DUP 2;\\n                SWAP;\\n                SUB;\\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\\n                SLICE;\\n                IF_NONE\\n                {\\n                    DROP;\\n                    PUSH bool False;\\n                }\\n                {\\n                    COMPARE;\\n                    EQ;\\n                };\\n            }\\n            {\\n                DROP 3;\\n                PUSH bool False;\\n            };\\n            \")('abc', 'b') == False"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(self.string_ends_with(sp.record(postfix = 'c', text = 'abc')) == True) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH bool True; # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 21;     # lambda (pair string string) bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (pair string string) (Pair "c" "abc"); # pair string string : lambda (pair string string) bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EXEC;       # bool : bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: self.string_ends_with(sp.record(postfix = 'c', text = 'abc')) == True"; # string : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_34_hist = sp.local("utils_34_hist", {}) # list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EMPTY_MAP nat nat; # map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # for utils_35_x in sp.list([1, 2, 3, 4, 5]): ... # map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (list nat) {1; 2; 3; 4; 5}; # list nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    ITER
      {
        SWAP;       # map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # if utils_34_hist.value.contains(utils_35_x): # map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP;        # map nat nat : map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUG 2;      # map nat nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SWAP;       # nat : map nat nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP;        # nat : nat : map nat nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUG 2;      # nat : map nat nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        MEM;        # bool : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF
          {
            SWAP;       # map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            # utils_34_hist.value[utils_35_x] += 1 # map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP;        # map nat nat : map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DIG 2;      # nat : map nat nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP;        # nat : nat : map nat nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUG 2;      # nat : map nat nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            GET;        # option nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF_NONE
              {
                PUSH int 86; # int : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH nat 1; # nat : @some : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            ADD;        # nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            SOME;       # option nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            SWAP;       # nat : option nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            UPDATE;     # map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }
          {
            SWAP;       # map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            # utils_34_hist.value[utils_35_x] = 1 # map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH (option nat) (Some 1); # option nat : map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DIG 2;      # nat : option nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            UPDATE;     # map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # compute_utils_90i = sp.local("compute_utils_90i", sp.len(sp.list([1, 2, 3, 4, 5]))) # map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (list int) {1; 2; 3; 4; 5}; # list int : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_36_result = sp.local("utils_36_result", 0) # nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_37_half = sp.local("utils_37_half", compute_utils_90i.value // 2) # nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 2; # nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EDIV;       # option (pair nat nat) : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF_NONE
      {
        PUSH int 92; # int : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }
      {
        CAR;        # nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_38_use_average = sp.local("utils_38_use_average", (utils_37_half.value * 2) == compute_utils_90i.value) # nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 2; # nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    MUL;        # nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_39_i = sp.local("utils_39_i", 0) # bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # for utils_40_x in utils_34_hist.value.items(): ... # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 6;      # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    ITER
      {
        # if utils_38_use_average.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF
          {
            # if utils_39_i.value < utils_37_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            LT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF
              {
                DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_36_result.value = utils_40_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_39_i.value += utils_40_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CDR;        # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DIG 2;      # nat : nat : pair nat nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                ADD;        # nat : pair nat nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                SWAP;       # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # if utils_39_i.value > utils_37_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                GT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                IF
                  {
                    DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    DROP 2;     # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    # utils_38_use_average.value = False # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    PUSH bool False; # bool : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    SWAP;       # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                  }
                  {
                    DROP;       # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                  }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
              }
              {
                DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DROP;       # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_36_result.value += utils_40_x.key # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP;        # pair nat nat : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CAR;        # nat : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                ADD;        # nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_36_result.value //= 2 # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                PUSH nat 2; # nat : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                EDIV;       # option (pair nat nat) : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                IF_NONE
                  {
                    PUSH int 104; # int : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                  }; # nat : pair nat nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_38_use_average.value = False # pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                PUSH bool False; # bool : pair nat nat : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 2;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_39_i.value += utils_40_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                ADD;        # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
              }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }
          {
            # if utils_39_i.value <= utils_37_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            LE;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF
              {
                DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_36_result.value = utils_40_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_39_i.value += utils_40_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                ADD;        # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
              }
              {
                DROP;       # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
              }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # sp.verify(utils_36_result.value == 3) # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 3; # nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 5;      # nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF
      {}
      {
        PUSH string "WrongCondition: utils_36_result.value == 3"; # string : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }; # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_41_hist = sp.local("utils_41_hist", {}) # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EMPTY_MAP nat nat; # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # for utils_42_x in sp.list([1, 2, 2, 3]): ... # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (list nat) {1; 2; 2; 3}; # list nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    ITER
      {
        SWAP;       # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        # if utils_41_hist.value.contains(utils_42_x): # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP;        # map nat nat : map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUG 2;      # map nat nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        SWAP;       # nat : map nat nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP;        # nat : nat : map nat nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUG 2;      # nat : map nat nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        MEM;        # bool : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF
          {
            SWAP;       # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            # utils_41_hist.value[utils_42_x] += 1 # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP;        # map nat nat : map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DIG 2;      # nat : map nat nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP;        # nat : nat : map nat nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUG 2;      # nat : map nat nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            GET;        # option nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF_NONE
              {
                PUSH int 86; # int : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH nat 1; # nat : @some : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            ADD;        # nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            SOME;       # option nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            SWAP;       # nat : option nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            UPDATE;     # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }
          {
            SWAP;       # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            # utils_41_hist.value[utils_42_x] = 1 # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            PUSH (option nat) (Some 1); # option nat : map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DIG 2;      # nat : option nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            UPDATE;     # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # compute_utils_90 = sp.local("compute_utils_90", sp.len(sp.list([1, 2, 2, 3]))) # map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH (list int) {1; 2; 2; 3}; # list int : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SIZE;       # nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_43_result = sp.local("utils_43_result", 0) # nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_44_half = sp.local("utils_44_half", compute_utils_90.value // 2) # nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 2; # nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EDIV;       # option (pair nat nat) : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    IF_NONE
      {
        PUSH int 92; # int : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        FAILWITH;   # FAILED
      }
      {
        CAR;        # nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_45_use_average = sp.local("utils_45_use_average", (utils_44_half.value * 2) == compute_utils_90.value) # nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 2; # nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 3;      # nat : nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    MUL;        # nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    COMPARE;    # int : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    EQ;         # bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # utils_46_i = sp.local("utils_46_i", 0) # bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    PUSH nat 0; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    # for utils_47_x in utils_41_hist.value.items(): ... # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DUP 6;      # map nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    ITER
      {
        # if utils_45_use_average.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        DUP 3;      # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
        IF
          {
            # if utils_46_i.value < utils_44_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            LT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF
              {
                DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_43_result.value = utils_47_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_46_i.value += utils_47_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CDR;        # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DIG 2;      # nat : nat : pair nat nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                ADD;        # nat : pair nat nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                SWAP;       # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # if utils_46_i.value > utils_44_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                GT;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                IF
                  {
                    DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    DROP 2;     # nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    # utils_45_use_average.value = False # nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    PUSH bool False; # bool : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    SWAP;       # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                  }
                  {
                    DROP;       # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                  }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
              }
              {
                DIG 2;      # bool : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DROP;       # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_43_result.value += utils_47_x.key # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP;        # pair nat nat : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CAR;        # nat : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                ADD;        # nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_43_result.value //= 2 # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                PUSH nat 2; # nat : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DIG 4;      # nat : nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                EDIV;       # option (pair nat nat) : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                IF_NONE
                  {
                    PUSH int 104; # int : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                    FAILWITH;   # FAILED
                  }
                  {
                    CAR;        # nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                  }; # nat : pair nat nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 3;      # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_45_use_average.value = False # pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                PUSH bool False; # bool : pair nat nat : nat : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 2;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_46_i.value += utils_47_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                ADD;        # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
              }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }
          {
            # if utils_46_i.value <= utils_44_half.value: # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 4;      # nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            DUP 3;      # nat : nat : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            COMPARE;    # int : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            LE;         # bool : pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
            IF
              {
                DIG 4;      # nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DROP;       # pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_43_result.value = utils_47_x.key # pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUP;        # pair nat nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CAR;        # nat : pair nat nat : nat : bool : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                DUG 4;      # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                # utils_46_i.value += utils_47_x.value # pair nat nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                CDR;        # nat : nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
                ADD;        # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
              }
              {
                DROP;       # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
              }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
          }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
      }; # nat : bool : nat : nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP 3;     # nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : map nat nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # map nat nat : nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : bool : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # bool : nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : map nat nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # map nat nat : nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : list string : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # list string : nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : list string : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # list string : nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : int : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # int : nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : string : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # string : nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : int : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # int : nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : string : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # string : nat : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : string : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # string : nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : list string : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # list string : nat : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : string : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # string : nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : list string : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # list string : nat : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # nat : nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : @parameter : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    SWAP;       # @parameter : nat : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : @storage : lambda (pair string string) bool : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # lambda (pair string string) bool : nat : @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : @storage : lambda (pair string string) (list string) : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # lambda (pair string string) (list string) : nat : @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : @storage : lambda int string : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # lambda int string : nat : @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : @storage : lambda (pair string string) bool : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # lambda (pair string string) bool : nat : @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DROP;       # nat : @storage : lambda (pair nat nat) nat : lambda (list nat) nat : lambda string int
    DIG 2;      # lambda (pair nat nat) nat : nat : @storage : lambda (list nat) nat : lambda string int
    DROP;       # nat : @storage : lambda (list nat) nat : lambda string int
    DIG 3;      # lambda string int : nat : @storage : lambda (list nat) nat
    DROP;       # nat : @storage : lambda (list nat) nat
    # sp.verify(utils_43_result.value == 2) # nat : @storage : lambda (list nat) nat
    PUSH nat 2; # nat : nat : @storage : lambda (list nat) nat
    COMPARE;    # int : @storage : lambda (list nat) nat
    EQ;         # bool : @storage : lambda (list nat) nat
    IF
      {}
      {
        PUSH string "WrongCondition: utils_43_result.value == 2"; # string : @storage : lambda (list nat) nat
        FAILWITH;   # FAILED
      }; # @storage : lambda (list nat) nat
    # sp.verify(self.math_median(sp.list([1, 2, 2, 5])) == 2) # @storage : lambda (list nat) nat
    PUSH nat 2; # nat : @storage : lambda (list nat) nat
    DIG 2;      # lambda (list nat) nat : nat : @storage
    PUSH (list nat) {1; 2; 2; 5}; # list nat : lambda (list nat) nat : nat : @storage
    EXEC;       # nat : nat : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: self.math_median(sp.list([1, 2, 2, 5])) == 2"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # sp.verify(True, '(number) must be lower than 64')
    # sp.verify(sp.slice(sp.pack(54), 2, sp.as_nat(sp.len(sp.pack(54)) - 2)).open_some(message = 'Could not encode nat to bytes.') == sp.bytes('0x36')) # @storage
    PUSH bytes 0x36; # bytes : @storage
    PUSH int 54; # int : bytes : @storage
    PACK;       # bytes : bytes : @storage
    PUSH nat 2; # nat : bytes : bytes : @storage
    PUSH int 54; # int : nat : bytes : bytes : @storage
    PACK;       # bytes : nat : bytes : bytes : @storage
    SIZE;       # nat : nat : bytes : bytes : @storage
    SUB;        # int : bytes : bytes : @storage
    ISNAT;      # option nat : bytes : bytes : @storage
    IF_NONE
      {
        PUSH int 131; # int : bytes : bytes : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : bytes : @storage
    PUSH nat 2; # nat : @some : bytes : bytes : @storage
    SLICE;      # option bytes : bytes : @storage
    IF_NONE
      {
        PUSH string "Could not encode nat to bytes."; # string : bytes : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: sp.slice(sp.pack(54), 2, sp.as_nat(sp.len(sp.pack(54)) - 2)).open_some(message = 'Could not encode nat to bytes.') == sp.bytes('0x36')"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # sp.verify(sp.slice(sp.pack('TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'), 6, sp.as_nat(sp.len(sp.pack('TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')) - 6)).open_some(message = 'Could not encode string to bytes.') == sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')) # @storage
    PUSH bytes 0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858; # bytes : @storage
    PUSH string "TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; # string : bytes : @storage
    PACK;       # bytes : bytes : @storage
    PUSH nat 6; # nat : bytes : bytes : @storage
    PUSH string "TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; # string : nat : bytes : bytes : @storage
    PACK;       # bytes : nat : bytes : bytes : @storage
    SIZE;       # nat : nat : bytes : bytes : @storage
    SUB;        # int : bytes : bytes : @storage
    ISNAT;      # option nat : bytes : bytes : @storage
    IF_NONE
      {
        PUSH int 122; # int : bytes : bytes : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : bytes : @storage
    PUSH nat 6; # nat : @some : bytes : bytes : @storage
    SLICE;      # option bytes : bytes : @storage
    IF_NONE
      {
        PUSH string "Could not encode string to bytes."; # string : bytes : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: sp.slice(sp.pack('TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'), 6, sp.as_nat(sp.len(sp.pack('TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')) - 6)).open_some(message = 'Could not encode string to bytes.') == sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # sp.verify(sp.len(sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')) < 64, '(number) must be lower than 64') # @storage
    PUSH nat 64; # nat : @storage
    PUSH bytes 0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858; # bytes : nat : @storage
    SIZE;       # nat : nat : @storage
    COMPARE;    # int : @storage
    LT;         # bool : @storage
    IF
      {}
      {
        PUSH string "(number) must be lower than 64"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # lengthBytes = sp.local("lengthBytes", sp.slice(sp.pack(sp.len(sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858'))), 2, sp.as_nat(sp.len(sp.pack(sp.len(sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')))) - 2)).open_some(message = 'Could not encode nat to bytes.')) # @storage
    PUSH bytes 0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858; # bytes : @storage
    SIZE;       # nat : @storage
    PACK;       # bytes : @storage
    PUSH nat 2; # nat : bytes : @storage
    PUSH bytes 0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858; # bytes : nat : bytes : @storage
    SIZE;       # nat : nat : bytes : @storage
    PACK;       # bytes : nat : bytes : @storage
    SIZE;       # nat : nat : bytes : @storage
    SUB;        # int : bytes : @storage
    ISNAT;      # option nat : bytes : @storage
    IF_NONE
      {
        PUSH int 131; # int : bytes : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : bytes : @storage
    PUSH nat 2; # nat : @some : bytes : @storage
    SLICE;      # option bytes : @storage
    IF_NONE
      {
        PUSH string "Could not encode nat to bytes."; # string : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : @storage
    # while sp.len(lengthBytes.value) < 4 : ... # @some : @storage
    DUP;        # @some : @some : @storage
    SIZE;       # nat : @some : @storage
    PUSH nat 4; # nat : nat : @some : @storage
    COMPARE;    # int : @some : @storage
    GT;         # bool : @some : @storage
    LOOP
      {
        # lengthBytes.value = sp.bytes('0x00') + lengthBytes.value # @some : @storage
        PUSH bytes 0x00; # bytes : @some : @storage
        CONCAT;     # bytes : @storage
        # check for next loop: sp.len(lengthBytes.value) < 4 # bytes : @storage
        DUP;        # bytes : bytes : @storage
        SIZE;       # nat : bytes : @storage
        PUSH nat 4; # nat : nat : bytes : @storage
        COMPARE;    # int : bytes : @storage
        GT;         # bool : bytes : @storage
      }; # @some : @storage
    # sp.verify(sp.unpack(sp.concat(sp.list([sp.bytes('0x05'), sp.bytes('0x01'), lengthBytes.value, sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')])), sp.TString).open_some(message = 'Could not decode bytes to string') == 'TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') # @some : @storage
    PUSH string "TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; # string : @some : @storage
    PUSH (list bytes) {0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858}; # list bytes : string : @some : @storage
    DIG 2;      # @some : list bytes : string : @storage
    CONS;       # list bytes : string : @storage
    PUSH bytes 0x01; # bytes : list bytes : string : @storage
    CONS;       # list bytes : string : @storage
    PUSH bytes 0x05; # bytes : list bytes : string : @storage
    CONS;       # list bytes : string : @storage
    CONCAT;     # bytes : string : @storage
    UNPACK string; # option string : string : @storage
    IF_NONE
      {
        PUSH string "Could not decode bytes to string"; # string : string : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : string : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: sp.unpack(sp.concat(sp.list([sp.bytes('0x05'), sp.bytes('0x01'), lengthBytes.value, sp.bytes('0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858')])), sp.TString).open_some(message = 'Could not decode bytes to string') == 'TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # sp.verify(((sp.address('KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG') >= sp.address('tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC')) & (sp.address('KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT') <= sp.address('tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC'))) == False) # @storage
    PUSH bool False; # bool : @storage
    PUSH address "tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC"; # address : bool : @storage
    PUSH address "KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG"; # address : address : bool : @storage
    COMPARE;    # int : bool : @storage
    GE;         # bool : bool : @storage
    IF
      {
        PUSH address "tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC"; # address : bool : @storage
        PUSH address "KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT"; # address : address : bool : @storage
        COMPARE;    # int : bool : @storage
        LE;         # bool : bool : @storage
      }
      {
        PUSH bool False; # bool : bool : @storage
      }; # bool : bool : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: ((sp.address('KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG') >= sp.address('tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC')) & (sp.address('KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT') <= sp.address('tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC'))) == False"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # sp.verify((sp.address('KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG') >= sp.address('KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ')) & (sp.address('KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT') <= sp.address('KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ'))) # @storage
    PUSH address "KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ"; # address : @storage
    PUSH address "KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG"; # address : address : @storage
    COMPARE;    # int : @storage
    GE;         # bool : @storage
    IF
      {
        PUSH address "KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ"; # address : @storage
        PUSH address "KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT"; # address : address : @storage
        COMPARE;    # int : @storage
        LE;         # bool : @storage
      }
      {
        PUSH bool False; # bool : @storage
      }; # bool : @storage
    IF
      {}
      {
        PUSH string "WrongCondition: (sp.address('KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG') >= sp.address('KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ')) & (sp.address('KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT') <= sp.address('KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ'))"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };