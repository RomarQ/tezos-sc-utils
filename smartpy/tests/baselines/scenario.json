[
 {
  "shortname": "UtilsTester1_test",
  "longname": "UtilsTester1_test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"utils.py\" 154) static_id 0) \nstorage ()\nstorage_type ((unknown 3))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 42) (((\"smartpy_utils.py\" 273) define_local \"utils_18\" ((\"smartpy_utils.py\" 273) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 274) define_local \"utils_19\" ((\"smartpy_utils.py\" 274) list ) True) ((\"smartpy_utils.py\" 276) if_block ((\"smartpy_utils.py\" 276) eq ((\"smartpy_utils.py\" 276) get_local \"utils_18\") ((\"smartpy_utils.py\" 276) literal (intOrNat 0))) (((\"smartpy_utils.py\" 277) set ((\"smartpy_utils.py\" 277) get_local \"utils_19\") ((\"smartpy_utils.py\" 277) cons ((\"smartpy_utils.py\" 277) literal (string \"0\")) ((\"smartpy_utils.py\" 277) get_local \"utils_19\"))))) ((\"smartpy_utils.py\" 278) while_block ((\"smartpy_utils.py\" 278) gt ((\"smartpy_utils.py\" 278) get_local \"utils_18\") ((\"smartpy_utils.py\" 278) literal (intOrNat 0))) (((\"smartpy_utils.py\" 279) set ((\"smartpy_utils.py\" 279) get_local \"utils_19\") ((\"smartpy_utils.py\" 279) cons ((\"smartpy_utils.py\" 279) get_item ((\"smartpy_utils.py\" 271) map (((\"utils.py\" 154) literal (intOrNat 0)) ((\"utils.py\" 154) literal (string \"0\"))) (((\"utils.py\" 154) literal (intOrNat 1)) ((\"utils.py\" 154) literal (string \"1\"))) (((\"utils.py\" 154) literal (intOrNat 2)) ((\"utils.py\" 154) literal (string \"2\"))) (((\"utils.py\" 154) literal (intOrNat 3)) ((\"utils.py\" 154) literal (string \"3\"))) (((\"utils.py\" 154) literal (intOrNat 4)) ((\"utils.py\" 154) literal (string \"4\"))) (((\"utils.py\" 154) literal (intOrNat 5)) ((\"utils.py\" 154) literal (string \"5\"))) (((\"utils.py\" 154) literal (intOrNat 6)) ((\"utils.py\" 154) literal (string \"6\"))) (((\"utils.py\" 154) literal (intOrNat 7)) ((\"utils.py\" 154) literal (string \"7\"))) (((\"utils.py\" 154) literal (intOrNat 8)) ((\"utils.py\" 154) literal (string \"8\"))) (((\"utils.py\" 154) literal (intOrNat 9)) ((\"utils.py\" 154) literal (string \"9\")))) ((\"smartpy_utils.py\" 279) mod ((\"smartpy_utils.py\" 279) get_local \"utils_18\") ((\"smartpy_utils.py\" 279) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 279) get_local \"utils_19\"))) ((\"smartpy_utils.py\" 280) set ((\"utils.py\" 154) get_local \"utils_18\") ((\"smartpy_utils.py\" 280) div ((\"smartpy_utils.py\" 280) get_local \"utils_18\") ((\"smartpy_utils.py\" 280) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 282) define_local \"utils_20\" ((\"smartpy_utils.py\" 282) concat ((\"smartpy_utils.py\" 282) get_local \"utils_19\")) True) ((\"smartpy_utils.py\" 283) if_block ((\"smartpy_utils.py\" 283) literal (bool True)) (((\"smartpy_utils.py\" 284) set ((\"utils.py\" 154) get_local \"utils_20\") ((\"smartpy_utils.py\" 284) add ((\"smartpy_utils.py\" 284) literal (string \"-\")) ((\"smartpy_utils.py\" 284) get_local \"utils_20\"))))) ((\"utils.py\" 43) verify ((\"utils.py\" 43) eq ((\"smartpy_utils.py\" 286) get_local \"utils_20\") ((\"utils.py\" 43) literal (string \"-1\")))) ((\"smartpy_utils.py\" 273) define_local \"utils_21\" ((\"smartpy_utils.py\" 273) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 274) define_local \"utils_22\" ((\"smartpy_utils.py\" 274) list ) True) ((\"smartpy_utils.py\" 276) if_block ((\"smartpy_utils.py\" 276) eq ((\"smartpy_utils.py\" 276) get_local \"utils_21\") ((\"smartpy_utils.py\" 276) literal (intOrNat 0))) (((\"smartpy_utils.py\" 277) set ((\"smartpy_utils.py\" 277) get_local \"utils_22\") ((\"smartpy_utils.py\" 277) cons ((\"smartpy_utils.py\" 277) literal (string \"0\")) ((\"smartpy_utils.py\" 277) get_local \"utils_22\"))))) ((\"smartpy_utils.py\" 278) while_block ((\"smartpy_utils.py\" 278) gt ((\"smartpy_utils.py\" 278) get_local \"utils_21\") ((\"smartpy_utils.py\" 278) literal (intOrNat 0))) (((\"smartpy_utils.py\" 279) set ((\"smartpy_utils.py\" 279) get_local \"utils_22\") ((\"smartpy_utils.py\" 279) cons ((\"smartpy_utils.py\" 279) get_item ((\"smartpy_utils.py\" 271) map (((\"utils.py\" 154) literal (intOrNat 0)) ((\"utils.py\" 154) literal (string \"0\"))) (((\"utils.py\" 154) literal (intOrNat 1)) ((\"utils.py\" 154) literal (string \"1\"))) (((\"utils.py\" 154) literal (intOrNat 2)) ((\"utils.py\" 154) literal (string \"2\"))) (((\"utils.py\" 154) literal (intOrNat 3)) ((\"utils.py\" 154) literal (string \"3\"))) (((\"utils.py\" 154) literal (intOrNat 4)) ((\"utils.py\" 154) literal (string \"4\"))) (((\"utils.py\" 154) literal (intOrNat 5)) ((\"utils.py\" 154) literal (string \"5\"))) (((\"utils.py\" 154) literal (intOrNat 6)) ((\"utils.py\" 154) literal (string \"6\"))) (((\"utils.py\" 154) literal (intOrNat 7)) ((\"utils.py\" 154) literal (string \"7\"))) (((\"utils.py\" 154) literal (intOrNat 8)) ((\"utils.py\" 154) literal (string \"8\"))) (((\"utils.py\" 154) literal (intOrNat 9)) ((\"utils.py\" 154) literal (string \"9\")))) ((\"smartpy_utils.py\" 279) mod ((\"smartpy_utils.py\" 279) get_local \"utils_21\") ((\"smartpy_utils.py\" 279) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 279) get_local \"utils_22\"))) ((\"smartpy_utils.py\" 280) set ((\"utils.py\" 154) get_local \"utils_21\") ((\"smartpy_utils.py\" 280) div ((\"smartpy_utils.py\" 280) get_local \"utils_21\") ((\"smartpy_utils.py\" 280) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 282) define_local \"utils_23\" ((\"smartpy_utils.py\" 282) concat ((\"smartpy_utils.py\" 282) get_local \"utils_22\")) True) ((\"smartpy_utils.py\" 283) if_block ((\"smartpy_utils.py\" 283) literal (bool False)) (((\"smartpy_utils.py\" 284) set ((\"utils.py\" 154) get_local \"utils_23\") ((\"smartpy_utils.py\" 284) add ((\"smartpy_utils.py\" 284) literal (string \"-\")) ((\"smartpy_utils.py\" 284) get_local \"utils_23\"))))) ((\"utils.py\" 44) verify ((\"utils.py\" 44) eq ((\"smartpy_utils.py\" 286) get_local \"utils_23\") ((\"utils.py\" 44) literal (string \"1\")))) ((\"utils.py\" 45) verify ((\"utils.py\" 45) eq ((\"utils.py\" 45) call_lambda ((\"smartpy/tests/utils.py\" 10) private \"string_of_int\") ((\"utils.py\" 45) literal (intOrNat 2))) ((\"utils.py\" 45) literal (string \"2\")))) ((\"smartpy_utils.py\" 311) define_local \"utils_24\" ((\"smartpy_utils.py\" 311) literal (string \"1\")) True) ((\"smartpy_utils.py\" 312) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"smartpy_utils.py\" 221) literal (string \"1\"))) (((\"smartpy_utils.py\" 313) set ((\"utils.py\" 154) get_local \"utils_24\") ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) slice ((\"smartpy_utils.py\" 313) literal (intOrNat 1)) ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 313) size ((\"smartpy_utils.py\" 313) literal (string \"1\"))) ((\"smartpy_utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 313) literal (string \"1\"))) \"Some\" ((\"smartpy_utils.py\" 313) literal (string \"\")))))) ((\"smartpy_utils.py\" 315) define_local \"utils_25\" ((\"smartpy_utils.py\" 315) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 316) for_group \"utils_26\" ((\"smartpy_utils.py\" 316) range ((\"smartpy_utils.py\" 316) literal (intOrNat 0)) ((\"smartpy_utils.py\" 316) size ((\"smartpy_utils.py\" 316) get_local \"utils_24\")) ((\"smartpy_utils.py\" 316) literal (intOrNat 1))) (((\"smartpy_utils.py\" 317) set ((\"utils.py\" 154) get_local \"utils_25\") ((\"smartpy_utils.py\" 317) add ((\"smartpy_utils.py\" 317) mul_homo ((\"smartpy_utils.py\" 317) literal (intOrNat 10)) ((\"smartpy_utils.py\" 317) get_local \"utils_25\")) ((\"smartpy_utils.py\" 317) get_item ((\"smartpy_utils.py\" 308) map (((\"utils.py\" 154) literal (string \"0\")) ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 154) literal (string \"1\")) ((\"utils.py\" 154) literal (intOrNat 1))) (((\"utils.py\" 154) literal (string \"2\")) ((\"utils.py\" 154) literal (intOrNat 2))) (((\"utils.py\" 154) literal (string \"3\")) ((\"utils.py\" 154) literal (intOrNat 3))) (((\"utils.py\" 154) literal (string \"4\")) ((\"utils.py\" 154) literal (intOrNat 4))) (((\"utils.py\" 154) literal (string \"5\")) ((\"utils.py\" 154) literal (intOrNat 5))) (((\"utils.py\" 154) literal (string \"6\")) ((\"utils.py\" 154) literal (intOrNat 6))) (((\"utils.py\" 154) literal (string \"7\")) ((\"utils.py\" 154) literal (intOrNat 7))) (((\"utils.py\" 154) literal (string \"8\")) ((\"utils.py\" 154) literal (intOrNat 8))) (((\"utils.py\" 154) literal (string \"9\")) ((\"utils.py\" 154) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 317) open_variant ((\"smartpy_utils.py\" 317) slice ((\"smartpy_utils.py\" 316) iter \"utils_26\") ((\"smartpy_utils.py\" 317) literal (intOrNat 1)) ((\"smartpy_utils.py\" 317) get_local \"utils_24\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 319) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"smartpy_utils.py\" 221) literal (string \"1\"))) (((\"smartpy_utils.py\" 320) set ((\"utils.py\" 154) get_local \"utils_25\") ((\"smartpy_utils.py\" 320) mul_homo ((\"smartpy_utils.py\" 320) get_local \"utils_25\") ((\"smartpy_utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 47) verify ((\"utils.py\" 47) eq ((\"smartpy_utils.py\" 322) get_local \"utils_25\") ((\"utils.py\" 47) literal (intOrNat 1)))) ((\"smartpy_utils.py\" 311) define_local \"utils_27\" ((\"smartpy_utils.py\" 311) literal (string \"-1\")) True) ((\"smartpy_utils.py\" 312) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"smartpy_utils.py\" 221) literal (string \"-1\"))) (((\"smartpy_utils.py\" 313) set ((\"utils.py\" 154) get_local \"utils_27\") ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) slice ((\"smartpy_utils.py\" 313) literal (intOrNat 1)) ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 313) size ((\"smartpy_utils.py\" 313) literal (string \"-1\"))) ((\"smartpy_utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 313) literal (string \"-1\"))) \"Some\" ((\"smartpy_utils.py\" 313) literal (string \"\")))))) ((\"smartpy_utils.py\" 315) define_local \"utils_28\" ((\"smartpy_utils.py\" 315) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 316) for_group \"utils_29\" ((\"smartpy_utils.py\" 316) range ((\"smartpy_utils.py\" 316) literal (intOrNat 0)) ((\"smartpy_utils.py\" 316) size ((\"smartpy_utils.py\" 316) get_local \"utils_27\")) ((\"smartpy_utils.py\" 316) literal (intOrNat 1))) (((\"smartpy_utils.py\" 317) set ((\"utils.py\" 154) get_local \"utils_28\") ((\"smartpy_utils.py\" 317) add ((\"smartpy_utils.py\" 317) mul_homo ((\"smartpy_utils.py\" 317) literal (intOrNat 10)) ((\"smartpy_utils.py\" 317) get_local \"utils_28\")) ((\"smartpy_utils.py\" 317) get_item ((\"smartpy_utils.py\" 308) map (((\"utils.py\" 154) literal (string \"0\")) ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 154) literal (string \"1\")) ((\"utils.py\" 154) literal (intOrNat 1))) (((\"utils.py\" 154) literal (string \"2\")) ((\"utils.py\" 154) literal (intOrNat 2))) (((\"utils.py\" 154) literal (string \"3\")) ((\"utils.py\" 154) literal (intOrNat 3))) (((\"utils.py\" 154) literal (string \"4\")) ((\"utils.py\" 154) literal (intOrNat 4))) (((\"utils.py\" 154) literal (string \"5\")) ((\"utils.py\" 154) literal (intOrNat 5))) (((\"utils.py\" 154) literal (string \"6\")) ((\"utils.py\" 154) literal (intOrNat 6))) (((\"utils.py\" 154) literal (string \"7\")) ((\"utils.py\" 154) literal (intOrNat 7))) (((\"utils.py\" 154) literal (string \"8\")) ((\"utils.py\" 154) literal (intOrNat 8))) (((\"utils.py\" 154) literal (string \"9\")) ((\"utils.py\" 154) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 317) open_variant ((\"smartpy_utils.py\" 317) slice ((\"smartpy_utils.py\" 316) iter \"utils_29\") ((\"smartpy_utils.py\" 317) literal (intOrNat 1)) ((\"smartpy_utils.py\" 317) get_local \"utils_27\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 319) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"smartpy_utils.py\" 221) literal (string \"-1\"))) (((\"smartpy_utils.py\" 320) set ((\"utils.py\" 154) get_local \"utils_28\") ((\"smartpy_utils.py\" 320) mul_homo ((\"smartpy_utils.py\" 320) get_local \"utils_28\") ((\"smartpy_utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 48) verify ((\"utils.py\" 48) eq ((\"smartpy_utils.py\" 322) get_local \"utils_28\") ((\"utils.py\" 48) literal (int -1)))) ((\"utils.py\" 49) verify ((\"utils.py\" 49) eq ((\"utils.py\" 49) call_lambda ((\"smartpy/tests/utils.py\" 14) private \"int_of_string\") ((\"utils.py\" 49) literal (string \"2\"))) ((\"utils.py\" 49) literal (intOrNat 2)))) ((\"utils.py\" 326) define_local \"compute_utils_326\" ((\"utils.py\" 326) size ((\"utils.py\" 50) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 327) define_local \"utils_0\" ((\"utils.py\" 327) literal (nat 0)) True) ((\"utils.py\" 328) for_group \"utils_1\" ((\"utils.py\" 328) range ((\"utils.py\" 328) literal (intOrNat 0)) ((\"utils.py\" 326) get_local \"compute_utils_326\") ((\"utils.py\" 328) literal (intOrNat 1))) (((\"utils.py\" 329) define_local \"compute_utils_329\" ((\"utils.py\" 329) open_variant ((\"utils.py\" 329) slice ((\"utils.py\" 328) iter \"utils_1\") ((\"utils.py\" 329) literal (intOrNat 1)) ((\"utils.py\" 50) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 330) define_local \"compute_utils_330\" ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) is_nat ((\"utils.py\" 330) sub ((\"utils.py\" 326) get_local \"compute_utils_326\") ((\"utils.py\" 330) add ((\"utils.py\" 328) iter \"utils_1\") ((\"utils.py\" 330) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 330) literal (intOrNat 2))) True) ((\"utils.py\" 336) set ((\"utils.py\" 154) get_local \"utils_0\") ((\"utils.py\" 336) add ((\"utils.py\" 336) get_local \"utils_0\") ((\"utils.py\" 336) mul_homo ((\"utils.py\" 336) open_variant ((\"utils.py\" 336) is_nat ((\"utils.py\" 337) to_int ((\"utils.py\" 337) open_variant ((\"utils.py\" 337) unpack ((\"utils.py\" 335) add ((\"utils.py\" 335) add ((\"utils.py\" 335) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 329) get_local \"compute_utils_329\")) ((\"utils.py\" 335) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 330) get_local \"compute_utils_330\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 50) verify ((\"utils.py\" 50) eq ((\"utils.py\" 340) get_local \"utils_0\") ((\"utils.py\" 50) literal (intOrNat 256)))) ((\"utils.py\" 51) verify ((\"utils.py\" 51) eq ((\"utils.py\" 51) call_lambda ((\"smartpy/tests/utils.py\" 18) private \"int_of_bytes\") ((\"utils.py\" 51) literal (bytes \"0x0100\"))) ((\"utils.py\" 51) literal (intOrNat 256)))) ((\"smartpy_utils.py\" 258) define_local \"utils_30\" ((\"smartpy_utils.py\" 258) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 259) define_local \"utils_31\" ((\"smartpy_utils.py\" 259) list ) True) ((\"smartpy_utils.py\" 260) for_group \"utils_32\" ((\"smartpy_utils.py\" 260) range ((\"smartpy_utils.py\" 260) literal (intOrNat 0)) ((\"smartpy_utils.py\" 260) size ((\"smartpy_utils.py\" 260) literal (string \"a b\"))) ((\"smartpy_utils.py\" 260) literal (intOrNat 1))) (((\"smartpy_utils.py\" 261) if_block ((\"smartpy_utils.py\" 261) eq ((\"smartpy_utils.py\" 261) open_variant ((\"smartpy_utils.py\" 261) slice ((\"smartpy_utils.py\" 260) iter \"utils_32\") ((\"smartpy_utils.py\" 261) literal (intOrNat 1)) ((\"smartpy_utils.py\" 261) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 261) literal (string \" \"))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_31\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) slice ((\"smartpy_utils.py\" 262) get_local \"utils_30\") ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) is_nat ((\"smartpy_utils.py\" 262) sub ((\"smartpy_utils.py\" 260) iter \"utils_32\") ((\"smartpy_utils.py\" 262) get_local \"utils_30\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) get_local \"utils_31\"))) ((\"smartpy_utils.py\" 263) set ((\"utils.py\" 154) get_local \"utils_30\") ((\"smartpy_utils.py\" 263) add ((\"smartpy_utils.py\" 260) iter \"utils_32\") ((\"smartpy_utils.py\" 263) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 264) if_block ((\"smartpy_utils.py\" 264) gt ((\"smartpy_utils.py\" 264) size ((\"smartpy_utils.py\" 264) literal (string \"a b\"))) ((\"smartpy_utils.py\" 264) literal (intOrNat 0))) (((\"smartpy_utils.py\" 265) set ((\"smartpy_utils.py\" 265) get_local \"utils_31\") ((\"smartpy_utils.py\" 265) cons ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) slice ((\"smartpy_utils.py\" 265) get_local \"utils_30\") ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) is_nat ((\"smartpy_utils.py\" 265) sub ((\"smartpy_utils.py\" 265) size ((\"smartpy_utils.py\" 265) literal (string \"a b\"))) ((\"smartpy_utils.py\" 265) get_local \"utils_30\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) get_local \"utils_31\"))))) ((\"utils.py\" 53) verify ((\"utils.py\" 53) eq ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"smartpy_utils.py\" 266) rev ((\"smartpy_utils.py\" 266) get_local \"utils_31\")) (unknown 45))) ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"utils.py\" 53) list ((\"utils.py\" 53) literal (string \"a\")) ((\"utils.py\" 53) literal (string \"b\"))) (unknown 45))))) ((\"smartpy_utils.py\" 258) define_local \"utils_33\" ((\"smartpy_utils.py\" 258) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 259) define_local \"utils_34\" ((\"smartpy_utils.py\" 259) list ) True) ((\"smartpy_utils.py\" 260) for_group \"utils_35\" ((\"smartpy_utils.py\" 260) range ((\"smartpy_utils.py\" 260) literal (intOrNat 0)) ((\"smartpy_utils.py\" 260) size ((\"smartpy_utils.py\" 260) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 260) literal (intOrNat 1))) (((\"smartpy_utils.py\" 261) if_block ((\"smartpy_utils.py\" 261) eq ((\"smartpy_utils.py\" 261) open_variant ((\"smartpy_utils.py\" 261) slice ((\"smartpy_utils.py\" 260) iter \"utils_35\") ((\"smartpy_utils.py\" 261) literal (intOrNat 1)) ((\"smartpy_utils.py\" 261) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 261) literal (string \",\"))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_34\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) slice ((\"smartpy_utils.py\" 262) get_local \"utils_33\") ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) is_nat ((\"smartpy_utils.py\" 262) sub ((\"smartpy_utils.py\" 260) iter \"utils_35\") ((\"smartpy_utils.py\" 262) get_local \"utils_33\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) get_local \"utils_34\"))) ((\"smartpy_utils.py\" 263) set ((\"utils.py\" 154) get_local \"utils_33\") ((\"smartpy_utils.py\" 263) add ((\"smartpy_utils.py\" 260) iter \"utils_35\") ((\"smartpy_utils.py\" 263) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 264) if_block ((\"smartpy_utils.py\" 264) gt ((\"smartpy_utils.py\" 264) size ((\"smartpy_utils.py\" 264) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 264) literal (intOrNat 0))) (((\"smartpy_utils.py\" 265) set ((\"smartpy_utils.py\" 265) get_local \"utils_34\") ((\"smartpy_utils.py\" 265) cons ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) slice ((\"smartpy_utils.py\" 265) get_local \"utils_33\") ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) is_nat ((\"smartpy_utils.py\" 265) sub ((\"smartpy_utils.py\" 265) size ((\"smartpy_utils.py\" 265) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 265) get_local \"utils_33\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) get_local \"utils_34\"))))) ((\"utils.py\" 54) verify ((\"utils.py\" 54) eq ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"smartpy_utils.py\" 266) rev ((\"smartpy_utils.py\" 266) get_local \"utils_34\")) (unknown 48))) ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"utils.py\" 54) list ((\"utils.py\" 54) literal (string \"b\")) ((\"utils.py\" 54) literal (string \"a\"))) (unknown 48))))) ((\"utils.py\" 55) verify ((\"utils.py\" 55) eq ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) call_lambda ((\"smartpy/tests/utils.py\" 22) private \"string_split\") ((\"utils.py\" 55) record (separator ((\"utils.py\" 55) literal (string \",,\"))) (text ((\"utils.py\" 55) literal (string \"a,b\"))))) (unknown 49))) ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) list ((\"utils.py\" 55) literal (string \"a,b\"))) (unknown 49))))) ((\"utils.py\" 57) verify ((\"utils.py\" 57) eq ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"a\")) ((\"smartpy_utils.py\" 221) literal (string \"abc\"))) ((\"utils.py\" 57) literal (bool True)))) ((\"utils.py\" 58) verify ((\"utils.py\" 58) eq ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"b\")) ((\"smartpy_utils.py\" 221) literal (string \"abc\"))) ((\"utils.py\" 58) literal (bool False)))) ((\"utils.py\" 59) verify ((\"utils.py\" 59) eq ((\"utils.py\" 59) call_lambda ((\"smartpy/tests/utils.py\" 26) private \"string_starts_with\") ((\"utils.py\" 59) record (prefix ((\"utils.py\" 59) literal (string \"a\"))) (text ((\"utils.py\" 59) literal (string \"abc\"))))) ((\"utils.py\" 59) literal (bool True)))) ((\"utils.py\" 61) verify ((\"utils.py\" 61) eq ((\"smartpy_utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 162) literal (string \"abc\")) ((\"smartpy_utils.py\" 162) literal (string \"c\"))) ((\"utils.py\" 61) literal (bool True)))) ((\"utils.py\" 62) verify ((\"utils.py\" 62) eq ((\"smartpy_utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 162) literal (string \"abc\")) ((\"smartpy_utils.py\" 162) literal (string \"b\"))) ((\"utils.py\" 62) literal (bool False)))) ((\"utils.py\" 63) verify ((\"utils.py\" 63) eq ((\"utils.py\" 63) call_lambda ((\"smartpy/tests/utils.py\" 30) private \"string_ends_with\") ((\"utils.py\" 63) record (postfix ((\"utils.py\" 63) literal (string \"c\"))) (text ((\"utils.py\" 63) literal (string \"abc\"))))) ((\"utils.py\" 63) literal (bool True)))) ((\"smartpy_utils.py\" 83) define_local \"utils_36_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_37_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3)) ((\"smartpy_utils.py\" 84) literal (intOrNat 4)) ((\"smartpy_utils.py\" 84) literal (intOrNat 5))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_36_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_37_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_36_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_37_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_36_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_37_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_36_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_37_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)) ((\"smartpy_utils.py\" 90) literal (intOrNat 4)) ((\"smartpy_utils.py\" 90) literal (intOrNat 5)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_38_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_39_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_40_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_39_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_41_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_42_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_36_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_40_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_39_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 154) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 154) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_39_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 154) get_local \"utils_40_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 154) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 154) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 154) get_local \"utils_40_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 154) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_39_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 154) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 154) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"value\"))))))))) ((\"utils.py\" 65) verify ((\"utils.py\" 65) eq ((\"smartpy_utils.py\" 112) get_local \"utils_38_result\") ((\"utils.py\" 65) literal (intOrNat 3)))) ((\"smartpy_utils.py\" 83) define_local \"utils_43_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_44_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_43_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_44_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_43_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_44_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_43_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_44_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_43_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_44_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90i\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_45_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_46_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_47_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_46_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_48_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_49_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_43_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_47_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_46_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 154) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 154) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_46_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 154) get_local \"utils_47_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 154) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 154) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 154) get_local \"utils_47_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 154) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_46_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 154) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 154) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"value\"))))))))) ((\"utils.py\" 66) verify ((\"utils.py\" 66) eq ((\"smartpy_utils.py\" 112) get_local \"utils_45_result\") ((\"utils.py\" 66) literal (intOrNat 2)))) ((\"utils.py\" 67) verify ((\"utils.py\" 67) eq ((\"utils.py\" 67) call_lambda ((\"smartpy/tests/utils.py\" 38) private \"math_median\") ((\"utils.py\" 67) list ((\"utils.py\" 67) literal (intOrNat 1)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 5)))) ((\"utils.py\" 67) literal (intOrNat 2)))) ((\"utils.py\" 118) define_local \"compute_utils_118\" ((\"utils.py\" 118) sub ((\"utils.py\" 118) literal (intOrNat 3)) ((\"utils.py\" 118) size ((\"utils.py\" 69) literal (bytes \"0x11\")))) True) ((\"utils.py\" 119) define_local \"utils_2_bytes\" ((\"utils.py\" 119) literal (bytes \"0x\")) True) ((\"utils.py\" 120) while_block ((\"utils.py\" 120) lt ((\"utils.py\" 120) size ((\"utils.py\" 120) get_local \"utils_2_bytes\")) ((\"utils.py\" 118) open_variant ((\"utils.py\" 118) is_nat ((\"utils.py\" 118) get_local \"compute_utils_118\")) \"Some\" \"None\")) (((\"utils.py\" 121) set ((\"utils.py\" 154) get_local \"utils_2_bytes\") ((\"utils.py\" 121) add ((\"utils.py\" 69) literal (bytes \"0x00\")) ((\"utils.py\" 121) get_local \"utils_2_bytes\"))))) ((\"utils.py\" 69) verify ((\"utils.py\" 69) eq ((\"utils.py\" 122) add ((\"utils.py\" 122) get_local \"utils_2_bytes\") ((\"utils.py\" 69) literal (bytes \"0x11\"))) ((\"utils.py\" 69) literal (bytes \"0x000011\")))) ((\"utils.py\" 126) define_local \"compute_utils_126\" ((\"utils.py\" 126) sub ((\"utils.py\" 126) literal (intOrNat 3)) ((\"utils.py\" 126) size ((\"utils.py\" 70) literal (bytes \"0x11\")))) True) ((\"utils.py\" 127) define_local \"utils_3_bytes\" ((\"utils.py\" 127) literal (bytes \"0x\")) True) ((\"utils.py\" 128) while_block ((\"utils.py\" 128) lt ((\"utils.py\" 128) size ((\"utils.py\" 128) get_local \"utils_3_bytes\")) ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) is_nat ((\"utils.py\" 126) get_local \"compute_utils_126\")) \"Some\" \"None\")) (((\"utils.py\" 129) set ((\"utils.py\" 154) get_local \"utils_3_bytes\") ((\"utils.py\" 129) add ((\"utils.py\" 70) literal (bytes \"0x00\")) ((\"utils.py\" 129) get_local \"utils_3_bytes\"))))) ((\"utils.py\" 70) verify ((\"utils.py\" 70) eq ((\"utils.py\" 130) add ((\"utils.py\" 70) literal (bytes \"0x11\")) ((\"utils.py\" 130) get_local \"utils_3_bytes\")) ((\"utils.py\" 70) literal (bytes \"0x110000\")))) ((\"smartpy_utils.py\" 148) verify ((\"smartpy_utils.py\" 148) literal (bool True)) ((\"smartpy_utils.py\" 148) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 150) define_local \"utils_50_bytes\" ((\"smartpy_utils.py\" 150) literal (bytes \"0x\")) True) ((\"smartpy_utils.py\" 151) define_local \"utils_51_value\" ((\"smartpy_utils.py\" 151) literal (intOrNat 54)) True) ((\"smartpy_utils.py\" 152) while_block ((\"smartpy_utils.py\" 152) neq ((\"smartpy_utils.py\" 152) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 152) literal (intOrNat 0))) (((\"smartpy_utils.py\" 153) set ((\"utils.py\" 154) get_local \"utils_50_bytes\") ((\"smartpy_utils.py\" 153) add ((\"smartpy_utils.py\" 143) open_variant ((\"smartpy_utils.py\" 143) slice ((\"smartpy_utils.py\" 143) literal (intOrNat 6)) ((\"smartpy_utils.py\" 143) literal (intOrNat 1)) ((\"smartpy_utils.py\" 143) pack ((\"smartpy_utils.py\" 143) MUL ((\"smartpy_utils.py\" 143) to_int ((\"smartpy_utils.py\" 153) get_local \"utils_51_value\")) ((\"smartpy_utils.py\" 143) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 153) get_local \"utils_50_bytes\"))) ((\"smartpy_utils.py\" 154) set ((\"utils.py\" 154) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 154) lsr ((\"smartpy_utils.py\" 154) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 154) literal (intOrNat 8)))))) ((\"utils.py\" 71) verify ((\"utils.py\" 71) eq ((\"smartpy_utils.py\" 156) get_local \"utils_50_bytes\") ((\"utils.py\" 71) literal (bytes \"0x36\")))) ((\"utils.py\" 72) verify ((\"utils.py\" 72) eq ((\"smartpy_utils.py\" 139) open_variant ((\"smartpy_utils.py\" 139) slice ((\"smartpy_utils.py\" 139) literal (intOrNat 6)) ((\"smartpy_utils.py\" 139) open_variant ((\"smartpy_utils.py\" 139) is_nat ((\"smartpy_utils.py\" 139) sub ((\"smartpy_utils.py\" 139) size ((\"smartpy_utils.py\" 134) pack ((\"smartpy_utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"smartpy_utils.py\" 139) literal (intOrNat 6)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 134) pack ((\"smartpy_utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"smartpy_utils.py\" 139) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 72) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"smartpy_utils.py\" 148) verify ((\"smartpy_utils.py\" 148) lt ((\"smartpy_utils.py\" 292) size ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) ((\"smartpy_utils.py\" 148) literal (intOrNat 28948022309329048855892746252171976963317496166410141009864396001978282409984))) ((\"smartpy_utils.py\" 148) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 150) define_local \"utils_52_bytes\" ((\"smartpy_utils.py\" 150) literal (bytes \"0x\")) True) ((\"smartpy_utils.py\" 151) define_local \"utils_53_value\" ((\"smartpy_utils.py\" 292) size ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) True) ((\"smartpy_utils.py\" 152) while_block ((\"smartpy_utils.py\" 152) neq ((\"smartpy_utils.py\" 152) get_local \"utils_53_value\") ((\"smartpy_utils.py\" 152) literal (intOrNat 0))) (((\"smartpy_utils.py\" 153) set ((\"utils.py\" 154) get_local \"utils_52_bytes\") ((\"smartpy_utils.py\" 153) add ((\"smartpy_utils.py\" 143) open_variant ((\"smartpy_utils.py\" 143) slice ((\"smartpy_utils.py\" 143) literal (intOrNat 6)) ((\"smartpy_utils.py\" 143) literal (intOrNat 1)) ((\"smartpy_utils.py\" 143) pack ((\"smartpy_utils.py\" 143) MUL ((\"smartpy_utils.py\" 143) to_int ((\"smartpy_utils.py\" 153) get_local \"utils_53_value\")) ((\"smartpy_utils.py\" 143) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 153) get_local \"utils_52_bytes\"))) ((\"smartpy_utils.py\" 154) set ((\"utils.py\" 154) get_local \"utils_53_value\") ((\"smartpy_utils.py\" 154) lsr ((\"smartpy_utils.py\" 154) get_local \"utils_53_value\") ((\"smartpy_utils.py\" 154) literal (intOrNat 8)))))) ((\"smartpy_utils.py\" 292) define_local \"lengthBytes\" ((\"smartpy_utils.py\" 156) get_local \"utils_52_bytes\") True) ((\"smartpy_utils.py\" 293) while_block ((\"smartpy_utils.py\" 293) lt ((\"smartpy_utils.py\" 293) size ((\"smartpy_utils.py\" 293) get_local \"lengthBytes\")) ((\"smartpy_utils.py\" 293) literal (intOrNat 4))) (((\"smartpy_utils.py\" 294) set ((\"utils.py\" 154) get_local \"lengthBytes\") ((\"smartpy_utils.py\" 294) add ((\"smartpy_utils.py\" 294) literal (bytes \"0x00\")) ((\"smartpy_utils.py\" 294) get_local \"lengthBytes\"))))) ((\"utils.py\" 73) verify ((\"utils.py\" 73) eq ((\"smartpy_utils.py\" 301) open_variant ((\"smartpy_utils.py\" 301) unpack ((\"smartpy_utils.py\" 300) concat ((\"smartpy_utils.py\" 300) list ((\"smartpy_utils.py\" 300) literal (bytes \"0x05\")) ((\"smartpy_utils.py\" 300) literal (bytes \"0x01\")) ((\"smartpy_utils.py\" 300) get_local \"lengthBytes\") ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"smartpy_utils.py\" 301) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 73) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 75) verify ((\"utils.py\" 75) eq ((\"smartpy_utils.py\" 346) and ((\"smartpy_utils.py\" 346) ge ((\"smartpy_utils.py\" 346) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 75) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"smartpy_utils.py\" 346) le ((\"smartpy_utils.py\" 346) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 75) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 75) literal (bool False)))) ((\"utils.py\" 76) verify ((\"smartpy_utils.py\" 346) and ((\"smartpy_utils.py\" 346) ge ((\"smartpy_utils.py\" 346) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 76) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"smartpy_utils.py\" 346) le ((\"smartpy_utils.py\" 346) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 76) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"utils.py\" 154) lambda 0 None False None \"\" (((\"smartpy_utils.py\" 326) define_local \"compute_smartpy_utils_326\" ((\"smartpy_utils.py\" 326) size ((\"utils.py\" 154) lambda_params 0 \"\" (unknown 4))) True) ((\"smartpy_utils.py\" 327) define_local \"utils_0\" ((\"smartpy_utils.py\" 327) literal (nat 0)) True) ((\"smartpy_utils.py\" 328) for_group \"utils_1\" ((\"smartpy_utils.py\" 328) range ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) ((\"smartpy_utils.py\" 326) get_local \"compute_smartpy_utils_326\") ((\"smartpy_utils.py\" 328) literal (intOrNat 1))) (((\"smartpy_utils.py\" 329) define_local \"compute_smartpy_utils_329\" ((\"smartpy_utils.py\" 329) open_variant ((\"smartpy_utils.py\" 329) slice ((\"smartpy_utils.py\" 328) iter \"utils_1\") ((\"smartpy_utils.py\" 329) literal (intOrNat 1)) ((\"utils.py\" 154) lambda_params 0 \"\" (unknown 4))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 330) define_local \"compute_smartpy_utils_330\" ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) is_nat ((\"smartpy_utils.py\" 330) sub ((\"smartpy_utils.py\" 326) get_local \"compute_smartpy_utils_326\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 328) iter \"utils_1\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 330) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 336) set ((\"utils.py\" 154) get_local \"utils_0\") ((\"smartpy_utils.py\" 336) add ((\"smartpy_utils.py\" 336) get_local \"utils_0\") ((\"smartpy_utils.py\" 336) mul_homo ((\"smartpy_utils.py\" 336) open_variant ((\"smartpy_utils.py\" 336) is_nat ((\"smartpy_utils.py\" 337) to_int ((\"smartpy_utils.py\" 337) open_variant ((\"smartpy_utils.py\" 337) unpack ((\"smartpy_utils.py\" 335) add ((\"smartpy_utils.py\" 335) add ((\"smartpy_utils.py\" 335) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 329) get_local \"compute_smartpy_utils_329\")) ((\"smartpy_utils.py\" 335) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 330) get_local \"compute_smartpy_utils_330\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 19) result ((\"smartpy_utils.py\" 340) get_local \"utils_0\"))))) (int_of_string ((\"utils.py\" 154) lambda 1 None False None \"\" (((\"smartpy_utils.py\" 311) define_local \"utils_2\" ((\"utils.py\" 154) lambda_params 1 \"\" (unknown 9)) True) ((\"smartpy_utils.py\" 312) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 154) lambda_params 1 \"\" (unknown 9))) (((\"smartpy_utils.py\" 313) set ((\"utils.py\" 154) get_local \"utils_2\") ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) slice ((\"smartpy_utils.py\" 313) literal (intOrNat 1)) ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 313) size ((\"utils.py\" 154) lambda_params 1 \"\" (unknown 9))) ((\"smartpy_utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 154) lambda_params 1 \"\" (unknown 9))) \"Some\" ((\"smartpy_utils.py\" 313) literal (string \"\")))))) ((\"smartpy_utils.py\" 315) define_local \"utils_3\" ((\"smartpy_utils.py\" 315) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 316) for_group \"utils_4\" ((\"smartpy_utils.py\" 316) range ((\"smartpy_utils.py\" 316) literal (intOrNat 0)) ((\"smartpy_utils.py\" 316) size ((\"smartpy_utils.py\" 316) get_local \"utils_2\")) ((\"smartpy_utils.py\" 316) literal (intOrNat 1))) (((\"smartpy_utils.py\" 317) set ((\"utils.py\" 154) get_local \"utils_3\") ((\"smartpy_utils.py\" 317) add ((\"smartpy_utils.py\" 317) mul_homo ((\"smartpy_utils.py\" 317) literal (intOrNat 10)) ((\"smartpy_utils.py\" 317) get_local \"utils_3\")) ((\"smartpy_utils.py\" 317) get_item ((\"smartpy_utils.py\" 308) map (((\"utils.py\" 154) literal (string \"0\")) ((\"utils.py\" 154) literal (intOrNat 0))) (((\"utils.py\" 154) literal (string \"1\")) ((\"utils.py\" 154) literal (intOrNat 1))) (((\"utils.py\" 154) literal (string \"2\")) ((\"utils.py\" 154) literal (intOrNat 2))) (((\"utils.py\" 154) literal (string \"3\")) ((\"utils.py\" 154) literal (intOrNat 3))) (((\"utils.py\" 154) literal (string \"4\")) ((\"utils.py\" 154) literal (intOrNat 4))) (((\"utils.py\" 154) literal (string \"5\")) ((\"utils.py\" 154) literal (intOrNat 5))) (((\"utils.py\" 154) literal (string \"6\")) ((\"utils.py\" 154) literal (intOrNat 6))) (((\"utils.py\" 154) literal (string \"7\")) ((\"utils.py\" 154) literal (intOrNat 7))) (((\"utils.py\" 154) literal (string \"8\")) ((\"utils.py\" 154) literal (intOrNat 8))) (((\"utils.py\" 154) literal (string \"9\")) ((\"utils.py\" 154) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 317) open_variant ((\"smartpy_utils.py\" 317) slice ((\"smartpy_utils.py\" 316) iter \"utils_4\") ((\"smartpy_utils.py\" 317) literal (intOrNat 1)) ((\"smartpy_utils.py\" 317) get_local \"utils_2\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 319) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 154) lambda_params 1 \"\" (unknown 9))) (((\"smartpy_utils.py\" 320) set ((\"utils.py\" 154) get_local \"utils_3\") ((\"smartpy_utils.py\" 320) mul_homo ((\"smartpy_utils.py\" 320) get_local \"utils_3\") ((\"smartpy_utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 15) result ((\"smartpy_utils.py\" 322) get_local \"utils_3\"))))) (math_median ((\"utils.py\" 154) lambda 2 None False None \"\" (((\"smartpy_utils.py\" 83) define_local \"utils_5_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_6_x\" ((\"utils.py\" 154) lambda_params 2 \"\" (unknown 12)) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_5_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_6_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_5_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_6_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_5_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_6_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_5_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_6_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"utils.py\" 154) lambda_params 2 \"\" (unknown 12))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_7_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_8_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_9_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_8_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_10_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_11_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_5_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_9_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_8_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 154) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 154) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_8_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 154) get_local \"utils_9_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 154) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 154) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 154) get_local \"utils_9_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 154) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_8_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 154) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 154) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"value\"))))))))) ((\"utils.py\" 39) result ((\"smartpy_utils.py\" 112) get_local \"utils_7_result\"))))) (math_pow ((\"utils.py\" 154) lambda 3 None False None \"\" (((\"utils.py\" 35) result ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 35) attr ((\"utils.py\" 154) lambda_params 3 \"\" (unknown 19)) \"exponent\") ((\"utils.py\" 35) attr ((\"utils.py\" 154) lambda_params 3 \"\" (unknown 19)) \"base\") ((\"smartpy_utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"utils.py\" 154) lambda 4 None False None \"\" (((\"utils.py\" 31) result ((\"smartpy_utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 31) attr ((\"utils.py\" 154) lambda_params 4 \"\" (unknown 20)) \"text\") ((\"utils.py\" 31) attr ((\"utils.py\" 154) lambda_params 4 \"\" (unknown 20)) \"postfix\")))))) (string_of_int ((\"utils.py\" 154) lambda 5 None False None \"\" (((\"smartpy_utils.py\" 273) define_local \"utils_12\" ((\"smartpy_utils.py\" 273) abs ((\"utils.py\" 154) lambda_params 5 \"\" (unknown 21))) True) ((\"smartpy_utils.py\" 274) define_local \"utils_13\" ((\"smartpy_utils.py\" 274) list ) True) ((\"smartpy_utils.py\" 276) if_block ((\"smartpy_utils.py\" 276) eq ((\"smartpy_utils.py\" 276) get_local \"utils_12\") ((\"smartpy_utils.py\" 276) literal (intOrNat 0))) (((\"smartpy_utils.py\" 277) set ((\"smartpy_utils.py\" 277) get_local \"utils_13\") ((\"smartpy_utils.py\" 277) cons ((\"smartpy_utils.py\" 277) literal (string \"0\")) ((\"smartpy_utils.py\" 277) get_local \"utils_13\"))))) ((\"smartpy_utils.py\" 278) while_block ((\"smartpy_utils.py\" 278) gt ((\"smartpy_utils.py\" 278) get_local \"utils_12\") ((\"smartpy_utils.py\" 278) literal (intOrNat 0))) (((\"smartpy_utils.py\" 279) set ((\"smartpy_utils.py\" 279) get_local \"utils_13\") ((\"smartpy_utils.py\" 279) cons ((\"smartpy_utils.py\" 279) get_item ((\"smartpy_utils.py\" 271) map (((\"utils.py\" 154) literal (intOrNat 0)) ((\"utils.py\" 154) literal (string \"0\"))) (((\"utils.py\" 154) literal (intOrNat 1)) ((\"utils.py\" 154) literal (string \"1\"))) (((\"utils.py\" 154) literal (intOrNat 2)) ((\"utils.py\" 154) literal (string \"2\"))) (((\"utils.py\" 154) literal (intOrNat 3)) ((\"utils.py\" 154) literal (string \"3\"))) (((\"utils.py\" 154) literal (intOrNat 4)) ((\"utils.py\" 154) literal (string \"4\"))) (((\"utils.py\" 154) literal (intOrNat 5)) ((\"utils.py\" 154) literal (string \"5\"))) (((\"utils.py\" 154) literal (intOrNat 6)) ((\"utils.py\" 154) literal (string \"6\"))) (((\"utils.py\" 154) literal (intOrNat 7)) ((\"utils.py\" 154) literal (string \"7\"))) (((\"utils.py\" 154) literal (intOrNat 8)) ((\"utils.py\" 154) literal (string \"8\"))) (((\"utils.py\" 154) literal (intOrNat 9)) ((\"utils.py\" 154) literal (string \"9\")))) ((\"smartpy_utils.py\" 279) mod ((\"smartpy_utils.py\" 279) get_local \"utils_12\") ((\"smartpy_utils.py\" 279) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 279) get_local \"utils_13\"))) ((\"smartpy_utils.py\" 280) set ((\"utils.py\" 154) get_local \"utils_12\") ((\"smartpy_utils.py\" 280) div ((\"smartpy_utils.py\" 280) get_local \"utils_12\") ((\"smartpy_utils.py\" 280) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 282) define_local \"utils_14\" ((\"smartpy_utils.py\" 282) concat ((\"smartpy_utils.py\" 282) get_local \"utils_13\")) True) ((\"smartpy_utils.py\" 283) if_block ((\"smartpy_utils.py\" 272) lt ((\"utils.py\" 154) lambda_params 5 \"\" (unknown 21)) ((\"smartpy_utils.py\" 272) literal (intOrNat 0))) (((\"smartpy_utils.py\" 284) set ((\"utils.py\" 154) get_local \"utils_14\") ((\"smartpy_utils.py\" 284) add ((\"smartpy_utils.py\" 284) literal (string \"-\")) ((\"smartpy_utils.py\" 284) get_local \"utils_14\"))))) ((\"utils.py\" 11) result ((\"smartpy_utils.py\" 286) get_local \"utils_14\"))))) (string_split ((\"utils.py\" 154) lambda 6 None False None \"\" (((\"smartpy_utils.py\" 258) define_local \"utils_15\" ((\"smartpy_utils.py\" 258) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 259) define_local \"utils_16\" ((\"smartpy_utils.py\" 259) list ) True) ((\"smartpy_utils.py\" 260) for_group \"utils_17\" ((\"smartpy_utils.py\" 260) range ((\"smartpy_utils.py\" 260) literal (intOrNat 0)) ((\"smartpy_utils.py\" 260) size ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params 6 \"\" (unknown 25)) \"text\")) ((\"smartpy_utils.py\" 260) literal (intOrNat 1))) (((\"smartpy_utils.py\" 261) if_block ((\"smartpy_utils.py\" 261) eq ((\"smartpy_utils.py\" 261) open_variant ((\"smartpy_utils.py\" 261) slice ((\"smartpy_utils.py\" 260) iter \"utils_17\") ((\"smartpy_utils.py\" 261) literal (intOrNat 1)) ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params 6 \"\" (unknown 25)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params 6 \"\" (unknown 25)) \"separator\")) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_16\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) slice ((\"smartpy_utils.py\" 262) get_local \"utils_15\") ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) is_nat ((\"smartpy_utils.py\" 262) sub ((\"smartpy_utils.py\" 260) iter \"utils_17\") ((\"smartpy_utils.py\" 262) get_local \"utils_15\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params 6 \"\" (unknown 25)) \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) get_local \"utils_16\"))) ((\"smartpy_utils.py\" 263) set ((\"utils.py\" 154) get_local \"utils_15\") ((\"smartpy_utils.py\" 263) add ((\"smartpy_utils.py\" 260) iter \"utils_17\") ((\"smartpy_utils.py\" 263) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 264) if_block ((\"smartpy_utils.py\" 264) gt ((\"smartpy_utils.py\" 264) size ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params 6 \"\" (unknown 25)) \"text\")) ((\"smartpy_utils.py\" 264) literal (intOrNat 0))) (((\"smartpy_utils.py\" 265) set ((\"smartpy_utils.py\" 265) get_local \"utils_16\") ((\"smartpy_utils.py\" 265) cons ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) slice ((\"smartpy_utils.py\" 265) get_local \"utils_15\") ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) is_nat ((\"smartpy_utils.py\" 265) sub ((\"smartpy_utils.py\" 265) size ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params 6 \"\" (unknown 25)) \"text\")) ((\"smartpy_utils.py\" 265) get_local \"utils_15\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 154) lambda_params 6 \"\" (unknown 25)) \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) get_local \"utils_16\"))))) ((\"utils.py\" 23) result ((\"smartpy_utils.py\" 266) rev ((\"smartpy_utils.py\" 266) get_local \"utils_16\")))))) (string_starts_with ((\"utils.py\" 154) lambda 7 None False None \"\" (((\"utils.py\" 27) result ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 27) attr ((\"utils.py\" 154) lambda_params 7 \"\" (unknown 28)) \"prefix\") ((\"utils.py\" 27) attr ((\"utils.py\" 154) lambda_params 7 \"\" (unknown 28)) \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"utils.py\" 154) static_id 0)",
    "line_no": "(\"utils.py\" 154)",
    "show": true
   },
   {
    "action": "message",
    "id": "((\"utils.py\" 154) static_id 0)",
    "line_no": "(\"utils.py\" 156)",
    "message": "test",
    "params": "((\"utils.py\" 156) record )"
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "UtilsTester2_test",
  "longname": "UtilsTester2_test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"utils.py\" 163) static_id 0) \nstorage ()\nstorage_type ((unknown 71))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 113) (((\"utils.py\" 273) define_local \"utils_20\" ((\"utils.py\" 273) literal (intOrNat 1)) True) ((\"utils.py\" 274) define_local \"utils_21\" ((\"utils.py\" 274) list ) True) ((\"utils.py\" 276) if_block ((\"utils.py\" 276) eq ((\"utils.py\" 276) get_local \"utils_20\") ((\"utils.py\" 276) literal (intOrNat 0))) (((\"utils.py\" 277) set ((\"utils.py\" 277) get_local \"utils_21\") ((\"utils.py\" 277) cons ((\"utils.py\" 277) literal (string \"0\")) ((\"utils.py\" 277) get_local \"utils_21\"))))) ((\"utils.py\" 278) while_block ((\"utils.py\" 278) gt ((\"utils.py\" 278) get_local \"utils_20\") ((\"utils.py\" 278) literal (intOrNat 0))) (((\"utils.py\" 279) set ((\"utils.py\" 279) get_local \"utils_21\") ((\"utils.py\" 279) cons ((\"utils.py\" 279) get_item ((\"utils.py\" 271) map (((\"utils.py\" 163) literal (intOrNat 0)) ((\"utils.py\" 163) literal (string \"0\"))) (((\"utils.py\" 163) literal (intOrNat 1)) ((\"utils.py\" 163) literal (string \"1\"))) (((\"utils.py\" 163) literal (intOrNat 2)) ((\"utils.py\" 163) literal (string \"2\"))) (((\"utils.py\" 163) literal (intOrNat 3)) ((\"utils.py\" 163) literal (string \"3\"))) (((\"utils.py\" 163) literal (intOrNat 4)) ((\"utils.py\" 163) literal (string \"4\"))) (((\"utils.py\" 163) literal (intOrNat 5)) ((\"utils.py\" 163) literal (string \"5\"))) (((\"utils.py\" 163) literal (intOrNat 6)) ((\"utils.py\" 163) literal (string \"6\"))) (((\"utils.py\" 163) literal (intOrNat 7)) ((\"utils.py\" 163) literal (string \"7\"))) (((\"utils.py\" 163) literal (intOrNat 8)) ((\"utils.py\" 163) literal (string \"8\"))) (((\"utils.py\" 163) literal (intOrNat 9)) ((\"utils.py\" 163) literal (string \"9\")))) ((\"utils.py\" 279) mod ((\"utils.py\" 279) get_local \"utils_20\") ((\"utils.py\" 279) literal (intOrNat 10)))) ((\"utils.py\" 279) get_local \"utils_21\"))) ((\"utils.py\" 280) set ((\"utils.py\" 163) get_local \"utils_20\") ((\"utils.py\" 280) div ((\"utils.py\" 280) get_local \"utils_20\") ((\"utils.py\" 280) literal (intOrNat 10)))))) ((\"utils.py\" 282) define_local \"utils_22\" ((\"utils.py\" 282) concat ((\"utils.py\" 282) get_local \"utils_21\")) True) ((\"utils.py\" 283) if_block ((\"utils.py\" 283) literal (bool True)) (((\"utils.py\" 284) set ((\"utils.py\" 163) get_local \"utils_22\") ((\"utils.py\" 284) add ((\"utils.py\" 284) literal (string \"-\")) ((\"utils.py\" 284) get_local \"utils_22\"))))) ((\"utils.py\" 114) verify ((\"utils.py\" 114) eq ((\"utils.py\" 286) get_local \"utils_22\") ((\"utils.py\" 114) literal (string \"-1\")))) ((\"utils.py\" 273) define_local \"utils_23\" ((\"utils.py\" 273) literal (intOrNat 1)) True) ((\"utils.py\" 274) define_local \"utils_24\" ((\"utils.py\" 274) list ) True) ((\"utils.py\" 276) if_block ((\"utils.py\" 276) eq ((\"utils.py\" 276) get_local \"utils_23\") ((\"utils.py\" 276) literal (intOrNat 0))) (((\"utils.py\" 277) set ((\"utils.py\" 277) get_local \"utils_24\") ((\"utils.py\" 277) cons ((\"utils.py\" 277) literal (string \"0\")) ((\"utils.py\" 277) get_local \"utils_24\"))))) ((\"utils.py\" 278) while_block ((\"utils.py\" 278) gt ((\"utils.py\" 278) get_local \"utils_23\") ((\"utils.py\" 278) literal (intOrNat 0))) (((\"utils.py\" 279) set ((\"utils.py\" 279) get_local \"utils_24\") ((\"utils.py\" 279) cons ((\"utils.py\" 279) get_item ((\"utils.py\" 271) map (((\"utils.py\" 163) literal (intOrNat 0)) ((\"utils.py\" 163) literal (string \"0\"))) (((\"utils.py\" 163) literal (intOrNat 1)) ((\"utils.py\" 163) literal (string \"1\"))) (((\"utils.py\" 163) literal (intOrNat 2)) ((\"utils.py\" 163) literal (string \"2\"))) (((\"utils.py\" 163) literal (intOrNat 3)) ((\"utils.py\" 163) literal (string \"3\"))) (((\"utils.py\" 163) literal (intOrNat 4)) ((\"utils.py\" 163) literal (string \"4\"))) (((\"utils.py\" 163) literal (intOrNat 5)) ((\"utils.py\" 163) literal (string \"5\"))) (((\"utils.py\" 163) literal (intOrNat 6)) ((\"utils.py\" 163) literal (string \"6\"))) (((\"utils.py\" 163) literal (intOrNat 7)) ((\"utils.py\" 163) literal (string \"7\"))) (((\"utils.py\" 163) literal (intOrNat 8)) ((\"utils.py\" 163) literal (string \"8\"))) (((\"utils.py\" 163) literal (intOrNat 9)) ((\"utils.py\" 163) literal (string \"9\")))) ((\"utils.py\" 279) mod ((\"utils.py\" 279) get_local \"utils_23\") ((\"utils.py\" 279) literal (intOrNat 10)))) ((\"utils.py\" 279) get_local \"utils_24\"))) ((\"utils.py\" 280) set ((\"utils.py\" 163) get_local \"utils_23\") ((\"utils.py\" 280) div ((\"utils.py\" 280) get_local \"utils_23\") ((\"utils.py\" 280) literal (intOrNat 10)))))) ((\"utils.py\" 282) define_local \"utils_25\" ((\"utils.py\" 282) concat ((\"utils.py\" 282) get_local \"utils_24\")) True) ((\"utils.py\" 283) if_block ((\"utils.py\" 283) literal (bool False)) (((\"utils.py\" 284) set ((\"utils.py\" 163) get_local \"utils_25\") ((\"utils.py\" 284) add ((\"utils.py\" 284) literal (string \"-\")) ((\"utils.py\" 284) get_local \"utils_25\"))))) ((\"utils.py\" 115) verify ((\"utils.py\" 115) eq ((\"utils.py\" 286) get_local \"utils_25\") ((\"utils.py\" 115) literal (string \"1\")))) ((\"utils.py\" 116) verify ((\"utils.py\" 116) eq ((\"utils.py\" 116) call_lambda ((\"smartpy/tests/utils.py\" 81) private \"string_of_int\") ((\"utils.py\" 116) literal (intOrNat 2))) ((\"utils.py\" 116) literal (string \"2\")))) ((\"utils.py\" 311) define_local \"utils_26\" ((\"utils.py\" 311) literal (string \"1\")) True) ((\"utils.py\" 312) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 221) literal (string \"1\"))) (((\"utils.py\" 313) set ((\"utils.py\" 163) get_local \"utils_26\") ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) slice ((\"utils.py\" 313) literal (intOrNat 1)) ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 313) size ((\"utils.py\" 313) literal (string \"1\"))) ((\"utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 313) literal (string \"1\"))) \"Some\" ((\"utils.py\" 313) literal (string \"\")))))) ((\"utils.py\" 315) define_local \"utils_27\" ((\"utils.py\" 315) literal (intOrNat 0)) True) ((\"utils.py\" 316) for_group \"utils_28\" ((\"utils.py\" 316) range ((\"utils.py\" 316) literal (intOrNat 0)) ((\"utils.py\" 316) size ((\"utils.py\" 316) get_local \"utils_26\")) ((\"utils.py\" 316) literal (intOrNat 1))) (((\"utils.py\" 317) set ((\"utils.py\" 163) get_local \"utils_27\") ((\"utils.py\" 317) add ((\"utils.py\" 317) mul_homo ((\"utils.py\" 317) literal (intOrNat 10)) ((\"utils.py\" 317) get_local \"utils_27\")) ((\"utils.py\" 317) get_item ((\"utils.py\" 308) map (((\"utils.py\" 163) literal (string \"0\")) ((\"utils.py\" 163) literal (intOrNat 0))) (((\"utils.py\" 163) literal (string \"1\")) ((\"utils.py\" 163) literal (intOrNat 1))) (((\"utils.py\" 163) literal (string \"2\")) ((\"utils.py\" 163) literal (intOrNat 2))) (((\"utils.py\" 163) literal (string \"3\")) ((\"utils.py\" 163) literal (intOrNat 3))) (((\"utils.py\" 163) literal (string \"4\")) ((\"utils.py\" 163) literal (intOrNat 4))) (((\"utils.py\" 163) literal (string \"5\")) ((\"utils.py\" 163) literal (intOrNat 5))) (((\"utils.py\" 163) literal (string \"6\")) ((\"utils.py\" 163) literal (intOrNat 6))) (((\"utils.py\" 163) literal (string \"7\")) ((\"utils.py\" 163) literal (intOrNat 7))) (((\"utils.py\" 163) literal (string \"8\")) ((\"utils.py\" 163) literal (intOrNat 8))) (((\"utils.py\" 163) literal (string \"9\")) ((\"utils.py\" 163) literal (intOrNat 9)))) ((\"utils.py\" 317) open_variant ((\"utils.py\" 317) slice ((\"utils.py\" 316) iter \"utils_28\") ((\"utils.py\" 317) literal (intOrNat 1)) ((\"utils.py\" 317) get_local \"utils_26\")) \"Some\" \"None\")))))) ((\"utils.py\" 319) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 221) literal (string \"1\"))) (((\"utils.py\" 320) set ((\"utils.py\" 163) get_local \"utils_27\") ((\"utils.py\" 320) mul_homo ((\"utils.py\" 320) get_local \"utils_27\") ((\"utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 118) verify ((\"utils.py\" 118) eq ((\"utils.py\" 322) get_local \"utils_27\") ((\"utils.py\" 118) literal (intOrNat 1)))) ((\"utils.py\" 311) define_local \"utils_29\" ((\"utils.py\" 311) literal (string \"-1\")) True) ((\"utils.py\" 312) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 221) literal (string \"-1\"))) (((\"utils.py\" 313) set ((\"utils.py\" 163) get_local \"utils_29\") ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) slice ((\"utils.py\" 313) literal (intOrNat 1)) ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 313) size ((\"utils.py\" 313) literal (string \"-1\"))) ((\"utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 313) literal (string \"-1\"))) \"Some\" ((\"utils.py\" 313) literal (string \"\")))))) ((\"utils.py\" 315) define_local \"utils_30\" ((\"utils.py\" 315) literal (intOrNat 0)) True) ((\"utils.py\" 316) for_group \"utils_31\" ((\"utils.py\" 316) range ((\"utils.py\" 316) literal (intOrNat 0)) ((\"utils.py\" 316) size ((\"utils.py\" 316) get_local \"utils_29\")) ((\"utils.py\" 316) literal (intOrNat 1))) (((\"utils.py\" 317) set ((\"utils.py\" 163) get_local \"utils_30\") ((\"utils.py\" 317) add ((\"utils.py\" 317) mul_homo ((\"utils.py\" 317) literal (intOrNat 10)) ((\"utils.py\" 317) get_local \"utils_30\")) ((\"utils.py\" 317) get_item ((\"utils.py\" 308) map (((\"utils.py\" 163) literal (string \"0\")) ((\"utils.py\" 163) literal (intOrNat 0))) (((\"utils.py\" 163) literal (string \"1\")) ((\"utils.py\" 163) literal (intOrNat 1))) (((\"utils.py\" 163) literal (string \"2\")) ((\"utils.py\" 163) literal (intOrNat 2))) (((\"utils.py\" 163) literal (string \"3\")) ((\"utils.py\" 163) literal (intOrNat 3))) (((\"utils.py\" 163) literal (string \"4\")) ((\"utils.py\" 163) literal (intOrNat 4))) (((\"utils.py\" 163) literal (string \"5\")) ((\"utils.py\" 163) literal (intOrNat 5))) (((\"utils.py\" 163) literal (string \"6\")) ((\"utils.py\" 163) literal (intOrNat 6))) (((\"utils.py\" 163) literal (string \"7\")) ((\"utils.py\" 163) literal (intOrNat 7))) (((\"utils.py\" 163) literal (string \"8\")) ((\"utils.py\" 163) literal (intOrNat 8))) (((\"utils.py\" 163) literal (string \"9\")) ((\"utils.py\" 163) literal (intOrNat 9)))) ((\"utils.py\" 317) open_variant ((\"utils.py\" 317) slice ((\"utils.py\" 316) iter \"utils_31\") ((\"utils.py\" 317) literal (intOrNat 1)) ((\"utils.py\" 317) get_local \"utils_29\")) \"Some\" \"None\")))))) ((\"utils.py\" 319) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 221) literal (string \"-1\"))) (((\"utils.py\" 320) set ((\"utils.py\" 163) get_local \"utils_30\") ((\"utils.py\" 320) mul_homo ((\"utils.py\" 320) get_local \"utils_30\") ((\"utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 119) verify ((\"utils.py\" 119) eq ((\"utils.py\" 322) get_local \"utils_30\") ((\"utils.py\" 119) literal (int -1)))) ((\"utils.py\" 120) verify ((\"utils.py\" 120) eq ((\"utils.py\" 120) call_lambda ((\"smartpy/tests/utils.py\" 85) private \"int_of_string\") ((\"utils.py\" 120) literal (string \"2\"))) ((\"utils.py\" 120) literal (intOrNat 2)))) ((\"utils.py\" 326) define_local \"compute_utils_326\" ((\"utils.py\" 326) size ((\"utils.py\" 121) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 327) define_local \"utils_32\" ((\"utils.py\" 327) literal (nat 0)) True) ((\"utils.py\" 328) for_group \"utils_33\" ((\"utils.py\" 328) range ((\"utils.py\" 328) literal (intOrNat 0)) ((\"utils.py\" 326) get_local \"compute_utils_326\") ((\"utils.py\" 328) literal (intOrNat 1))) (((\"utils.py\" 329) define_local \"compute_utils_329\" ((\"utils.py\" 329) open_variant ((\"utils.py\" 329) slice ((\"utils.py\" 328) iter \"utils_33\") ((\"utils.py\" 329) literal (intOrNat 1)) ((\"utils.py\" 121) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 330) define_local \"compute_utils_330\" ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) is_nat ((\"utils.py\" 330) sub ((\"utils.py\" 326) get_local \"compute_utils_326\") ((\"utils.py\" 330) add ((\"utils.py\" 328) iter \"utils_33\") ((\"utils.py\" 330) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 330) literal (intOrNat 2))) True) ((\"utils.py\" 336) set ((\"utils.py\" 163) get_local \"utils_32\") ((\"utils.py\" 336) add ((\"utils.py\" 336) get_local \"utils_32\") ((\"utils.py\" 336) mul_homo ((\"utils.py\" 336) open_variant ((\"utils.py\" 336) is_nat ((\"utils.py\" 337) to_int ((\"utils.py\" 337) open_variant ((\"utils.py\" 337) unpack ((\"utils.py\" 335) add ((\"utils.py\" 335) add ((\"utils.py\" 335) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 329) get_local \"compute_utils_329\")) ((\"utils.py\" 335) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 330) get_local \"compute_utils_330\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 121) verify ((\"utils.py\" 121) eq ((\"utils.py\" 340) get_local \"utils_32\") ((\"utils.py\" 121) literal (intOrNat 256)))) ((\"utils.py\" 122) verify ((\"utils.py\" 122) eq ((\"utils.py\" 122) call_lambda ((\"smartpy/tests/utils.py\" 89) private \"int_of_bytes\") ((\"utils.py\" 122) literal (bytes \"0x0100\"))) ((\"utils.py\" 122) literal (intOrNat 256)))) ((\"utils.py\" 258) define_local \"utils_34\" ((\"utils.py\" 258) literal (intOrNat 0)) True) ((\"utils.py\" 259) define_local \"utils_35\" ((\"utils.py\" 259) list ) True) ((\"utils.py\" 260) for_group \"utils_36\" ((\"utils.py\" 260) range ((\"utils.py\" 260) literal (intOrNat 0)) ((\"utils.py\" 260) size ((\"utils.py\" 260) literal (string \"a b\"))) ((\"utils.py\" 260) literal (intOrNat 1))) (((\"utils.py\" 261) if_block ((\"utils.py\" 261) eq ((\"utils.py\" 261) open_variant ((\"utils.py\" 261) slice ((\"utils.py\" 260) iter \"utils_36\") ((\"utils.py\" 261) literal (intOrNat 1)) ((\"utils.py\" 261) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 261) literal (string \" \"))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_35\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) slice ((\"utils.py\" 262) get_local \"utils_34\") ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) is_nat ((\"utils.py\" 262) sub ((\"utils.py\" 260) iter \"utils_36\") ((\"utils.py\" 262) get_local \"utils_34\"))) \"Some\" \"None\") ((\"utils.py\" 262) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 262) get_local \"utils_35\"))) ((\"utils.py\" 263) set ((\"utils.py\" 163) get_local \"utils_34\") ((\"utils.py\" 263) add ((\"utils.py\" 260) iter \"utils_36\") ((\"utils.py\" 263) literal (intOrNat 1)))))))) ((\"utils.py\" 264) if_block ((\"utils.py\" 264) gt ((\"utils.py\" 264) size ((\"utils.py\" 264) literal (string \"a b\"))) ((\"utils.py\" 264) literal (intOrNat 0))) (((\"utils.py\" 265) set ((\"utils.py\" 265) get_local \"utils_35\") ((\"utils.py\" 265) cons ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) slice ((\"utils.py\" 265) get_local \"utils_34\") ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) is_nat ((\"utils.py\" 265) sub ((\"utils.py\" 265) size ((\"utils.py\" 265) literal (string \"a b\"))) ((\"utils.py\" 265) get_local \"utils_34\"))) \"Some\" \"None\") ((\"utils.py\" 265) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 265) get_local \"utils_35\"))))) ((\"utils.py\" 124) verify ((\"utils.py\" 124) eq ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 266) rev ((\"utils.py\" 266) get_local \"utils_35\")) (unknown 113))) ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 124) list ((\"utils.py\" 124) literal (string \"a\")) ((\"utils.py\" 124) literal (string \"b\"))) (unknown 113))))) ((\"utils.py\" 258) define_local \"utils_37\" ((\"utils.py\" 258) literal (intOrNat 0)) True) ((\"utils.py\" 259) define_local \"utils_38\" ((\"utils.py\" 259) list ) True) ((\"utils.py\" 260) for_group \"utils_39\" ((\"utils.py\" 260) range ((\"utils.py\" 260) literal (intOrNat 0)) ((\"utils.py\" 260) size ((\"utils.py\" 260) literal (string \"b,a\"))) ((\"utils.py\" 260) literal (intOrNat 1))) (((\"utils.py\" 261) if_block ((\"utils.py\" 261) eq ((\"utils.py\" 261) open_variant ((\"utils.py\" 261) slice ((\"utils.py\" 260) iter \"utils_39\") ((\"utils.py\" 261) literal (intOrNat 1)) ((\"utils.py\" 261) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 261) literal (string \",\"))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_38\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) slice ((\"utils.py\" 262) get_local \"utils_37\") ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) is_nat ((\"utils.py\" 262) sub ((\"utils.py\" 260) iter \"utils_39\") ((\"utils.py\" 262) get_local \"utils_37\"))) \"Some\" \"None\") ((\"utils.py\" 262) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 262) get_local \"utils_38\"))) ((\"utils.py\" 263) set ((\"utils.py\" 163) get_local \"utils_37\") ((\"utils.py\" 263) add ((\"utils.py\" 260) iter \"utils_39\") ((\"utils.py\" 263) literal (intOrNat 1)))))))) ((\"utils.py\" 264) if_block ((\"utils.py\" 264) gt ((\"utils.py\" 264) size ((\"utils.py\" 264) literal (string \"b,a\"))) ((\"utils.py\" 264) literal (intOrNat 0))) (((\"utils.py\" 265) set ((\"utils.py\" 265) get_local \"utils_38\") ((\"utils.py\" 265) cons ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) slice ((\"utils.py\" 265) get_local \"utils_37\") ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) is_nat ((\"utils.py\" 265) sub ((\"utils.py\" 265) size ((\"utils.py\" 265) literal (string \"b,a\"))) ((\"utils.py\" 265) get_local \"utils_37\"))) \"Some\" \"None\") ((\"utils.py\" 265) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 265) get_local \"utils_38\"))))) ((\"utils.py\" 125) verify ((\"utils.py\" 125) eq ((\"utils.py\" 125) pack ((\"utils.py\" 125) type_annotation ((\"utils.py\" 266) rev ((\"utils.py\" 266) get_local \"utils_38\")) (unknown 116))) ((\"utils.py\" 125) pack ((\"utils.py\" 125) type_annotation ((\"utils.py\" 125) list ((\"utils.py\" 125) literal (string \"b\")) ((\"utils.py\" 125) literal (string \"a\"))) (unknown 116))))) ((\"utils.py\" 126) verify ((\"utils.py\" 126) eq ((\"utils.py\" 126) pack ((\"utils.py\" 126) type_annotation ((\"utils.py\" 126) call_lambda ((\"smartpy/tests/utils.py\" 93) private \"string_split\") ((\"utils.py\" 126) record (separator ((\"utils.py\" 126) literal (string \",,\"))) (text ((\"utils.py\" 126) literal (string \"a,b\"))))) (unknown 117))) ((\"utils.py\" 126) pack ((\"utils.py\" 126) type_annotation ((\"utils.py\" 126) list ((\"utils.py\" 126) literal (string \"a,b\"))) (unknown 117))))) ((\"utils.py\" 128) verify ((\"utils.py\" 128) eq ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"a\")) ((\"utils.py\" 221) literal (string \"abc\"))) ((\"utils.py\" 128) literal (bool True)))) ((\"utils.py\" 129) verify ((\"utils.py\" 129) eq ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"b\")) ((\"utils.py\" 221) literal (string \"abc\"))) ((\"utils.py\" 129) literal (bool False)))) ((\"utils.py\" 130) verify ((\"utils.py\" 130) eq ((\"utils.py\" 130) call_lambda ((\"smartpy/tests/utils.py\" 97) private \"string_starts_with\") ((\"utils.py\" 130) record (prefix ((\"utils.py\" 130) literal (string \"a\"))) (text ((\"utils.py\" 130) literal (string \"abc\"))))) ((\"utils.py\" 130) literal (bool True)))) ((\"utils.py\" 132) verify ((\"utils.py\" 132) eq ((\"utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 162) literal (string \"abc\")) ((\"utils.py\" 162) literal (string \"c\"))) ((\"utils.py\" 132) literal (bool True)))) ((\"utils.py\" 133) verify ((\"utils.py\" 133) eq ((\"utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 162) literal (string \"abc\")) ((\"utils.py\" 162) literal (string \"b\"))) ((\"utils.py\" 133) literal (bool False)))) ((\"utils.py\" 134) verify ((\"utils.py\" 134) eq ((\"utils.py\" 134) call_lambda ((\"smartpy/tests/utils.py\" 101) private \"string_ends_with\") ((\"utils.py\" 134) record (postfix ((\"utils.py\" 134) literal (string \"c\"))) (text ((\"utils.py\" 134) literal (string \"abc\"))))) ((\"utils.py\" 134) literal (bool True)))) ((\"utils.py\" 83) define_local \"utils_40_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_41_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3)) ((\"utils.py\" 84) literal (intOrNat 4)) ((\"utils.py\" 84) literal (intOrNat 5))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_40_hist\") ((\"utils.py\" 84) iter \"utils_41_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_40_hist\") ((\"utils.py\" 84) iter \"utils_41_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_40_hist\") ((\"utils.py\" 84) iter \"utils_41_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_40_hist\") ((\"utils.py\" 84) iter \"utils_41_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)) ((\"utils.py\" 90) literal (intOrNat 4)) ((\"utils.py\" 90) literal (intOrNat 5)))) True) ((\"utils.py\" 91) define_local \"utils_42_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_43_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_44_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_43_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_45_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_46_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_40_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_44_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_45_i\") ((\"utils.py\" 97) get_local \"utils_43_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 163) get_local \"utils_42_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_46_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 163) get_local \"utils_45_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_45_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_46_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_45_i\") ((\"utils.py\" 100) get_local \"utils_43_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 163) get_local \"utils_44_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 163) get_local \"utils_42_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_42_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_46_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 163) get_local \"utils_42_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_42_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 163) get_local \"utils_44_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 163) get_local \"utils_45_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_45_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_46_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_45_i\") ((\"utils.py\" 108) get_local \"utils_43_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 163) get_local \"utils_42_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_46_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 163) get_local \"utils_45_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_45_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_46_x\") \"value\"))))))))) ((\"utils.py\" 136) verify ((\"utils.py\" 136) eq ((\"utils.py\" 112) get_local \"utils_42_result\") ((\"utils.py\" 136) literal (intOrNat 3)))) ((\"utils.py\" 83) define_local \"utils_47_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_48_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_47_hist\") ((\"utils.py\" 84) iter \"utils_48_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_47_hist\") ((\"utils.py\" 84) iter \"utils_48_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_47_hist\") ((\"utils.py\" 84) iter \"utils_48_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_47_hist\") ((\"utils.py\" 84) iter \"utils_48_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90i\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)))) True) ((\"utils.py\" 91) define_local \"utils_49_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_50_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90i\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_51_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_50_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90i\")) True) ((\"utils.py\" 94) define_local \"utils_52_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_53_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_47_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_51_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_52_i\") ((\"utils.py\" 97) get_local \"utils_50_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 163) get_local \"utils_49_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_53_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 163) get_local \"utils_52_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_52_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_53_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_52_i\") ((\"utils.py\" 100) get_local \"utils_50_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 163) get_local \"utils_51_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 163) get_local \"utils_49_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_49_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_53_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 163) get_local \"utils_49_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_49_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 163) get_local \"utils_51_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 163) get_local \"utils_52_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_52_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_53_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_52_i\") ((\"utils.py\" 108) get_local \"utils_50_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 163) get_local \"utils_49_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_53_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 163) get_local \"utils_52_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_52_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_53_x\") \"value\"))))))))) ((\"utils.py\" 137) verify ((\"utils.py\" 137) eq ((\"utils.py\" 112) get_local \"utils_49_result\") ((\"utils.py\" 137) literal (intOrNat 2)))) ((\"utils.py\" 138) verify ((\"utils.py\" 138) eq ((\"utils.py\" 138) call_lambda ((\"smartpy/tests/utils.py\" 109) private \"math_median\") ((\"utils.py\" 138) list ((\"utils.py\" 138) literal (intOrNat 1)) ((\"utils.py\" 138) literal (intOrNat 2)) ((\"utils.py\" 138) literal (intOrNat 2)) ((\"utils.py\" 138) literal (intOrNat 5)))) ((\"utils.py\" 138) literal (intOrNat 2)))) ((\"utils.py\" 118) define_local \"compute_utils_118\" ((\"utils.py\" 118) sub ((\"utils.py\" 118) literal (intOrNat 3)) ((\"utils.py\" 118) size ((\"utils.py\" 140) literal (bytes \"0x11\")))) True) ((\"utils.py\" 119) define_local \"utils_54_bytes\" ((\"utils.py\" 119) literal (bytes \"0x\")) True) ((\"utils.py\" 120) while_block ((\"utils.py\" 120) lt ((\"utils.py\" 120) size ((\"utils.py\" 120) get_local \"utils_54_bytes\")) ((\"utils.py\" 118) open_variant ((\"utils.py\" 118) is_nat ((\"utils.py\" 118) get_local \"compute_utils_118\")) \"Some\" \"None\")) (((\"utils.py\" 121) set ((\"utils.py\" 163) get_local \"utils_54_bytes\") ((\"utils.py\" 121) add ((\"utils.py\" 140) literal (bytes \"0x00\")) ((\"utils.py\" 121) get_local \"utils_54_bytes\"))))) ((\"utils.py\" 140) verify ((\"utils.py\" 140) eq ((\"utils.py\" 122) add ((\"utils.py\" 122) get_local \"utils_54_bytes\") ((\"utils.py\" 140) literal (bytes \"0x11\"))) ((\"utils.py\" 140) literal (bytes \"0x000011\")))) ((\"utils.py\" 126) define_local \"compute_utils_126\" ((\"utils.py\" 126) sub ((\"utils.py\" 126) literal (intOrNat 3)) ((\"utils.py\" 126) size ((\"utils.py\" 141) literal (bytes \"0x11\")))) True) ((\"utils.py\" 127) define_local \"utils_55_bytes\" ((\"utils.py\" 127) literal (bytes \"0x\")) True) ((\"utils.py\" 128) while_block ((\"utils.py\" 128) lt ((\"utils.py\" 128) size ((\"utils.py\" 128) get_local \"utils_55_bytes\")) ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) is_nat ((\"utils.py\" 126) get_local \"compute_utils_126\")) \"Some\" \"None\")) (((\"utils.py\" 129) set ((\"utils.py\" 163) get_local \"utils_55_bytes\") ((\"utils.py\" 129) add ((\"utils.py\" 141) literal (bytes \"0x00\")) ((\"utils.py\" 129) get_local \"utils_55_bytes\"))))) ((\"utils.py\" 141) verify ((\"utils.py\" 141) eq ((\"utils.py\" 130) add ((\"utils.py\" 141) literal (bytes \"0x11\")) ((\"utils.py\" 130) get_local \"utils_55_bytes\")) ((\"utils.py\" 141) literal (bytes \"0x110000\")))) ((\"utils.py\" 148) verify ((\"utils.py\" 148) literal (bool True)) ((\"utils.py\" 148) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 150) define_local \"utils_56_bytes\" ((\"utils.py\" 150) literal (bytes \"0x\")) True) ((\"utils.py\" 151) define_local \"utils_57_value\" ((\"utils.py\" 151) literal (intOrNat 54)) True) ((\"utils.py\" 152) while_block ((\"utils.py\" 152) neq ((\"utils.py\" 152) get_local \"utils_57_value\") ((\"utils.py\" 152) literal (intOrNat 0))) (((\"utils.py\" 153) set ((\"utils.py\" 163) get_local \"utils_56_bytes\") ((\"utils.py\" 153) add ((\"utils.py\" 143) open_variant ((\"utils.py\" 143) slice ((\"utils.py\" 143) literal (intOrNat 6)) ((\"utils.py\" 143) literal (intOrNat 1)) ((\"utils.py\" 143) pack ((\"utils.py\" 143) MUL ((\"utils.py\" 143) to_int ((\"utils.py\" 153) get_local \"utils_57_value\")) ((\"utils.py\" 143) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 153) get_local \"utils_56_bytes\"))) ((\"utils.py\" 154) set ((\"utils.py\" 163) get_local \"utils_57_value\") ((\"utils.py\" 154) lsr ((\"utils.py\" 154) get_local \"utils_57_value\") ((\"utils.py\" 154) literal (intOrNat 8)))))) ((\"utils.py\" 142) verify ((\"utils.py\" 142) eq ((\"utils.py\" 156) get_local \"utils_56_bytes\") ((\"utils.py\" 142) literal (bytes \"0x36\")))) ((\"utils.py\" 143) verify ((\"utils.py\" 143) eq ((\"utils.py\" 139) open_variant ((\"utils.py\" 139) slice ((\"utils.py\" 139) literal (intOrNat 6)) ((\"utils.py\" 139) open_variant ((\"utils.py\" 139) is_nat ((\"utils.py\" 139) sub ((\"utils.py\" 139) size ((\"utils.py\" 134) pack ((\"utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 139) literal (intOrNat 6)))) \"Some\" \"None\") ((\"utils.py\" 134) pack ((\"utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"utils.py\" 139) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 143) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"utils.py\" 148) verify ((\"utils.py\" 148) lt ((\"utils.py\" 292) size ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) ((\"utils.py\" 148) literal (intOrNat 28948022309329048855892746252171976963317496166410141009864396001978282409984))) ((\"utils.py\" 148) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 150) define_local \"utils_58_bytes\" ((\"utils.py\" 150) literal (bytes \"0x\")) True) ((\"utils.py\" 151) define_local \"utils_59_value\" ((\"utils.py\" 292) size ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) True) ((\"utils.py\" 152) while_block ((\"utils.py\" 152) neq ((\"utils.py\" 152) get_local \"utils_59_value\") ((\"utils.py\" 152) literal (intOrNat 0))) (((\"utils.py\" 153) set ((\"utils.py\" 163) get_local \"utils_58_bytes\") ((\"utils.py\" 153) add ((\"utils.py\" 143) open_variant ((\"utils.py\" 143) slice ((\"utils.py\" 143) literal (intOrNat 6)) ((\"utils.py\" 143) literal (intOrNat 1)) ((\"utils.py\" 143) pack ((\"utils.py\" 143) MUL ((\"utils.py\" 143) to_int ((\"utils.py\" 153) get_local \"utils_59_value\")) ((\"utils.py\" 143) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 153) get_local \"utils_58_bytes\"))) ((\"utils.py\" 154) set ((\"utils.py\" 163) get_local \"utils_59_value\") ((\"utils.py\" 154) lsr ((\"utils.py\" 154) get_local \"utils_59_value\") ((\"utils.py\" 154) literal (intOrNat 8)))))) ((\"utils.py\" 292) define_local \"lengthBytes\" ((\"utils.py\" 156) get_local \"utils_58_bytes\") True) ((\"utils.py\" 293) while_block ((\"utils.py\" 293) lt ((\"utils.py\" 293) size ((\"utils.py\" 293) get_local \"lengthBytes\")) ((\"utils.py\" 293) literal (intOrNat 4))) (((\"utils.py\" 294) set ((\"utils.py\" 163) get_local \"lengthBytes\") ((\"utils.py\" 294) add ((\"utils.py\" 294) literal (bytes \"0x00\")) ((\"utils.py\" 294) get_local \"lengthBytes\"))))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) eq ((\"utils.py\" 301) open_variant ((\"utils.py\" 301) unpack ((\"utils.py\" 300) concat ((\"utils.py\" 300) list ((\"utils.py\" 300) literal (bytes \"0x05\")) ((\"utils.py\" 300) literal (bytes \"0x01\")) ((\"utils.py\" 300) get_local \"lengthBytes\") ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"utils.py\" 301) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 144) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 146) verify ((\"utils.py\" 146) eq ((\"utils.py\" 346) and ((\"utils.py\" 346) ge ((\"utils.py\" 346) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 146) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"utils.py\" 346) le ((\"utils.py\" 346) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 146) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 146) literal (bool False)))) ((\"utils.py\" 147) verify ((\"utils.py\" 346) and ((\"utils.py\" 346) ge ((\"utils.py\" 346) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 147) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"utils.py\" 346) le ((\"utils.py\" 346) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 147) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"utils.py\" 163) lambda 0 None False None \"\" (((\"smartpy_utils.py\" 326) define_local \"compute_smartpy_utils_326\" ((\"smartpy_utils.py\" 326) size ((\"utils.py\" 163) lambda_params 0 \"\" (unknown 72))) True) ((\"smartpy_utils.py\" 327) define_local \"utils_54\" ((\"smartpy_utils.py\" 327) literal (nat 0)) True) ((\"smartpy_utils.py\" 328) for_group \"utils_55\" ((\"smartpy_utils.py\" 328) range ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) ((\"smartpy_utils.py\" 326) get_local \"compute_smartpy_utils_326\") ((\"smartpy_utils.py\" 328) literal (intOrNat 1))) (((\"smartpy_utils.py\" 329) define_local \"compute_smartpy_utils_329\" ((\"smartpy_utils.py\" 329) open_variant ((\"smartpy_utils.py\" 329) slice ((\"smartpy_utils.py\" 328) iter \"utils_55\") ((\"smartpy_utils.py\" 329) literal (intOrNat 1)) ((\"utils.py\" 163) lambda_params 0 \"\" (unknown 72))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 330) define_local \"compute_smartpy_utils_330\" ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) is_nat ((\"smartpy_utils.py\" 330) sub ((\"smartpy_utils.py\" 326) get_local \"compute_smartpy_utils_326\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 328) iter \"utils_55\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 330) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 336) set ((\"utils.py\" 163) get_local \"utils_54\") ((\"smartpy_utils.py\" 336) add ((\"smartpy_utils.py\" 336) get_local \"utils_54\") ((\"smartpy_utils.py\" 336) mul_homo ((\"smartpy_utils.py\" 336) open_variant ((\"smartpy_utils.py\" 336) is_nat ((\"smartpy_utils.py\" 337) to_int ((\"smartpy_utils.py\" 337) open_variant ((\"smartpy_utils.py\" 337) unpack ((\"smartpy_utils.py\" 335) add ((\"smartpy_utils.py\" 335) add ((\"smartpy_utils.py\" 335) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 329) get_local \"compute_smartpy_utils_329\")) ((\"smartpy_utils.py\" 335) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 330) get_local \"compute_smartpy_utils_330\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 90) result ((\"smartpy_utils.py\" 340) get_local \"utils_54\"))))) (int_of_string ((\"utils.py\" 163) lambda 1 None False None \"\" (((\"utils.py\" 311) define_local \"utils_4\" ((\"utils.py\" 163) lambda_params 1 \"\" (unknown 77)) True) ((\"utils.py\" 312) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 163) lambda_params 1 \"\" (unknown 77))) (((\"utils.py\" 313) set ((\"utils.py\" 163) get_local \"utils_4\") ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) slice ((\"utils.py\" 313) literal (intOrNat 1)) ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 313) size ((\"utils.py\" 163) lambda_params 1 \"\" (unknown 77))) ((\"utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 163) lambda_params 1 \"\" (unknown 77))) \"Some\" ((\"utils.py\" 313) literal (string \"\")))))) ((\"utils.py\" 315) define_local \"utils_5\" ((\"utils.py\" 315) literal (intOrNat 0)) True) ((\"utils.py\" 316) for_group \"utils_6\" ((\"utils.py\" 316) range ((\"utils.py\" 316) literal (intOrNat 0)) ((\"utils.py\" 316) size ((\"utils.py\" 316) get_local \"utils_4\")) ((\"utils.py\" 316) literal (intOrNat 1))) (((\"utils.py\" 317) set ((\"utils.py\" 163) get_local \"utils_5\") ((\"utils.py\" 317) add ((\"utils.py\" 317) mul_homo ((\"utils.py\" 317) literal (intOrNat 10)) ((\"utils.py\" 317) get_local \"utils_5\")) ((\"utils.py\" 317) get_item ((\"utils.py\" 308) map (((\"utils.py\" 163) literal (string \"0\")) ((\"utils.py\" 163) literal (intOrNat 0))) (((\"utils.py\" 163) literal (string \"1\")) ((\"utils.py\" 163) literal (intOrNat 1))) (((\"utils.py\" 163) literal (string \"2\")) ((\"utils.py\" 163) literal (intOrNat 2))) (((\"utils.py\" 163) literal (string \"3\")) ((\"utils.py\" 163) literal (intOrNat 3))) (((\"utils.py\" 163) literal (string \"4\")) ((\"utils.py\" 163) literal (intOrNat 4))) (((\"utils.py\" 163) literal (string \"5\")) ((\"utils.py\" 163) literal (intOrNat 5))) (((\"utils.py\" 163) literal (string \"6\")) ((\"utils.py\" 163) literal (intOrNat 6))) (((\"utils.py\" 163) literal (string \"7\")) ((\"utils.py\" 163) literal (intOrNat 7))) (((\"utils.py\" 163) literal (string \"8\")) ((\"utils.py\" 163) literal (intOrNat 8))) (((\"utils.py\" 163) literal (string \"9\")) ((\"utils.py\" 163) literal (intOrNat 9)))) ((\"utils.py\" 317) open_variant ((\"utils.py\" 317) slice ((\"utils.py\" 316) iter \"utils_6\") ((\"utils.py\" 317) literal (intOrNat 1)) ((\"utils.py\" 317) get_local \"utils_4\")) \"Some\" \"None\")))))) ((\"utils.py\" 319) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 163) lambda_params 1 \"\" (unknown 77))) (((\"utils.py\" 320) set ((\"utils.py\" 163) get_local \"utils_5\") ((\"utils.py\" 320) mul_homo ((\"utils.py\" 320) get_local \"utils_5\") ((\"utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 86) result ((\"utils.py\" 322) get_local \"utils_5\"))))) (math_median ((\"utils.py\" 163) lambda 2 None False None \"\" (((\"utils.py\" 83) define_local \"utils_7_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_8_x\" ((\"utils.py\" 163) lambda_params 2 \"\" (unknown 80)) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_7_hist\") ((\"utils.py\" 84) iter \"utils_8_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_7_hist\") ((\"utils.py\" 84) iter \"utils_8_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_7_hist\") ((\"utils.py\" 84) iter \"utils_8_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_7_hist\") ((\"utils.py\" 84) iter \"utils_8_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 163) lambda_params 2 \"\" (unknown 80))) True) ((\"utils.py\" 91) define_local \"utils_9_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_10_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_11_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_10_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_12_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_13_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_7_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_11_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_12_i\") ((\"utils.py\" 97) get_local \"utils_10_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 163) get_local \"utils_9_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_13_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 163) get_local \"utils_12_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_12_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_13_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_12_i\") ((\"utils.py\" 100) get_local \"utils_10_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 163) get_local \"utils_11_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 163) get_local \"utils_9_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_9_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_13_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 163) get_local \"utils_9_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_9_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 163) get_local \"utils_11_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 163) get_local \"utils_12_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_12_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_13_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_12_i\") ((\"utils.py\" 108) get_local \"utils_10_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 163) get_local \"utils_9_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_13_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 163) get_local \"utils_12_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_12_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_13_x\") \"value\"))))))))) ((\"utils.py\" 110) result ((\"utils.py\" 112) get_local \"utils_9_result\"))))) (math_pow ((\"utils.py\" 163) lambda 3 None False None \"\" (((\"utils.py\" 106) result ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 106) attr ((\"utils.py\" 163) lambda_params 3 \"\" (unknown 87)) \"exponent\") ((\"utils.py\" 106) attr ((\"utils.py\" 163) lambda_params 3 \"\" (unknown 87)) \"base\") ((\"utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"utils.py\" 163) lambda 4 None False None \"\" (((\"utils.py\" 102) result ((\"utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 102) attr ((\"utils.py\" 163) lambda_params 4 \"\" (unknown 88)) \"text\") ((\"utils.py\" 102) attr ((\"utils.py\" 163) lambda_params 4 \"\" (unknown 88)) \"postfix\")))))) (string_of_int ((\"utils.py\" 163) lambda 5 None False None \"\" (((\"utils.py\" 273) define_local \"utils_14\" ((\"utils.py\" 273) abs ((\"utils.py\" 163) lambda_params 5 \"\" (unknown 89))) True) ((\"utils.py\" 274) define_local \"utils_15\" ((\"utils.py\" 274) list ) True) ((\"utils.py\" 276) if_block ((\"utils.py\" 276) eq ((\"utils.py\" 276) get_local \"utils_14\") ((\"utils.py\" 276) literal (intOrNat 0))) (((\"utils.py\" 277) set ((\"utils.py\" 277) get_local \"utils_15\") ((\"utils.py\" 277) cons ((\"utils.py\" 277) literal (string \"0\")) ((\"utils.py\" 277) get_local \"utils_15\"))))) ((\"utils.py\" 278) while_block ((\"utils.py\" 278) gt ((\"utils.py\" 278) get_local \"utils_14\") ((\"utils.py\" 278) literal (intOrNat 0))) (((\"utils.py\" 279) set ((\"utils.py\" 279) get_local \"utils_15\") ((\"utils.py\" 279) cons ((\"utils.py\" 279) get_item ((\"utils.py\" 271) map (((\"utils.py\" 163) literal (intOrNat 0)) ((\"utils.py\" 163) literal (string \"0\"))) (((\"utils.py\" 163) literal (intOrNat 1)) ((\"utils.py\" 163) literal (string \"1\"))) (((\"utils.py\" 163) literal (intOrNat 2)) ((\"utils.py\" 163) literal (string \"2\"))) (((\"utils.py\" 163) literal (intOrNat 3)) ((\"utils.py\" 163) literal (string \"3\"))) (((\"utils.py\" 163) literal (intOrNat 4)) ((\"utils.py\" 163) literal (string \"4\"))) (((\"utils.py\" 163) literal (intOrNat 5)) ((\"utils.py\" 163) literal (string \"5\"))) (((\"utils.py\" 163) literal (intOrNat 6)) ((\"utils.py\" 163) literal (string \"6\"))) (((\"utils.py\" 163) literal (intOrNat 7)) ((\"utils.py\" 163) literal (string \"7\"))) (((\"utils.py\" 163) literal (intOrNat 8)) ((\"utils.py\" 163) literal (string \"8\"))) (((\"utils.py\" 163) literal (intOrNat 9)) ((\"utils.py\" 163) literal (string \"9\")))) ((\"utils.py\" 279) mod ((\"utils.py\" 279) get_local \"utils_14\") ((\"utils.py\" 279) literal (intOrNat 10)))) ((\"utils.py\" 279) get_local \"utils_15\"))) ((\"utils.py\" 280) set ((\"utils.py\" 163) get_local \"utils_14\") ((\"utils.py\" 280) div ((\"utils.py\" 280) get_local \"utils_14\") ((\"utils.py\" 280) literal (intOrNat 10)))))) ((\"utils.py\" 282) define_local \"utils_16\" ((\"utils.py\" 282) concat ((\"utils.py\" 282) get_local \"utils_15\")) True) ((\"utils.py\" 283) if_block ((\"utils.py\" 272) lt ((\"utils.py\" 163) lambda_params 5 \"\" (unknown 89)) ((\"utils.py\" 272) literal (intOrNat 0))) (((\"utils.py\" 284) set ((\"utils.py\" 163) get_local \"utils_16\") ((\"utils.py\" 284) add ((\"utils.py\" 284) literal (string \"-\")) ((\"utils.py\" 284) get_local \"utils_16\"))))) ((\"utils.py\" 82) result ((\"utils.py\" 286) get_local \"utils_16\"))))) (string_split ((\"utils.py\" 163) lambda 6 None False None \"\" (((\"utils.py\" 258) define_local \"utils_17\" ((\"utils.py\" 258) literal (intOrNat 0)) True) ((\"utils.py\" 259) define_local \"utils_18\" ((\"utils.py\" 259) list ) True) ((\"utils.py\" 260) for_group \"utils_19\" ((\"utils.py\" 260) range ((\"utils.py\" 260) literal (intOrNat 0)) ((\"utils.py\" 260) size ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params 6 \"\" (unknown 93)) \"text\")) ((\"utils.py\" 260) literal (intOrNat 1))) (((\"utils.py\" 261) if_block ((\"utils.py\" 261) eq ((\"utils.py\" 261) open_variant ((\"utils.py\" 261) slice ((\"utils.py\" 260) iter \"utils_19\") ((\"utils.py\" 261) literal (intOrNat 1)) ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params 6 \"\" (unknown 93)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params 6 \"\" (unknown 93)) \"separator\")) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_18\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) slice ((\"utils.py\" 262) get_local \"utils_17\") ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) is_nat ((\"utils.py\" 262) sub ((\"utils.py\" 260) iter \"utils_19\") ((\"utils.py\" 262) get_local \"utils_17\"))) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params 6 \"\" (unknown 93)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 262) get_local \"utils_18\"))) ((\"utils.py\" 263) set ((\"utils.py\" 163) get_local \"utils_17\") ((\"utils.py\" 263) add ((\"utils.py\" 260) iter \"utils_19\") ((\"utils.py\" 263) literal (intOrNat 1)))))))) ((\"utils.py\" 264) if_block ((\"utils.py\" 264) gt ((\"utils.py\" 264) size ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params 6 \"\" (unknown 93)) \"text\")) ((\"utils.py\" 264) literal (intOrNat 0))) (((\"utils.py\" 265) set ((\"utils.py\" 265) get_local \"utils_18\") ((\"utils.py\" 265) cons ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) slice ((\"utils.py\" 265) get_local \"utils_17\") ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) is_nat ((\"utils.py\" 265) sub ((\"utils.py\" 265) size ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params 6 \"\" (unknown 93)) \"text\")) ((\"utils.py\" 265) get_local \"utils_17\"))) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"utils.py\" 163) lambda_params 6 \"\" (unknown 93)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 265) get_local \"utils_18\"))))) ((\"utils.py\" 94) result ((\"utils.py\" 266) rev ((\"utils.py\" 266) get_local \"utils_18\")))))) (string_starts_with ((\"utils.py\" 163) lambda 7 None False None \"\" (((\"utils.py\" 98) result ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 98) attr ((\"utils.py\" 163) lambda_params 7 \"\" (unknown 96)) \"prefix\") ((\"utils.py\" 98) attr ((\"utils.py\" 163) lambda_params 7 \"\" (unknown 96)) \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"utils.py\" 163) static_id 0)",
    "line_no": "(\"utils.py\" 163)",
    "show": true
   },
   {
    "action": "message",
    "id": "((\"utils.py\" 163) static_id 0)",
    "line_no": "(\"utils.py\" 165)",
    "message": "test",
    "params": "((\"utils.py\" 165) record )"
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "UtilsTester1_compilation",
  "longname": "UtilsTester1_compilation",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"\" -1) static_id 0) \nstorage ()\nstorage_type ((unknown 1))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 42) (((\"smartpy_utils.py\" 273) define_local \"utils_74\" ((\"smartpy_utils.py\" 273) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 274) define_local \"utils_75\" ((\"smartpy_utils.py\" 274) list ) True) ((\"smartpy_utils.py\" 276) if_block ((\"smartpy_utils.py\" 276) eq ((\"smartpy_utils.py\" 276) get_local \"utils_74\") ((\"smartpy_utils.py\" 276) literal (intOrNat 0))) (((\"smartpy_utils.py\" 277) set ((\"smartpy_utils.py\" 277) get_local \"utils_75\") ((\"smartpy_utils.py\" 277) cons ((\"smartpy_utils.py\" 277) literal (string \"0\")) ((\"smartpy_utils.py\" 277) get_local \"utils_75\"))))) ((\"smartpy_utils.py\" 278) while_block ((\"smartpy_utils.py\" 278) gt ((\"smartpy_utils.py\" 278) get_local \"utils_74\") ((\"smartpy_utils.py\" 278) literal (intOrNat 0))) (((\"smartpy_utils.py\" 279) set ((\"smartpy_utils.py\" 279) get_local \"utils_75\") ((\"smartpy_utils.py\" 279) cons ((\"smartpy_utils.py\" 279) get_item ((\"smartpy_utils.py\" 271) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 279) mod ((\"smartpy_utils.py\" 279) get_local \"utils_74\") ((\"smartpy_utils.py\" 279) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 279) get_local \"utils_75\"))) ((\"smartpy_utils.py\" 280) set ((\"\" -1) get_local \"utils_74\") ((\"smartpy_utils.py\" 280) div ((\"smartpy_utils.py\" 280) get_local \"utils_74\") ((\"smartpy_utils.py\" 280) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 282) define_local \"utils_76\" ((\"smartpy_utils.py\" 282) concat ((\"smartpy_utils.py\" 282) get_local \"utils_75\")) True) ((\"smartpy_utils.py\" 283) if_block ((\"smartpy_utils.py\" 283) literal (bool True)) (((\"smartpy_utils.py\" 284) set ((\"\" -1) get_local \"utils_76\") ((\"smartpy_utils.py\" 284) add ((\"smartpy_utils.py\" 284) literal (string \"-\")) ((\"smartpy_utils.py\" 284) get_local \"utils_76\"))))) ((\"utils.py\" 43) verify ((\"utils.py\" 43) eq ((\"smartpy_utils.py\" 286) get_local \"utils_76\") ((\"utils.py\" 43) literal (string \"-1\")))) ((\"smartpy_utils.py\" 273) define_local \"utils_77\" ((\"smartpy_utils.py\" 273) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 274) define_local \"utils_78\" ((\"smartpy_utils.py\" 274) list ) True) ((\"smartpy_utils.py\" 276) if_block ((\"smartpy_utils.py\" 276) eq ((\"smartpy_utils.py\" 276) get_local \"utils_77\") ((\"smartpy_utils.py\" 276) literal (intOrNat 0))) (((\"smartpy_utils.py\" 277) set ((\"smartpy_utils.py\" 277) get_local \"utils_78\") ((\"smartpy_utils.py\" 277) cons ((\"smartpy_utils.py\" 277) literal (string \"0\")) ((\"smartpy_utils.py\" 277) get_local \"utils_78\"))))) ((\"smartpy_utils.py\" 278) while_block ((\"smartpy_utils.py\" 278) gt ((\"smartpy_utils.py\" 278) get_local \"utils_77\") ((\"smartpy_utils.py\" 278) literal (intOrNat 0))) (((\"smartpy_utils.py\" 279) set ((\"smartpy_utils.py\" 279) get_local \"utils_78\") ((\"smartpy_utils.py\" 279) cons ((\"smartpy_utils.py\" 279) get_item ((\"smartpy_utils.py\" 271) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 279) mod ((\"smartpy_utils.py\" 279) get_local \"utils_77\") ((\"smartpy_utils.py\" 279) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 279) get_local \"utils_78\"))) ((\"smartpy_utils.py\" 280) set ((\"\" -1) get_local \"utils_77\") ((\"smartpy_utils.py\" 280) div ((\"smartpy_utils.py\" 280) get_local \"utils_77\") ((\"smartpy_utils.py\" 280) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 282) define_local \"utils_79\" ((\"smartpy_utils.py\" 282) concat ((\"smartpy_utils.py\" 282) get_local \"utils_78\")) True) ((\"smartpy_utils.py\" 283) if_block ((\"smartpy_utils.py\" 283) literal (bool False)) (((\"smartpy_utils.py\" 284) set ((\"\" -1) get_local \"utils_79\") ((\"smartpy_utils.py\" 284) add ((\"smartpy_utils.py\" 284) literal (string \"-\")) ((\"smartpy_utils.py\" 284) get_local \"utils_79\"))))) ((\"utils.py\" 44) verify ((\"utils.py\" 44) eq ((\"smartpy_utils.py\" 286) get_local \"utils_79\") ((\"utils.py\" 44) literal (string \"1\")))) ((\"utils.py\" 45) verify ((\"utils.py\" 45) eq ((\"utils.py\" 45) call_lambda ((\"smartpy/tests/utils.py\" 10) private \"string_of_int\") ((\"utils.py\" 45) literal (intOrNat 2))) ((\"utils.py\" 45) literal (string \"2\")))) ((\"smartpy_utils.py\" 311) define_local \"utils_80\" ((\"smartpy_utils.py\" 311) literal (string \"1\")) True) ((\"smartpy_utils.py\" 312) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"smartpy_utils.py\" 221) literal (string \"1\"))) (((\"smartpy_utils.py\" 313) set ((\"\" -1) get_local \"utils_80\") ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) slice ((\"smartpy_utils.py\" 313) literal (intOrNat 1)) ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 313) size ((\"smartpy_utils.py\" 313) literal (string \"1\"))) ((\"smartpy_utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 313) literal (string \"1\"))) \"Some\" ((\"smartpy_utils.py\" 313) literal (string \"\")))))) ((\"smartpy_utils.py\" 315) define_local \"utils_81\" ((\"smartpy_utils.py\" 315) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 316) for_group \"utils_82\" ((\"smartpy_utils.py\" 316) range ((\"smartpy_utils.py\" 316) literal (intOrNat 0)) ((\"smartpy_utils.py\" 316) size ((\"smartpy_utils.py\" 316) get_local \"utils_80\")) ((\"smartpy_utils.py\" 316) literal (intOrNat 1))) (((\"smartpy_utils.py\" 317) set ((\"\" -1) get_local \"utils_81\") ((\"smartpy_utils.py\" 317) add ((\"smartpy_utils.py\" 317) mul_homo ((\"smartpy_utils.py\" 317) literal (intOrNat 10)) ((\"smartpy_utils.py\" 317) get_local \"utils_81\")) ((\"smartpy_utils.py\" 317) get_item ((\"smartpy_utils.py\" 308) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 317) open_variant ((\"smartpy_utils.py\" 317) slice ((\"smartpy_utils.py\" 316) iter \"utils_82\") ((\"smartpy_utils.py\" 317) literal (intOrNat 1)) ((\"smartpy_utils.py\" 317) get_local \"utils_80\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 319) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"smartpy_utils.py\" 221) literal (string \"1\"))) (((\"smartpy_utils.py\" 320) set ((\"\" -1) get_local \"utils_81\") ((\"smartpy_utils.py\" 320) mul_homo ((\"smartpy_utils.py\" 320) get_local \"utils_81\") ((\"smartpy_utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 47) verify ((\"utils.py\" 47) eq ((\"smartpy_utils.py\" 322) get_local \"utils_81\") ((\"utils.py\" 47) literal (intOrNat 1)))) ((\"smartpy_utils.py\" 311) define_local \"utils_83\" ((\"smartpy_utils.py\" 311) literal (string \"-1\")) True) ((\"smartpy_utils.py\" 312) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"smartpy_utils.py\" 221) literal (string \"-1\"))) (((\"smartpy_utils.py\" 313) set ((\"\" -1) get_local \"utils_83\") ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) slice ((\"smartpy_utils.py\" 313) literal (intOrNat 1)) ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 313) size ((\"smartpy_utils.py\" 313) literal (string \"-1\"))) ((\"smartpy_utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 313) literal (string \"-1\"))) \"Some\" ((\"smartpy_utils.py\" 313) literal (string \"\")))))) ((\"smartpy_utils.py\" 315) define_local \"utils_84\" ((\"smartpy_utils.py\" 315) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 316) for_group \"utils_85\" ((\"smartpy_utils.py\" 316) range ((\"smartpy_utils.py\" 316) literal (intOrNat 0)) ((\"smartpy_utils.py\" 316) size ((\"smartpy_utils.py\" 316) get_local \"utils_83\")) ((\"smartpy_utils.py\" 316) literal (intOrNat 1))) (((\"smartpy_utils.py\" 317) set ((\"\" -1) get_local \"utils_84\") ((\"smartpy_utils.py\" 317) add ((\"smartpy_utils.py\" 317) mul_homo ((\"smartpy_utils.py\" 317) literal (intOrNat 10)) ((\"smartpy_utils.py\" 317) get_local \"utils_84\")) ((\"smartpy_utils.py\" 317) get_item ((\"smartpy_utils.py\" 308) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 317) open_variant ((\"smartpy_utils.py\" 317) slice ((\"smartpy_utils.py\" 316) iter \"utils_85\") ((\"smartpy_utils.py\" 317) literal (intOrNat 1)) ((\"smartpy_utils.py\" 317) get_local \"utils_83\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 319) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"smartpy_utils.py\" 221) literal (string \"-1\"))) (((\"smartpy_utils.py\" 320) set ((\"\" -1) get_local \"utils_84\") ((\"smartpy_utils.py\" 320) mul_homo ((\"smartpy_utils.py\" 320) get_local \"utils_84\") ((\"smartpy_utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 48) verify ((\"utils.py\" 48) eq ((\"smartpy_utils.py\" 322) get_local \"utils_84\") ((\"utils.py\" 48) literal (int -1)))) ((\"utils.py\" 49) verify ((\"utils.py\" 49) eq ((\"utils.py\" 49) call_lambda ((\"smartpy/tests/utils.py\" 14) private \"int_of_string\") ((\"utils.py\" 49) literal (string \"2\"))) ((\"utils.py\" 49) literal (intOrNat 2)))) ((\"utils.py\" 326) define_local \"compute_utils_326\" ((\"utils.py\" 326) size ((\"utils.py\" 50) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 327) define_local \"utils_60\" ((\"utils.py\" 327) literal (nat 0)) True) ((\"utils.py\" 328) for_group \"utils_61\" ((\"utils.py\" 328) range ((\"utils.py\" 328) literal (intOrNat 0)) ((\"utils.py\" 326) get_local \"compute_utils_326\") ((\"utils.py\" 328) literal (intOrNat 1))) (((\"utils.py\" 329) define_local \"compute_utils_329\" ((\"utils.py\" 329) open_variant ((\"utils.py\" 329) slice ((\"utils.py\" 328) iter \"utils_61\") ((\"utils.py\" 329) literal (intOrNat 1)) ((\"utils.py\" 50) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 330) define_local \"compute_utils_330\" ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) is_nat ((\"utils.py\" 330) sub ((\"utils.py\" 326) get_local \"compute_utils_326\") ((\"utils.py\" 330) add ((\"utils.py\" 328) iter \"utils_61\") ((\"utils.py\" 330) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 330) literal (intOrNat 2))) True) ((\"utils.py\" 336) set ((\"\" -1) get_local \"utils_60\") ((\"utils.py\" 336) add ((\"utils.py\" 336) get_local \"utils_60\") ((\"utils.py\" 336) mul_homo ((\"utils.py\" 336) open_variant ((\"utils.py\" 336) is_nat ((\"utils.py\" 337) to_int ((\"utils.py\" 337) open_variant ((\"utils.py\" 337) unpack ((\"utils.py\" 335) add ((\"utils.py\" 335) add ((\"utils.py\" 335) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 329) get_local \"compute_utils_329\")) ((\"utils.py\" 335) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 330) get_local \"compute_utils_330\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 50) verify ((\"utils.py\" 50) eq ((\"utils.py\" 340) get_local \"utils_60\") ((\"utils.py\" 50) literal (intOrNat 256)))) ((\"utils.py\" 51) verify ((\"utils.py\" 51) eq ((\"utils.py\" 51) call_lambda ((\"smartpy/tests/utils.py\" 18) private \"int_of_bytes\") ((\"utils.py\" 51) literal (bytes \"0x0100\"))) ((\"utils.py\" 51) literal (intOrNat 256)))) ((\"smartpy_utils.py\" 258) define_local \"utils_86\" ((\"smartpy_utils.py\" 258) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 259) define_local \"utils_87\" ((\"smartpy_utils.py\" 259) list ) True) ((\"smartpy_utils.py\" 260) for_group \"utils_88\" ((\"smartpy_utils.py\" 260) range ((\"smartpy_utils.py\" 260) literal (intOrNat 0)) ((\"smartpy_utils.py\" 260) size ((\"smartpy_utils.py\" 260) literal (string \"a b\"))) ((\"smartpy_utils.py\" 260) literal (intOrNat 1))) (((\"smartpy_utils.py\" 261) if_block ((\"smartpy_utils.py\" 261) eq ((\"smartpy_utils.py\" 261) open_variant ((\"smartpy_utils.py\" 261) slice ((\"smartpy_utils.py\" 260) iter \"utils_88\") ((\"smartpy_utils.py\" 261) literal (intOrNat 1)) ((\"smartpy_utils.py\" 261) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 261) literal (string \" \"))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_87\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) slice ((\"smartpy_utils.py\" 262) get_local \"utils_86\") ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) is_nat ((\"smartpy_utils.py\" 262) sub ((\"smartpy_utils.py\" 260) iter \"utils_88\") ((\"smartpy_utils.py\" 262) get_local \"utils_86\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) get_local \"utils_87\"))) ((\"smartpy_utils.py\" 263) set ((\"\" -1) get_local \"utils_86\") ((\"smartpy_utils.py\" 263) add ((\"smartpy_utils.py\" 260) iter \"utils_88\") ((\"smartpy_utils.py\" 263) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 264) if_block ((\"smartpy_utils.py\" 264) gt ((\"smartpy_utils.py\" 264) size ((\"smartpy_utils.py\" 264) literal (string \"a b\"))) ((\"smartpy_utils.py\" 264) literal (intOrNat 0))) (((\"smartpy_utils.py\" 265) set ((\"smartpy_utils.py\" 265) get_local \"utils_87\") ((\"smartpy_utils.py\" 265) cons ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) slice ((\"smartpy_utils.py\" 265) get_local \"utils_86\") ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) is_nat ((\"smartpy_utils.py\" 265) sub ((\"smartpy_utils.py\" 265) size ((\"smartpy_utils.py\" 265) literal (string \"a b\"))) ((\"smartpy_utils.py\" 265) get_local \"utils_86\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) get_local \"utils_87\"))))) ((\"utils.py\" 53) verify ((\"utils.py\" 53) eq ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"smartpy_utils.py\" 266) rev ((\"smartpy_utils.py\" 266) get_local \"utils_87\")) (unknown 180))) ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"utils.py\" 53) list ((\"utils.py\" 53) literal (string \"a\")) ((\"utils.py\" 53) literal (string \"b\"))) (unknown 180))))) ((\"smartpy_utils.py\" 258) define_local \"utils_89\" ((\"smartpy_utils.py\" 258) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 259) define_local \"utils_90\" ((\"smartpy_utils.py\" 259) list ) True) ((\"smartpy_utils.py\" 260) for_group \"utils_91\" ((\"smartpy_utils.py\" 260) range ((\"smartpy_utils.py\" 260) literal (intOrNat 0)) ((\"smartpy_utils.py\" 260) size ((\"smartpy_utils.py\" 260) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 260) literal (intOrNat 1))) (((\"smartpy_utils.py\" 261) if_block ((\"smartpy_utils.py\" 261) eq ((\"smartpy_utils.py\" 261) open_variant ((\"smartpy_utils.py\" 261) slice ((\"smartpy_utils.py\" 260) iter \"utils_91\") ((\"smartpy_utils.py\" 261) literal (intOrNat 1)) ((\"smartpy_utils.py\" 261) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 261) literal (string \",\"))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_90\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) slice ((\"smartpy_utils.py\" 262) get_local \"utils_89\") ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) is_nat ((\"smartpy_utils.py\" 262) sub ((\"smartpy_utils.py\" 260) iter \"utils_91\") ((\"smartpy_utils.py\" 262) get_local \"utils_89\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) get_local \"utils_90\"))) ((\"smartpy_utils.py\" 263) set ((\"\" -1) get_local \"utils_89\") ((\"smartpy_utils.py\" 263) add ((\"smartpy_utils.py\" 260) iter \"utils_91\") ((\"smartpy_utils.py\" 263) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 264) if_block ((\"smartpy_utils.py\" 264) gt ((\"smartpy_utils.py\" 264) size ((\"smartpy_utils.py\" 264) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 264) literal (intOrNat 0))) (((\"smartpy_utils.py\" 265) set ((\"smartpy_utils.py\" 265) get_local \"utils_90\") ((\"smartpy_utils.py\" 265) cons ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) slice ((\"smartpy_utils.py\" 265) get_local \"utils_89\") ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) is_nat ((\"smartpy_utils.py\" 265) sub ((\"smartpy_utils.py\" 265) size ((\"smartpy_utils.py\" 265) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 265) get_local \"utils_89\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) get_local \"utils_90\"))))) ((\"utils.py\" 54) verify ((\"utils.py\" 54) eq ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"smartpy_utils.py\" 266) rev ((\"smartpy_utils.py\" 266) get_local \"utils_90\")) (unknown 183))) ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"utils.py\" 54) list ((\"utils.py\" 54) literal (string \"b\")) ((\"utils.py\" 54) literal (string \"a\"))) (unknown 183))))) ((\"utils.py\" 55) verify ((\"utils.py\" 55) eq ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) call_lambda ((\"smartpy/tests/utils.py\" 22) private \"string_split\") ((\"utils.py\" 55) record (separator ((\"utils.py\" 55) literal (string \",,\"))) (text ((\"utils.py\" 55) literal (string \"a,b\"))))) (unknown 184))) ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) list ((\"utils.py\" 55) literal (string \"a,b\"))) (unknown 184))))) ((\"utils.py\" 57) verify ((\"utils.py\" 57) eq ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"a\")) ((\"smartpy_utils.py\" 221) literal (string \"abc\"))) ((\"utils.py\" 57) literal (bool True)))) ((\"utils.py\" 58) verify ((\"utils.py\" 58) eq ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"b\")) ((\"smartpy_utils.py\" 221) literal (string \"abc\"))) ((\"utils.py\" 58) literal (bool False)))) ((\"utils.py\" 59) verify ((\"utils.py\" 59) eq ((\"utils.py\" 59) call_lambda ((\"smartpy/tests/utils.py\" 26) private \"string_starts_with\") ((\"utils.py\" 59) record (prefix ((\"utils.py\" 59) literal (string \"a\"))) (text ((\"utils.py\" 59) literal (string \"abc\"))))) ((\"utils.py\" 59) literal (bool True)))) ((\"utils.py\" 61) verify ((\"utils.py\" 61) eq ((\"smartpy_utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 162) literal (string \"abc\")) ((\"smartpy_utils.py\" 162) literal (string \"c\"))) ((\"utils.py\" 61) literal (bool True)))) ((\"utils.py\" 62) verify ((\"utils.py\" 62) eq ((\"smartpy_utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 162) literal (string \"abc\")) ((\"smartpy_utils.py\" 162) literal (string \"b\"))) ((\"utils.py\" 62) literal (bool False)))) ((\"utils.py\" 63) verify ((\"utils.py\" 63) eq ((\"utils.py\" 63) call_lambda ((\"smartpy/tests/utils.py\" 30) private \"string_ends_with\") ((\"utils.py\" 63) record (postfix ((\"utils.py\" 63) literal (string \"c\"))) (text ((\"utils.py\" 63) literal (string \"abc\"))))) ((\"utils.py\" 63) literal (bool True)))) ((\"smartpy_utils.py\" 83) define_local \"utils_92_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_93_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3)) ((\"smartpy_utils.py\" 84) literal (intOrNat 4)) ((\"smartpy_utils.py\" 84) literal (intOrNat 5))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_92_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_93_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_92_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_93_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_92_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_93_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_92_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_93_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)) ((\"smartpy_utils.py\" 90) literal (intOrNat 4)) ((\"smartpy_utils.py\" 90) literal (intOrNat 5)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_94_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_95_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_96_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_95_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_97_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_98_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_92_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_96_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_95_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_95_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_96_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_96_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_95_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"value\"))))))))) ((\"utils.py\" 65) verify ((\"utils.py\" 65) eq ((\"smartpy_utils.py\" 112) get_local \"utils_94_result\") ((\"utils.py\" 65) literal (intOrNat 3)))) ((\"smartpy_utils.py\" 83) define_local \"utils_99_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_100_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_99_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_100_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_99_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_100_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_99_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_100_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_99_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_100_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90i\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_101_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_102_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_103_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_102_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_104_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_105_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_99_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_103_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_102_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_102_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_103_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_103_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_102_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"value\"))))))))) ((\"utils.py\" 66) verify ((\"utils.py\" 66) eq ((\"smartpy_utils.py\" 112) get_local \"utils_101_result\") ((\"utils.py\" 66) literal (intOrNat 2)))) ((\"utils.py\" 67) verify ((\"utils.py\" 67) eq ((\"utils.py\" 67) call_lambda ((\"smartpy/tests/utils.py\" 38) private \"math_median\") ((\"utils.py\" 67) list ((\"utils.py\" 67) literal (intOrNat 1)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 5)))) ((\"utils.py\" 67) literal (intOrNat 2)))) ((\"utils.py\" 118) define_local \"compute_utils_118\" ((\"utils.py\" 118) sub ((\"utils.py\" 118) literal (intOrNat 3)) ((\"utils.py\" 118) size ((\"utils.py\" 69) literal (bytes \"0x11\")))) True) ((\"utils.py\" 119) define_local \"utils_62_bytes\" ((\"utils.py\" 119) literal (bytes \"0x\")) True) ((\"utils.py\" 120) while_block ((\"utils.py\" 120) lt ((\"utils.py\" 120) size ((\"utils.py\" 120) get_local \"utils_62_bytes\")) ((\"utils.py\" 118) open_variant ((\"utils.py\" 118) is_nat ((\"utils.py\" 118) get_local \"compute_utils_118\")) \"Some\" \"None\")) (((\"utils.py\" 121) set ((\"\" -1) get_local \"utils_62_bytes\") ((\"utils.py\" 121) add ((\"utils.py\" 69) literal (bytes \"0x00\")) ((\"utils.py\" 121) get_local \"utils_62_bytes\"))))) ((\"utils.py\" 69) verify ((\"utils.py\" 69) eq ((\"utils.py\" 122) add ((\"utils.py\" 122) get_local \"utils_62_bytes\") ((\"utils.py\" 69) literal (bytes \"0x11\"))) ((\"utils.py\" 69) literal (bytes \"0x000011\")))) ((\"utils.py\" 126) define_local \"compute_utils_126\" ((\"utils.py\" 126) sub ((\"utils.py\" 126) literal (intOrNat 3)) ((\"utils.py\" 126) size ((\"utils.py\" 70) literal (bytes \"0x11\")))) True) ((\"utils.py\" 127) define_local \"utils_63_bytes\" ((\"utils.py\" 127) literal (bytes \"0x\")) True) ((\"utils.py\" 128) while_block ((\"utils.py\" 128) lt ((\"utils.py\" 128) size ((\"utils.py\" 128) get_local \"utils_63_bytes\")) ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) is_nat ((\"utils.py\" 126) get_local \"compute_utils_126\")) \"Some\" \"None\")) (((\"utils.py\" 129) set ((\"\" -1) get_local \"utils_63_bytes\") ((\"utils.py\" 129) add ((\"utils.py\" 70) literal (bytes \"0x00\")) ((\"utils.py\" 129) get_local \"utils_63_bytes\"))))) ((\"utils.py\" 70) verify ((\"utils.py\" 70) eq ((\"utils.py\" 130) add ((\"utils.py\" 70) literal (bytes \"0x11\")) ((\"utils.py\" 130) get_local \"utils_63_bytes\")) ((\"utils.py\" 70) literal (bytes \"0x110000\")))) ((\"smartpy_utils.py\" 148) verify ((\"smartpy_utils.py\" 148) literal (bool True)) ((\"smartpy_utils.py\" 148) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 150) define_local \"utils_106_bytes\" ((\"smartpy_utils.py\" 150) literal (bytes \"0x\")) True) ((\"smartpy_utils.py\" 151) define_local \"utils_107_value\" ((\"smartpy_utils.py\" 151) literal (intOrNat 54)) True) ((\"smartpy_utils.py\" 152) while_block ((\"smartpy_utils.py\" 152) neq ((\"smartpy_utils.py\" 152) get_local \"utils_107_value\") ((\"smartpy_utils.py\" 152) literal (intOrNat 0))) (((\"smartpy_utils.py\" 153) set ((\"\" -1) get_local \"utils_106_bytes\") ((\"smartpy_utils.py\" 153) add ((\"smartpy_utils.py\" 143) open_variant ((\"smartpy_utils.py\" 143) slice ((\"smartpy_utils.py\" 143) literal (intOrNat 6)) ((\"smartpy_utils.py\" 143) literal (intOrNat 1)) ((\"smartpy_utils.py\" 143) pack ((\"smartpy_utils.py\" 143) MUL ((\"smartpy_utils.py\" 143) to_int ((\"smartpy_utils.py\" 153) get_local \"utils_107_value\")) ((\"smartpy_utils.py\" 143) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 153) get_local \"utils_106_bytes\"))) ((\"smartpy_utils.py\" 154) set ((\"\" -1) get_local \"utils_107_value\") ((\"smartpy_utils.py\" 154) lsr ((\"smartpy_utils.py\" 154) get_local \"utils_107_value\") ((\"smartpy_utils.py\" 154) literal (intOrNat 8)))))) ((\"utils.py\" 71) verify ((\"utils.py\" 71) eq ((\"smartpy_utils.py\" 156) get_local \"utils_106_bytes\") ((\"utils.py\" 71) literal (bytes \"0x36\")))) ((\"utils.py\" 72) verify ((\"utils.py\" 72) eq ((\"smartpy_utils.py\" 139) open_variant ((\"smartpy_utils.py\" 139) slice ((\"smartpy_utils.py\" 139) literal (intOrNat 6)) ((\"smartpy_utils.py\" 139) open_variant ((\"smartpy_utils.py\" 139) is_nat ((\"smartpy_utils.py\" 139) sub ((\"smartpy_utils.py\" 139) size ((\"smartpy_utils.py\" 134) pack ((\"smartpy_utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"smartpy_utils.py\" 139) literal (intOrNat 6)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 134) pack ((\"smartpy_utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"smartpy_utils.py\" 139) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 72) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"smartpy_utils.py\" 148) verify ((\"smartpy_utils.py\" 148) lt ((\"smartpy_utils.py\" 292) size ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) ((\"smartpy_utils.py\" 148) literal (intOrNat 28948022309329048855892746252171976963317496166410141009864396001978282409984))) ((\"smartpy_utils.py\" 148) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 150) define_local \"utils_108_bytes\" ((\"smartpy_utils.py\" 150) literal (bytes \"0x\")) True) ((\"smartpy_utils.py\" 151) define_local \"utils_109_value\" ((\"smartpy_utils.py\" 292) size ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) True) ((\"smartpy_utils.py\" 152) while_block ((\"smartpy_utils.py\" 152) neq ((\"smartpy_utils.py\" 152) get_local \"utils_109_value\") ((\"smartpy_utils.py\" 152) literal (intOrNat 0))) (((\"smartpy_utils.py\" 153) set ((\"\" -1) get_local \"utils_108_bytes\") ((\"smartpy_utils.py\" 153) add ((\"smartpy_utils.py\" 143) open_variant ((\"smartpy_utils.py\" 143) slice ((\"smartpy_utils.py\" 143) literal (intOrNat 6)) ((\"smartpy_utils.py\" 143) literal (intOrNat 1)) ((\"smartpy_utils.py\" 143) pack ((\"smartpy_utils.py\" 143) MUL ((\"smartpy_utils.py\" 143) to_int ((\"smartpy_utils.py\" 153) get_local \"utils_109_value\")) ((\"smartpy_utils.py\" 143) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 153) get_local \"utils_108_bytes\"))) ((\"smartpy_utils.py\" 154) set ((\"\" -1) get_local \"utils_109_value\") ((\"smartpy_utils.py\" 154) lsr ((\"smartpy_utils.py\" 154) get_local \"utils_109_value\") ((\"smartpy_utils.py\" 154) literal (intOrNat 8)))))) ((\"smartpy_utils.py\" 292) define_local \"lengthBytes\" ((\"smartpy_utils.py\" 156) get_local \"utils_108_bytes\") True) ((\"smartpy_utils.py\" 293) while_block ((\"smartpy_utils.py\" 293) lt ((\"smartpy_utils.py\" 293) size ((\"smartpy_utils.py\" 293) get_local \"lengthBytes\")) ((\"smartpy_utils.py\" 293) literal (intOrNat 4))) (((\"smartpy_utils.py\" 294) set ((\"\" -1) get_local \"lengthBytes\") ((\"smartpy_utils.py\" 294) add ((\"smartpy_utils.py\" 294) literal (bytes \"0x00\")) ((\"smartpy_utils.py\" 294) get_local \"lengthBytes\"))))) ((\"utils.py\" 73) verify ((\"utils.py\" 73) eq ((\"smartpy_utils.py\" 301) open_variant ((\"smartpy_utils.py\" 301) unpack ((\"smartpy_utils.py\" 300) concat ((\"smartpy_utils.py\" 300) list ((\"smartpy_utils.py\" 300) literal (bytes \"0x05\")) ((\"smartpy_utils.py\" 300) literal (bytes \"0x01\")) ((\"smartpy_utils.py\" 300) get_local \"lengthBytes\") ((\"utils.py\" 73) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"smartpy_utils.py\" 301) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 73) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 75) verify ((\"utils.py\" 75) eq ((\"smartpy_utils.py\" 346) and ((\"smartpy_utils.py\" 346) ge ((\"smartpy_utils.py\" 346) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 75) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"smartpy_utils.py\" 346) le ((\"smartpy_utils.py\" 346) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 75) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 75) literal (bool False)))) ((\"utils.py\" 76) verify ((\"smartpy_utils.py\" 346) and ((\"smartpy_utils.py\" 346) ge ((\"smartpy_utils.py\" 346) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 76) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"smartpy_utils.py\" 346) le ((\"smartpy_utils.py\" 346) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 76) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"\" -1) lambda 0 None False None \"\" (((\"smartpy_utils.py\" 326) define_local \"compute_smartpy_utils_326\" ((\"smartpy_utils.py\" 326) size ((\"\" -1) lambda_params 0 \"\" (unknown 139))) True) ((\"smartpy_utils.py\" 327) define_local \"utils_56\" ((\"smartpy_utils.py\" 327) literal (nat 0)) True) ((\"smartpy_utils.py\" 328) for_group \"utils_57\" ((\"smartpy_utils.py\" 328) range ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) ((\"smartpy_utils.py\" 326) get_local \"compute_smartpy_utils_326\") ((\"smartpy_utils.py\" 328) literal (intOrNat 1))) (((\"smartpy_utils.py\" 329) define_local \"compute_smartpy_utils_329\" ((\"smartpy_utils.py\" 329) open_variant ((\"smartpy_utils.py\" 329) slice ((\"smartpy_utils.py\" 328) iter \"utils_57\") ((\"smartpy_utils.py\" 329) literal (intOrNat 1)) ((\"\" -1) lambda_params 0 \"\" (unknown 139))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 330) define_local \"compute_smartpy_utils_330\" ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) is_nat ((\"smartpy_utils.py\" 330) sub ((\"smartpy_utils.py\" 326) get_local \"compute_smartpy_utils_326\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 328) iter \"utils_57\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 330) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 336) set ((\"\" -1) get_local \"utils_56\") ((\"smartpy_utils.py\" 336) add ((\"smartpy_utils.py\" 336) get_local \"utils_56\") ((\"smartpy_utils.py\" 336) mul_homo ((\"smartpy_utils.py\" 336) open_variant ((\"smartpy_utils.py\" 336) is_nat ((\"smartpy_utils.py\" 337) to_int ((\"smartpy_utils.py\" 337) open_variant ((\"smartpy_utils.py\" 337) unpack ((\"smartpy_utils.py\" 335) add ((\"smartpy_utils.py\" 335) add ((\"smartpy_utils.py\" 335) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 329) get_local \"compute_smartpy_utils_329\")) ((\"smartpy_utils.py\" 335) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 330) get_local \"compute_smartpy_utils_330\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 19) result ((\"smartpy_utils.py\" 340) get_local \"utils_56\"))))) (int_of_string ((\"\" -1) lambda 1 None False None \"\" (((\"smartpy_utils.py\" 311) define_local \"utils_58\" ((\"\" -1) lambda_params 1 \"\" (unknown 144)) True) ((\"smartpy_utils.py\" 312) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"\" -1) lambda_params 1 \"\" (unknown 144))) (((\"smartpy_utils.py\" 313) set ((\"\" -1) get_local \"utils_58\") ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) slice ((\"smartpy_utils.py\" 313) literal (intOrNat 1)) ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 313) size ((\"\" -1) lambda_params 1 \"\" (unknown 144))) ((\"smartpy_utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"\" -1) lambda_params 1 \"\" (unknown 144))) \"Some\" ((\"smartpy_utils.py\" 313) literal (string \"\")))))) ((\"smartpy_utils.py\" 315) define_local \"utils_59\" ((\"smartpy_utils.py\" 315) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 316) for_group \"utils_60\" ((\"smartpy_utils.py\" 316) range ((\"smartpy_utils.py\" 316) literal (intOrNat 0)) ((\"smartpy_utils.py\" 316) size ((\"smartpy_utils.py\" 316) get_local \"utils_58\")) ((\"smartpy_utils.py\" 316) literal (intOrNat 1))) (((\"smartpy_utils.py\" 317) set ((\"\" -1) get_local \"utils_59\") ((\"smartpy_utils.py\" 317) add ((\"smartpy_utils.py\" 317) mul_homo ((\"smartpy_utils.py\" 317) literal (intOrNat 10)) ((\"smartpy_utils.py\" 317) get_local \"utils_59\")) ((\"smartpy_utils.py\" 317) get_item ((\"smartpy_utils.py\" 308) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 317) open_variant ((\"smartpy_utils.py\" 317) slice ((\"smartpy_utils.py\" 316) iter \"utils_60\") ((\"smartpy_utils.py\" 317) literal (intOrNat 1)) ((\"smartpy_utils.py\" 317) get_local \"utils_58\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 319) if_block ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 221) literal (string \"-\")) ((\"\" -1) lambda_params 1 \"\" (unknown 144))) (((\"smartpy_utils.py\" 320) set ((\"\" -1) get_local \"utils_59\") ((\"smartpy_utils.py\" 320) mul_homo ((\"smartpy_utils.py\" 320) get_local \"utils_59\") ((\"smartpy_utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 15) result ((\"smartpy_utils.py\" 322) get_local \"utils_59\"))))) (math_median ((\"\" -1) lambda 2 None False None \"\" (((\"smartpy_utils.py\" 83) define_local \"utils_61_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_62_x\" ((\"\" -1) lambda_params 2 \"\" (unknown 147)) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_61_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_62_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_61_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_62_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_61_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_62_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_61_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_62_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"\" -1) lambda_params 2 \"\" (unknown 147))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_63_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_64_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_65_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_64_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_66_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_67_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_61_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_65_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_64_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_64_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_65_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_65_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_64_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"value\"))))))))) ((\"utils.py\" 39) result ((\"smartpy_utils.py\" 112) get_local \"utils_63_result\"))))) (math_pow ((\"\" -1) lambda 3 None False None \"\" (((\"utils.py\" 35) result ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 35) attr ((\"\" -1) lambda_params 3 \"\" (unknown 154)) \"exponent\") ((\"utils.py\" 35) attr ((\"\" -1) lambda_params 3 \"\" (unknown 154)) \"base\") ((\"smartpy_utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"\" -1) lambda 4 None False None \"\" (((\"utils.py\" 31) result ((\"smartpy_utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 31) attr ((\"\" -1) lambda_params 4 \"\" (unknown 155)) \"text\") ((\"utils.py\" 31) attr ((\"\" -1) lambda_params 4 \"\" (unknown 155)) \"postfix\")))))) (string_of_int ((\"\" -1) lambda 5 None False None \"\" (((\"smartpy_utils.py\" 273) define_local \"utils_68\" ((\"smartpy_utils.py\" 273) abs ((\"\" -1) lambda_params 5 \"\" (unknown 156))) True) ((\"smartpy_utils.py\" 274) define_local \"utils_69\" ((\"smartpy_utils.py\" 274) list ) True) ((\"smartpy_utils.py\" 276) if_block ((\"smartpy_utils.py\" 276) eq ((\"smartpy_utils.py\" 276) get_local \"utils_68\") ((\"smartpy_utils.py\" 276) literal (intOrNat 0))) (((\"smartpy_utils.py\" 277) set ((\"smartpy_utils.py\" 277) get_local \"utils_69\") ((\"smartpy_utils.py\" 277) cons ((\"smartpy_utils.py\" 277) literal (string \"0\")) ((\"smartpy_utils.py\" 277) get_local \"utils_69\"))))) ((\"smartpy_utils.py\" 278) while_block ((\"smartpy_utils.py\" 278) gt ((\"smartpy_utils.py\" 278) get_local \"utils_68\") ((\"smartpy_utils.py\" 278) literal (intOrNat 0))) (((\"smartpy_utils.py\" 279) set ((\"smartpy_utils.py\" 279) get_local \"utils_69\") ((\"smartpy_utils.py\" 279) cons ((\"smartpy_utils.py\" 279) get_item ((\"smartpy_utils.py\" 271) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 279) mod ((\"smartpy_utils.py\" 279) get_local \"utils_68\") ((\"smartpy_utils.py\" 279) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 279) get_local \"utils_69\"))) ((\"smartpy_utils.py\" 280) set ((\"\" -1) get_local \"utils_68\") ((\"smartpy_utils.py\" 280) div ((\"smartpy_utils.py\" 280) get_local \"utils_68\") ((\"smartpy_utils.py\" 280) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 282) define_local \"utils_70\" ((\"smartpy_utils.py\" 282) concat ((\"smartpy_utils.py\" 282) get_local \"utils_69\")) True) ((\"smartpy_utils.py\" 283) if_block ((\"smartpy_utils.py\" 272) lt ((\"\" -1) lambda_params 5 \"\" (unknown 156)) ((\"smartpy_utils.py\" 272) literal (intOrNat 0))) (((\"smartpy_utils.py\" 284) set ((\"\" -1) get_local \"utils_70\") ((\"smartpy_utils.py\" 284) add ((\"smartpy_utils.py\" 284) literal (string \"-\")) ((\"smartpy_utils.py\" 284) get_local \"utils_70\"))))) ((\"utils.py\" 11) result ((\"smartpy_utils.py\" 286) get_local \"utils_70\"))))) (string_split ((\"\" -1) lambda 6 None False None \"\" (((\"smartpy_utils.py\" 258) define_local \"utils_71\" ((\"smartpy_utils.py\" 258) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 259) define_local \"utils_72\" ((\"smartpy_utils.py\" 259) list ) True) ((\"smartpy_utils.py\" 260) for_group \"utils_73\" ((\"smartpy_utils.py\" 260) range ((\"smartpy_utils.py\" 260) literal (intOrNat 0)) ((\"smartpy_utils.py\" 260) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 160)) \"text\")) ((\"smartpy_utils.py\" 260) literal (intOrNat 1))) (((\"smartpy_utils.py\" 261) if_block ((\"smartpy_utils.py\" 261) eq ((\"smartpy_utils.py\" 261) open_variant ((\"smartpy_utils.py\" 261) slice ((\"smartpy_utils.py\" 260) iter \"utils_73\") ((\"smartpy_utils.py\" 261) literal (intOrNat 1)) ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 160)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 160)) \"separator\")) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_72\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) slice ((\"smartpy_utils.py\" 262) get_local \"utils_71\") ((\"smartpy_utils.py\" 262) open_variant ((\"smartpy_utils.py\" 262) is_nat ((\"smartpy_utils.py\" 262) sub ((\"smartpy_utils.py\" 260) iter \"utils_73\") ((\"smartpy_utils.py\" 262) get_local \"utils_71\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 160)) \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 262) get_local \"utils_72\"))) ((\"smartpy_utils.py\" 263) set ((\"\" -1) get_local \"utils_71\") ((\"smartpy_utils.py\" 263) add ((\"smartpy_utils.py\" 260) iter \"utils_73\") ((\"smartpy_utils.py\" 263) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 264) if_block ((\"smartpy_utils.py\" 264) gt ((\"smartpy_utils.py\" 264) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 160)) \"text\")) ((\"smartpy_utils.py\" 264) literal (intOrNat 0))) (((\"smartpy_utils.py\" 265) set ((\"smartpy_utils.py\" 265) get_local \"utils_72\") ((\"smartpy_utils.py\" 265) cons ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) slice ((\"smartpy_utils.py\" 265) get_local \"utils_71\") ((\"smartpy_utils.py\" 265) open_variant ((\"smartpy_utils.py\" 265) is_nat ((\"smartpy_utils.py\" 265) sub ((\"smartpy_utils.py\" 265) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 160)) \"text\")) ((\"smartpy_utils.py\" 265) get_local \"utils_71\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 160)) \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 265) get_local \"utils_72\"))))) ((\"utils.py\" 23) result ((\"smartpy_utils.py\" 266) rev ((\"smartpy_utils.py\" 266) get_local \"utils_72\")))))) (string_starts_with ((\"\" -1) lambda 7 None False None \"\" (((\"utils.py\" 27) result ((\"smartpy_utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 27) attr ((\"\" -1) lambda_params 7 \"\" (unknown 163)) \"prefix\") ((\"utils.py\" 27) attr ((\"\" -1) lambda_params 7 \"\" (unknown 163)) \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"\" -1) static_id 0)",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 },
 {
  "shortname": "UtilsTester2_compilation",
  "longname": "UtilsTester2_compilation",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"\" -1) static_id 0) \nstorage ()\nstorage_type ((unknown 2))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 113) (((\"utils.py\" 273) define_local \"utils_80\" ((\"utils.py\" 273) literal (intOrNat 1)) True) ((\"utils.py\" 274) define_local \"utils_81\" ((\"utils.py\" 274) list ) True) ((\"utils.py\" 276) if_block ((\"utils.py\" 276) eq ((\"utils.py\" 276) get_local \"utils_80\") ((\"utils.py\" 276) literal (intOrNat 0))) (((\"utils.py\" 277) set ((\"utils.py\" 277) get_local \"utils_81\") ((\"utils.py\" 277) cons ((\"utils.py\" 277) literal (string \"0\")) ((\"utils.py\" 277) get_local \"utils_81\"))))) ((\"utils.py\" 278) while_block ((\"utils.py\" 278) gt ((\"utils.py\" 278) get_local \"utils_80\") ((\"utils.py\" 278) literal (intOrNat 0))) (((\"utils.py\" 279) set ((\"utils.py\" 279) get_local \"utils_81\") ((\"utils.py\" 279) cons ((\"utils.py\" 279) get_item ((\"utils.py\" 271) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 279) mod ((\"utils.py\" 279) get_local \"utils_80\") ((\"utils.py\" 279) literal (intOrNat 10)))) ((\"utils.py\" 279) get_local \"utils_81\"))) ((\"utils.py\" 280) set ((\"\" -1) get_local \"utils_80\") ((\"utils.py\" 280) div ((\"utils.py\" 280) get_local \"utils_80\") ((\"utils.py\" 280) literal (intOrNat 10)))))) ((\"utils.py\" 282) define_local \"utils_82\" ((\"utils.py\" 282) concat ((\"utils.py\" 282) get_local \"utils_81\")) True) ((\"utils.py\" 283) if_block ((\"utils.py\" 283) literal (bool True)) (((\"utils.py\" 284) set ((\"\" -1) get_local \"utils_82\") ((\"utils.py\" 284) add ((\"utils.py\" 284) literal (string \"-\")) ((\"utils.py\" 284) get_local \"utils_82\"))))) ((\"utils.py\" 114) verify ((\"utils.py\" 114) eq ((\"utils.py\" 286) get_local \"utils_82\") ((\"utils.py\" 114) literal (string \"-1\")))) ((\"utils.py\" 273) define_local \"utils_83\" ((\"utils.py\" 273) literal (intOrNat 1)) True) ((\"utils.py\" 274) define_local \"utils_84\" ((\"utils.py\" 274) list ) True) ((\"utils.py\" 276) if_block ((\"utils.py\" 276) eq ((\"utils.py\" 276) get_local \"utils_83\") ((\"utils.py\" 276) literal (intOrNat 0))) (((\"utils.py\" 277) set ((\"utils.py\" 277) get_local \"utils_84\") ((\"utils.py\" 277) cons ((\"utils.py\" 277) literal (string \"0\")) ((\"utils.py\" 277) get_local \"utils_84\"))))) ((\"utils.py\" 278) while_block ((\"utils.py\" 278) gt ((\"utils.py\" 278) get_local \"utils_83\") ((\"utils.py\" 278) literal (intOrNat 0))) (((\"utils.py\" 279) set ((\"utils.py\" 279) get_local \"utils_84\") ((\"utils.py\" 279) cons ((\"utils.py\" 279) get_item ((\"utils.py\" 271) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 279) mod ((\"utils.py\" 279) get_local \"utils_83\") ((\"utils.py\" 279) literal (intOrNat 10)))) ((\"utils.py\" 279) get_local \"utils_84\"))) ((\"utils.py\" 280) set ((\"\" -1) get_local \"utils_83\") ((\"utils.py\" 280) div ((\"utils.py\" 280) get_local \"utils_83\") ((\"utils.py\" 280) literal (intOrNat 10)))))) ((\"utils.py\" 282) define_local \"utils_85\" ((\"utils.py\" 282) concat ((\"utils.py\" 282) get_local \"utils_84\")) True) ((\"utils.py\" 283) if_block ((\"utils.py\" 283) literal (bool False)) (((\"utils.py\" 284) set ((\"\" -1) get_local \"utils_85\") ((\"utils.py\" 284) add ((\"utils.py\" 284) literal (string \"-\")) ((\"utils.py\" 284) get_local \"utils_85\"))))) ((\"utils.py\" 115) verify ((\"utils.py\" 115) eq ((\"utils.py\" 286) get_local \"utils_85\") ((\"utils.py\" 115) literal (string \"1\")))) ((\"utils.py\" 116) verify ((\"utils.py\" 116) eq ((\"utils.py\" 116) call_lambda ((\"smartpy/tests/utils.py\" 81) private \"string_of_int\") ((\"utils.py\" 116) literal (intOrNat 2))) ((\"utils.py\" 116) literal (string \"2\")))) ((\"utils.py\" 311) define_local \"utils_86\" ((\"utils.py\" 311) literal (string \"1\")) True) ((\"utils.py\" 312) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 221) literal (string \"1\"))) (((\"utils.py\" 313) set ((\"\" -1) get_local \"utils_86\") ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) slice ((\"utils.py\" 313) literal (intOrNat 1)) ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 313) size ((\"utils.py\" 313) literal (string \"1\"))) ((\"utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 313) literal (string \"1\"))) \"Some\" ((\"utils.py\" 313) literal (string \"\")))))) ((\"utils.py\" 315) define_local \"utils_87\" ((\"utils.py\" 315) literal (intOrNat 0)) True) ((\"utils.py\" 316) for_group \"utils_88\" ((\"utils.py\" 316) range ((\"utils.py\" 316) literal (intOrNat 0)) ((\"utils.py\" 316) size ((\"utils.py\" 316) get_local \"utils_86\")) ((\"utils.py\" 316) literal (intOrNat 1))) (((\"utils.py\" 317) set ((\"\" -1) get_local \"utils_87\") ((\"utils.py\" 317) add ((\"utils.py\" 317) mul_homo ((\"utils.py\" 317) literal (intOrNat 10)) ((\"utils.py\" 317) get_local \"utils_87\")) ((\"utils.py\" 317) get_item ((\"utils.py\" 308) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 317) open_variant ((\"utils.py\" 317) slice ((\"utils.py\" 316) iter \"utils_88\") ((\"utils.py\" 317) literal (intOrNat 1)) ((\"utils.py\" 317) get_local \"utils_86\")) \"Some\" \"None\")))))) ((\"utils.py\" 319) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 221) literal (string \"1\"))) (((\"utils.py\" 320) set ((\"\" -1) get_local \"utils_87\") ((\"utils.py\" 320) mul_homo ((\"utils.py\" 320) get_local \"utils_87\") ((\"utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 118) verify ((\"utils.py\" 118) eq ((\"utils.py\" 322) get_local \"utils_87\") ((\"utils.py\" 118) literal (intOrNat 1)))) ((\"utils.py\" 311) define_local \"utils_89\" ((\"utils.py\" 311) literal (string \"-1\")) True) ((\"utils.py\" 312) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 221) literal (string \"-1\"))) (((\"utils.py\" 313) set ((\"\" -1) get_local \"utils_89\") ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) slice ((\"utils.py\" 313) literal (intOrNat 1)) ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 313) size ((\"utils.py\" 313) literal (string \"-1\"))) ((\"utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 313) literal (string \"-1\"))) \"Some\" ((\"utils.py\" 313) literal (string \"\")))))) ((\"utils.py\" 315) define_local \"utils_90\" ((\"utils.py\" 315) literal (intOrNat 0)) True) ((\"utils.py\" 316) for_group \"utils_91\" ((\"utils.py\" 316) range ((\"utils.py\" 316) literal (intOrNat 0)) ((\"utils.py\" 316) size ((\"utils.py\" 316) get_local \"utils_89\")) ((\"utils.py\" 316) literal (intOrNat 1))) (((\"utils.py\" 317) set ((\"\" -1) get_local \"utils_90\") ((\"utils.py\" 317) add ((\"utils.py\" 317) mul_homo ((\"utils.py\" 317) literal (intOrNat 10)) ((\"utils.py\" 317) get_local \"utils_90\")) ((\"utils.py\" 317) get_item ((\"utils.py\" 308) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 317) open_variant ((\"utils.py\" 317) slice ((\"utils.py\" 316) iter \"utils_91\") ((\"utils.py\" 317) literal (intOrNat 1)) ((\"utils.py\" 317) get_local \"utils_89\")) \"Some\" \"None\")))))) ((\"utils.py\" 319) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"utils.py\" 221) literal (string \"-1\"))) (((\"utils.py\" 320) set ((\"\" -1) get_local \"utils_90\") ((\"utils.py\" 320) mul_homo ((\"utils.py\" 320) get_local \"utils_90\") ((\"utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 119) verify ((\"utils.py\" 119) eq ((\"utils.py\" 322) get_local \"utils_90\") ((\"utils.py\" 119) literal (int -1)))) ((\"utils.py\" 120) verify ((\"utils.py\" 120) eq ((\"utils.py\" 120) call_lambda ((\"smartpy/tests/utils.py\" 85) private \"int_of_string\") ((\"utils.py\" 120) literal (string \"2\"))) ((\"utils.py\" 120) literal (intOrNat 2)))) ((\"utils.py\" 326) define_local \"compute_utils_326\" ((\"utils.py\" 326) size ((\"utils.py\" 121) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 327) define_local \"utils_92\" ((\"utils.py\" 327) literal (nat 0)) True) ((\"utils.py\" 328) for_group \"utils_93\" ((\"utils.py\" 328) range ((\"utils.py\" 328) literal (intOrNat 0)) ((\"utils.py\" 326) get_local \"compute_utils_326\") ((\"utils.py\" 328) literal (intOrNat 1))) (((\"utils.py\" 329) define_local \"compute_utils_329\" ((\"utils.py\" 329) open_variant ((\"utils.py\" 329) slice ((\"utils.py\" 328) iter \"utils_93\") ((\"utils.py\" 329) literal (intOrNat 1)) ((\"utils.py\" 121) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 330) define_local \"compute_utils_330\" ((\"utils.py\" 330) mul_homo ((\"utils.py\" 330) open_variant ((\"utils.py\" 330) is_nat ((\"utils.py\" 330) sub ((\"utils.py\" 326) get_local \"compute_utils_326\") ((\"utils.py\" 330) add ((\"utils.py\" 328) iter \"utils_93\") ((\"utils.py\" 330) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 330) literal (intOrNat 2))) True) ((\"utils.py\" 336) set ((\"\" -1) get_local \"utils_92\") ((\"utils.py\" 336) add ((\"utils.py\" 336) get_local \"utils_92\") ((\"utils.py\" 336) mul_homo ((\"utils.py\" 336) open_variant ((\"utils.py\" 336) is_nat ((\"utils.py\" 337) to_int ((\"utils.py\" 337) open_variant ((\"utils.py\" 337) unpack ((\"utils.py\" 335) add ((\"utils.py\" 335) add ((\"utils.py\" 335) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 329) get_local \"compute_utils_329\")) ((\"utils.py\" 335) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 330) get_local \"compute_utils_330\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 121) verify ((\"utils.py\" 121) eq ((\"utils.py\" 340) get_local \"utils_92\") ((\"utils.py\" 121) literal (intOrNat 256)))) ((\"utils.py\" 122) verify ((\"utils.py\" 122) eq ((\"utils.py\" 122) call_lambda ((\"smartpy/tests/utils.py\" 89) private \"int_of_bytes\") ((\"utils.py\" 122) literal (bytes \"0x0100\"))) ((\"utils.py\" 122) literal (intOrNat 256)))) ((\"utils.py\" 258) define_local \"utils_94\" ((\"utils.py\" 258) literal (intOrNat 0)) True) ((\"utils.py\" 259) define_local \"utils_95\" ((\"utils.py\" 259) list ) True) ((\"utils.py\" 260) for_group \"utils_96\" ((\"utils.py\" 260) range ((\"utils.py\" 260) literal (intOrNat 0)) ((\"utils.py\" 260) size ((\"utils.py\" 260) literal (string \"a b\"))) ((\"utils.py\" 260) literal (intOrNat 1))) (((\"utils.py\" 261) if_block ((\"utils.py\" 261) eq ((\"utils.py\" 261) open_variant ((\"utils.py\" 261) slice ((\"utils.py\" 260) iter \"utils_96\") ((\"utils.py\" 261) literal (intOrNat 1)) ((\"utils.py\" 261) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 261) literal (string \" \"))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_95\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) slice ((\"utils.py\" 262) get_local \"utils_94\") ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) is_nat ((\"utils.py\" 262) sub ((\"utils.py\" 260) iter \"utils_96\") ((\"utils.py\" 262) get_local \"utils_94\"))) \"Some\" \"None\") ((\"utils.py\" 262) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 262) get_local \"utils_95\"))) ((\"utils.py\" 263) set ((\"\" -1) get_local \"utils_94\") ((\"utils.py\" 263) add ((\"utils.py\" 260) iter \"utils_96\") ((\"utils.py\" 263) literal (intOrNat 1)))))))) ((\"utils.py\" 264) if_block ((\"utils.py\" 264) gt ((\"utils.py\" 264) size ((\"utils.py\" 264) literal (string \"a b\"))) ((\"utils.py\" 264) literal (intOrNat 0))) (((\"utils.py\" 265) set ((\"utils.py\" 265) get_local \"utils_95\") ((\"utils.py\" 265) cons ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) slice ((\"utils.py\" 265) get_local \"utils_94\") ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) is_nat ((\"utils.py\" 265) sub ((\"utils.py\" 265) size ((\"utils.py\" 265) literal (string \"a b\"))) ((\"utils.py\" 265) get_local \"utils_94\"))) \"Some\" \"None\") ((\"utils.py\" 265) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 265) get_local \"utils_95\"))))) ((\"utils.py\" 124) verify ((\"utils.py\" 124) eq ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 266) rev ((\"utils.py\" 266) get_local \"utils_95\")) (unknown 247))) ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 124) list ((\"utils.py\" 124) literal (string \"a\")) ((\"utils.py\" 124) literal (string \"b\"))) (unknown 247))))) ((\"utils.py\" 258) define_local \"utils_97\" ((\"utils.py\" 258) literal (intOrNat 0)) True) ((\"utils.py\" 259) define_local \"utils_98\" ((\"utils.py\" 259) list ) True) ((\"utils.py\" 260) for_group \"utils_99\" ((\"utils.py\" 260) range ((\"utils.py\" 260) literal (intOrNat 0)) ((\"utils.py\" 260) size ((\"utils.py\" 260) literal (string \"b,a\"))) ((\"utils.py\" 260) literal (intOrNat 1))) (((\"utils.py\" 261) if_block ((\"utils.py\" 261) eq ((\"utils.py\" 261) open_variant ((\"utils.py\" 261) slice ((\"utils.py\" 260) iter \"utils_99\") ((\"utils.py\" 261) literal (intOrNat 1)) ((\"utils.py\" 261) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 261) literal (string \",\"))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_98\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) slice ((\"utils.py\" 262) get_local \"utils_97\") ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) is_nat ((\"utils.py\" 262) sub ((\"utils.py\" 260) iter \"utils_99\") ((\"utils.py\" 262) get_local \"utils_97\"))) \"Some\" \"None\") ((\"utils.py\" 262) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 262) get_local \"utils_98\"))) ((\"utils.py\" 263) set ((\"\" -1) get_local \"utils_97\") ((\"utils.py\" 263) add ((\"utils.py\" 260) iter \"utils_99\") ((\"utils.py\" 263) literal (intOrNat 1)))))))) ((\"utils.py\" 264) if_block ((\"utils.py\" 264) gt ((\"utils.py\" 264) size ((\"utils.py\" 264) literal (string \"b,a\"))) ((\"utils.py\" 264) literal (intOrNat 0))) (((\"utils.py\" 265) set ((\"utils.py\" 265) get_local \"utils_98\") ((\"utils.py\" 265) cons ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) slice ((\"utils.py\" 265) get_local \"utils_97\") ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) is_nat ((\"utils.py\" 265) sub ((\"utils.py\" 265) size ((\"utils.py\" 265) literal (string \"b,a\"))) ((\"utils.py\" 265) get_local \"utils_97\"))) \"Some\" \"None\") ((\"utils.py\" 265) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 265) get_local \"utils_98\"))))) ((\"utils.py\" 125) verify ((\"utils.py\" 125) eq ((\"utils.py\" 125) pack ((\"utils.py\" 125) type_annotation ((\"utils.py\" 266) rev ((\"utils.py\" 266) get_local \"utils_98\")) (unknown 250))) ((\"utils.py\" 125) pack ((\"utils.py\" 125) type_annotation ((\"utils.py\" 125) list ((\"utils.py\" 125) literal (string \"b\")) ((\"utils.py\" 125) literal (string \"a\"))) (unknown 250))))) ((\"utils.py\" 126) verify ((\"utils.py\" 126) eq ((\"utils.py\" 126) pack ((\"utils.py\" 126) type_annotation ((\"utils.py\" 126) call_lambda ((\"smartpy/tests/utils.py\" 93) private \"string_split\") ((\"utils.py\" 126) record (separator ((\"utils.py\" 126) literal (string \",,\"))) (text ((\"utils.py\" 126) literal (string \"a,b\"))))) (unknown 251))) ((\"utils.py\" 126) pack ((\"utils.py\" 126) type_annotation ((\"utils.py\" 126) list ((\"utils.py\" 126) literal (string \"a,b\"))) (unknown 251))))) ((\"utils.py\" 128) verify ((\"utils.py\" 128) eq ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"a\")) ((\"utils.py\" 221) literal (string \"abc\"))) ((\"utils.py\" 128) literal (bool True)))) ((\"utils.py\" 129) verify ((\"utils.py\" 129) eq ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"b\")) ((\"utils.py\" 221) literal (string \"abc\"))) ((\"utils.py\" 129) literal (bool False)))) ((\"utils.py\" 130) verify ((\"utils.py\" 130) eq ((\"utils.py\" 130) call_lambda ((\"smartpy/tests/utils.py\" 97) private \"string_starts_with\") ((\"utils.py\" 130) record (prefix ((\"utils.py\" 130) literal (string \"a\"))) (text ((\"utils.py\" 130) literal (string \"abc\"))))) ((\"utils.py\" 130) literal (bool True)))) ((\"utils.py\" 132) verify ((\"utils.py\" 132) eq ((\"utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 162) literal (string \"abc\")) ((\"utils.py\" 162) literal (string \"c\"))) ((\"utils.py\" 132) literal (bool True)))) ((\"utils.py\" 133) verify ((\"utils.py\" 133) eq ((\"utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 162) literal (string \"abc\")) ((\"utils.py\" 162) literal (string \"b\"))) ((\"utils.py\" 133) literal (bool False)))) ((\"utils.py\" 134) verify ((\"utils.py\" 134) eq ((\"utils.py\" 134) call_lambda ((\"smartpy/tests/utils.py\" 101) private \"string_ends_with\") ((\"utils.py\" 134) record (postfix ((\"utils.py\" 134) literal (string \"c\"))) (text ((\"utils.py\" 134) literal (string \"abc\"))))) ((\"utils.py\" 134) literal (bool True)))) ((\"utils.py\" 83) define_local \"utils_100_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_101_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3)) ((\"utils.py\" 84) literal (intOrNat 4)) ((\"utils.py\" 84) literal (intOrNat 5))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_100_hist\") ((\"utils.py\" 84) iter \"utils_101_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_100_hist\") ((\"utils.py\" 84) iter \"utils_101_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_100_hist\") ((\"utils.py\" 84) iter \"utils_101_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_100_hist\") ((\"utils.py\" 84) iter \"utils_101_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)) ((\"utils.py\" 90) literal (intOrNat 4)) ((\"utils.py\" 90) literal (intOrNat 5)))) True) ((\"utils.py\" 91) define_local \"utils_102_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_103_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_104_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_103_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_105_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_106_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_100_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_104_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_105_i\") ((\"utils.py\" 97) get_local \"utils_103_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_102_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_106_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_105_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_105_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_106_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_105_i\") ((\"utils.py\" 100) get_local \"utils_103_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_104_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_102_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_102_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_106_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_102_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_102_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_104_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_105_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_105_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_106_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_105_i\") ((\"utils.py\" 108) get_local \"utils_103_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_102_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_106_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_105_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_105_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_106_x\") \"value\"))))))))) ((\"utils.py\" 136) verify ((\"utils.py\" 136) eq ((\"utils.py\" 112) get_local \"utils_102_result\") ((\"utils.py\" 136) literal (intOrNat 3)))) ((\"utils.py\" 83) define_local \"utils_107_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_108_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_107_hist\") ((\"utils.py\" 84) iter \"utils_108_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_107_hist\") ((\"utils.py\" 84) iter \"utils_108_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_107_hist\") ((\"utils.py\" 84) iter \"utils_108_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_107_hist\") ((\"utils.py\" 84) iter \"utils_108_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90i\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)))) True) ((\"utils.py\" 91) define_local \"utils_109_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_110_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90i\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_111_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_110_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90i\")) True) ((\"utils.py\" 94) define_local \"utils_112_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_113_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_107_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_111_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_112_i\") ((\"utils.py\" 97) get_local \"utils_110_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_109_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_113_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_112_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_112_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_113_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_112_i\") ((\"utils.py\" 100) get_local \"utils_110_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_111_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_109_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_109_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_113_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_109_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_109_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_111_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_112_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_112_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_113_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_112_i\") ((\"utils.py\" 108) get_local \"utils_110_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_109_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_113_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_112_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_112_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_113_x\") \"value\"))))))))) ((\"utils.py\" 137) verify ((\"utils.py\" 137) eq ((\"utils.py\" 112) get_local \"utils_109_result\") ((\"utils.py\" 137) literal (intOrNat 2)))) ((\"utils.py\" 138) verify ((\"utils.py\" 138) eq ((\"utils.py\" 138) call_lambda ((\"smartpy/tests/utils.py\" 109) private \"math_median\") ((\"utils.py\" 138) list ((\"utils.py\" 138) literal (intOrNat 1)) ((\"utils.py\" 138) literal (intOrNat 2)) ((\"utils.py\" 138) literal (intOrNat 2)) ((\"utils.py\" 138) literal (intOrNat 5)))) ((\"utils.py\" 138) literal (intOrNat 2)))) ((\"utils.py\" 118) define_local \"compute_utils_118\" ((\"utils.py\" 118) sub ((\"utils.py\" 118) literal (intOrNat 3)) ((\"utils.py\" 118) size ((\"utils.py\" 140) literal (bytes \"0x11\")))) True) ((\"utils.py\" 119) define_local \"utils_114_bytes\" ((\"utils.py\" 119) literal (bytes \"0x\")) True) ((\"utils.py\" 120) while_block ((\"utils.py\" 120) lt ((\"utils.py\" 120) size ((\"utils.py\" 120) get_local \"utils_114_bytes\")) ((\"utils.py\" 118) open_variant ((\"utils.py\" 118) is_nat ((\"utils.py\" 118) get_local \"compute_utils_118\")) \"Some\" \"None\")) (((\"utils.py\" 121) set ((\"\" -1) get_local \"utils_114_bytes\") ((\"utils.py\" 121) add ((\"utils.py\" 140) literal (bytes \"0x00\")) ((\"utils.py\" 121) get_local \"utils_114_bytes\"))))) ((\"utils.py\" 140) verify ((\"utils.py\" 140) eq ((\"utils.py\" 122) add ((\"utils.py\" 122) get_local \"utils_114_bytes\") ((\"utils.py\" 140) literal (bytes \"0x11\"))) ((\"utils.py\" 140) literal (bytes \"0x000011\")))) ((\"utils.py\" 126) define_local \"compute_utils_126\" ((\"utils.py\" 126) sub ((\"utils.py\" 126) literal (intOrNat 3)) ((\"utils.py\" 126) size ((\"utils.py\" 141) literal (bytes \"0x11\")))) True) ((\"utils.py\" 127) define_local \"utils_115_bytes\" ((\"utils.py\" 127) literal (bytes \"0x\")) True) ((\"utils.py\" 128) while_block ((\"utils.py\" 128) lt ((\"utils.py\" 128) size ((\"utils.py\" 128) get_local \"utils_115_bytes\")) ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) is_nat ((\"utils.py\" 126) get_local \"compute_utils_126\")) \"Some\" \"None\")) (((\"utils.py\" 129) set ((\"\" -1) get_local \"utils_115_bytes\") ((\"utils.py\" 129) add ((\"utils.py\" 141) literal (bytes \"0x00\")) ((\"utils.py\" 129) get_local \"utils_115_bytes\"))))) ((\"utils.py\" 141) verify ((\"utils.py\" 141) eq ((\"utils.py\" 130) add ((\"utils.py\" 141) literal (bytes \"0x11\")) ((\"utils.py\" 130) get_local \"utils_115_bytes\")) ((\"utils.py\" 141) literal (bytes \"0x110000\")))) ((\"utils.py\" 148) verify ((\"utils.py\" 148) literal (bool True)) ((\"utils.py\" 148) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 150) define_local \"utils_116_bytes\" ((\"utils.py\" 150) literal (bytes \"0x\")) True) ((\"utils.py\" 151) define_local \"utils_117_value\" ((\"utils.py\" 151) literal (intOrNat 54)) True) ((\"utils.py\" 152) while_block ((\"utils.py\" 152) neq ((\"utils.py\" 152) get_local \"utils_117_value\") ((\"utils.py\" 152) literal (intOrNat 0))) (((\"utils.py\" 153) set ((\"\" -1) get_local \"utils_116_bytes\") ((\"utils.py\" 153) add ((\"utils.py\" 143) open_variant ((\"utils.py\" 143) slice ((\"utils.py\" 143) literal (intOrNat 6)) ((\"utils.py\" 143) literal (intOrNat 1)) ((\"utils.py\" 143) pack ((\"utils.py\" 143) MUL ((\"utils.py\" 143) to_int ((\"utils.py\" 153) get_local \"utils_117_value\")) ((\"utils.py\" 143) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 153) get_local \"utils_116_bytes\"))) ((\"utils.py\" 154) set ((\"\" -1) get_local \"utils_117_value\") ((\"utils.py\" 154) lsr ((\"utils.py\" 154) get_local \"utils_117_value\") ((\"utils.py\" 154) literal (intOrNat 8)))))) ((\"utils.py\" 142) verify ((\"utils.py\" 142) eq ((\"utils.py\" 156) get_local \"utils_116_bytes\") ((\"utils.py\" 142) literal (bytes \"0x36\")))) ((\"utils.py\" 143) verify ((\"utils.py\" 143) eq ((\"utils.py\" 139) open_variant ((\"utils.py\" 139) slice ((\"utils.py\" 139) literal (intOrNat 6)) ((\"utils.py\" 139) open_variant ((\"utils.py\" 139) is_nat ((\"utils.py\" 139) sub ((\"utils.py\" 139) size ((\"utils.py\" 134) pack ((\"utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 139) literal (intOrNat 6)))) \"Some\" \"None\") ((\"utils.py\" 134) pack ((\"utils.py\" 134) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"utils.py\" 139) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 143) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"utils.py\" 148) verify ((\"utils.py\" 148) lt ((\"utils.py\" 292) size ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) ((\"utils.py\" 148) literal (intOrNat 28948022309329048855892746252171976963317496166410141009864396001978282409984))) ((\"utils.py\" 148) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 150) define_local \"utils_118_bytes\" ((\"utils.py\" 150) literal (bytes \"0x\")) True) ((\"utils.py\" 151) define_local \"utils_119_value\" ((\"utils.py\" 292) size ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) True) ((\"utils.py\" 152) while_block ((\"utils.py\" 152) neq ((\"utils.py\" 152) get_local \"utils_119_value\") ((\"utils.py\" 152) literal (intOrNat 0))) (((\"utils.py\" 153) set ((\"\" -1) get_local \"utils_118_bytes\") ((\"utils.py\" 153) add ((\"utils.py\" 143) open_variant ((\"utils.py\" 143) slice ((\"utils.py\" 143) literal (intOrNat 6)) ((\"utils.py\" 143) literal (intOrNat 1)) ((\"utils.py\" 143) pack ((\"utils.py\" 143) MUL ((\"utils.py\" 143) to_int ((\"utils.py\" 153) get_local \"utils_119_value\")) ((\"utils.py\" 143) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 153) get_local \"utils_118_bytes\"))) ((\"utils.py\" 154) set ((\"\" -1) get_local \"utils_119_value\") ((\"utils.py\" 154) lsr ((\"utils.py\" 154) get_local \"utils_119_value\") ((\"utils.py\" 154) literal (intOrNat 8)))))) ((\"utils.py\" 292) define_local \"lengthBytes\" ((\"utils.py\" 156) get_local \"utils_118_bytes\") True) ((\"utils.py\" 293) while_block ((\"utils.py\" 293) lt ((\"utils.py\" 293) size ((\"utils.py\" 293) get_local \"lengthBytes\")) ((\"utils.py\" 293) literal (intOrNat 4))) (((\"utils.py\" 294) set ((\"\" -1) get_local \"lengthBytes\") ((\"utils.py\" 294) add ((\"utils.py\" 294) literal (bytes \"0x00\")) ((\"utils.py\" 294) get_local \"lengthBytes\"))))) ((\"utils.py\" 144) verify ((\"utils.py\" 144) eq ((\"utils.py\" 301) open_variant ((\"utils.py\" 301) unpack ((\"utils.py\" 300) concat ((\"utils.py\" 300) list ((\"utils.py\" 300) literal (bytes \"0x05\")) ((\"utils.py\" 300) literal (bytes \"0x01\")) ((\"utils.py\" 300) get_local \"lengthBytes\") ((\"utils.py\" 144) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"utils.py\" 301) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 144) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 146) verify ((\"utils.py\" 146) eq ((\"utils.py\" 346) and ((\"utils.py\" 346) ge ((\"utils.py\" 346) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 146) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"utils.py\" 346) le ((\"utils.py\" 346) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 146) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 146) literal (bool False)))) ((\"utils.py\" 147) verify ((\"utils.py\" 346) and ((\"utils.py\" 346) ge ((\"utils.py\" 346) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 147) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"utils.py\" 346) le ((\"utils.py\" 346) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 147) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"\" -1) lambda 0 None False None \"\" (((\"smartpy_utils.py\" 326) define_local \"compute_smartpy_utils_326\" ((\"smartpy_utils.py\" 326) size ((\"\" -1) lambda_params 0 \"\" (unknown 206))) True) ((\"smartpy_utils.py\" 327) define_local \"utils_110\" ((\"smartpy_utils.py\" 327) literal (nat 0)) True) ((\"smartpy_utils.py\" 328) for_group \"utils_111\" ((\"smartpy_utils.py\" 328) range ((\"smartpy_utils.py\" 328) literal (intOrNat 0)) ((\"smartpy_utils.py\" 326) get_local \"compute_smartpy_utils_326\") ((\"smartpy_utils.py\" 328) literal (intOrNat 1))) (((\"smartpy_utils.py\" 329) define_local \"compute_smartpy_utils_329\" ((\"smartpy_utils.py\" 329) open_variant ((\"smartpy_utils.py\" 329) slice ((\"smartpy_utils.py\" 328) iter \"utils_111\") ((\"smartpy_utils.py\" 329) literal (intOrNat 1)) ((\"\" -1) lambda_params 0 \"\" (unknown 206))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 330) define_local \"compute_smartpy_utils_330\" ((\"smartpy_utils.py\" 330) mul_homo ((\"smartpy_utils.py\" 330) open_variant ((\"smartpy_utils.py\" 330) is_nat ((\"smartpy_utils.py\" 330) sub ((\"smartpy_utils.py\" 326) get_local \"compute_smartpy_utils_326\") ((\"smartpy_utils.py\" 330) add ((\"smartpy_utils.py\" 328) iter \"utils_111\") ((\"smartpy_utils.py\" 330) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 330) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 336) set ((\"\" -1) get_local \"utils_110\") ((\"smartpy_utils.py\" 336) add ((\"smartpy_utils.py\" 336) get_local \"utils_110\") ((\"smartpy_utils.py\" 336) mul_homo ((\"smartpy_utils.py\" 336) open_variant ((\"smartpy_utils.py\" 336) is_nat ((\"smartpy_utils.py\" 337) to_int ((\"smartpy_utils.py\" 337) open_variant ((\"smartpy_utils.py\" 337) unpack ((\"smartpy_utils.py\" 335) add ((\"smartpy_utils.py\" 335) add ((\"smartpy_utils.py\" 335) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 329) get_local \"compute_smartpy_utils_329\")) ((\"smartpy_utils.py\" 335) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 330) get_local \"compute_smartpy_utils_330\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 90) result ((\"smartpy_utils.py\" 340) get_local \"utils_110\"))))) (int_of_string ((\"\" -1) lambda 1 None False None \"\" (((\"utils.py\" 311) define_local \"utils_64\" ((\"\" -1) lambda_params 1 \"\" (unknown 211)) True) ((\"utils.py\" 312) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"\" -1) lambda_params 1 \"\" (unknown 211))) (((\"utils.py\" 313) set ((\"\" -1) get_local \"utils_64\") ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) slice ((\"utils.py\" 313) literal (intOrNat 1)) ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 313) size ((\"\" -1) lambda_params 1 \"\" (unknown 211))) ((\"utils.py\" 313) literal (intOrNat 1)))) \"Some\" \"None\") ((\"\" -1) lambda_params 1 \"\" (unknown 211))) \"Some\" ((\"utils.py\" 313) literal (string \"\")))))) ((\"utils.py\" 315) define_local \"utils_65\" ((\"utils.py\" 315) literal (intOrNat 0)) True) ((\"utils.py\" 316) for_group \"utils_66\" ((\"utils.py\" 316) range ((\"utils.py\" 316) literal (intOrNat 0)) ((\"utils.py\" 316) size ((\"utils.py\" 316) get_local \"utils_64\")) ((\"utils.py\" 316) literal (intOrNat 1))) (((\"utils.py\" 317) set ((\"\" -1) get_local \"utils_65\") ((\"utils.py\" 317) add ((\"utils.py\" 317) mul_homo ((\"utils.py\" 317) literal (intOrNat 10)) ((\"utils.py\" 317) get_local \"utils_65\")) ((\"utils.py\" 317) get_item ((\"utils.py\" 308) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 317) open_variant ((\"utils.py\" 317) slice ((\"utils.py\" 316) iter \"utils_66\") ((\"utils.py\" 317) literal (intOrNat 1)) ((\"utils.py\" 317) get_local \"utils_64\")) \"Some\" \"None\")))))) ((\"utils.py\" 319) if_block ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 221) literal (string \"-\")) ((\"\" -1) lambda_params 1 \"\" (unknown 211))) (((\"utils.py\" 320) set ((\"\" -1) get_local \"utils_65\") ((\"utils.py\" 320) mul_homo ((\"utils.py\" 320) get_local \"utils_65\") ((\"utils.py\" 320) literal (int -1)))))) ((\"utils.py\" 86) result ((\"utils.py\" 322) get_local \"utils_65\"))))) (math_median ((\"\" -1) lambda 2 None False None \"\" (((\"utils.py\" 83) define_local \"utils_67_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_68_x\" ((\"\" -1) lambda_params 2 \"\" (unknown 214)) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_67_hist\") ((\"utils.py\" 84) iter \"utils_68_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_67_hist\") ((\"utils.py\" 84) iter \"utils_68_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_67_hist\") ((\"utils.py\" 84) iter \"utils_68_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_67_hist\") ((\"utils.py\" 84) iter \"utils_68_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"\" -1) lambda_params 2 \"\" (unknown 214))) True) ((\"utils.py\" 91) define_local \"utils_69_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_70_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_71_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_70_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_72_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_73_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_67_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_71_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_72_i\") ((\"utils.py\" 97) get_local \"utils_70_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_69_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_73_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_72_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_72_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_73_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_72_i\") ((\"utils.py\" 100) get_local \"utils_70_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_71_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_69_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_69_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_73_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_69_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_69_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_71_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_72_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_72_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_73_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_72_i\") ((\"utils.py\" 108) get_local \"utils_70_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_69_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_73_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_72_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_72_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_73_x\") \"value\"))))))))) ((\"utils.py\" 110) result ((\"utils.py\" 112) get_local \"utils_69_result\"))))) (math_pow ((\"\" -1) lambda 3 None False None \"\" (((\"utils.py\" 106) result ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 106) attr ((\"\" -1) lambda_params 3 \"\" (unknown 221)) \"exponent\") ((\"utils.py\" 106) attr ((\"\" -1) lambda_params 3 \"\" (unknown 221)) \"base\") ((\"utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"\" -1) lambda 4 None False None \"\" (((\"utils.py\" 102) result ((\"utils.py\" 162) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 102) attr ((\"\" -1) lambda_params 4 \"\" (unknown 222)) \"text\") ((\"utils.py\" 102) attr ((\"\" -1) lambda_params 4 \"\" (unknown 222)) \"postfix\")))))) (string_of_int ((\"\" -1) lambda 5 None False None \"\" (((\"utils.py\" 273) define_local \"utils_74\" ((\"utils.py\" 273) abs ((\"\" -1) lambda_params 5 \"\" (unknown 223))) True) ((\"utils.py\" 274) define_local \"utils_75\" ((\"utils.py\" 274) list ) True) ((\"utils.py\" 276) if_block ((\"utils.py\" 276) eq ((\"utils.py\" 276) get_local \"utils_74\") ((\"utils.py\" 276) literal (intOrNat 0))) (((\"utils.py\" 277) set ((\"utils.py\" 277) get_local \"utils_75\") ((\"utils.py\" 277) cons ((\"utils.py\" 277) literal (string \"0\")) ((\"utils.py\" 277) get_local \"utils_75\"))))) ((\"utils.py\" 278) while_block ((\"utils.py\" 278) gt ((\"utils.py\" 278) get_local \"utils_74\") ((\"utils.py\" 278) literal (intOrNat 0))) (((\"utils.py\" 279) set ((\"utils.py\" 279) get_local \"utils_75\") ((\"utils.py\" 279) cons ((\"utils.py\" 279) get_item ((\"utils.py\" 271) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 279) mod ((\"utils.py\" 279) get_local \"utils_74\") ((\"utils.py\" 279) literal (intOrNat 10)))) ((\"utils.py\" 279) get_local \"utils_75\"))) ((\"utils.py\" 280) set ((\"\" -1) get_local \"utils_74\") ((\"utils.py\" 280) div ((\"utils.py\" 280) get_local \"utils_74\") ((\"utils.py\" 280) literal (intOrNat 10)))))) ((\"utils.py\" 282) define_local \"utils_76\" ((\"utils.py\" 282) concat ((\"utils.py\" 282) get_local \"utils_75\")) True) ((\"utils.py\" 283) if_block ((\"utils.py\" 272) lt ((\"\" -1) lambda_params 5 \"\" (unknown 223)) ((\"utils.py\" 272) literal (intOrNat 0))) (((\"utils.py\" 284) set ((\"\" -1) get_local \"utils_76\") ((\"utils.py\" 284) add ((\"utils.py\" 284) literal (string \"-\")) ((\"utils.py\" 284) get_local \"utils_76\"))))) ((\"utils.py\" 82) result ((\"utils.py\" 286) get_local \"utils_76\"))))) (string_split ((\"\" -1) lambda 6 None False None \"\" (((\"utils.py\" 258) define_local \"utils_77\" ((\"utils.py\" 258) literal (intOrNat 0)) True) ((\"utils.py\" 259) define_local \"utils_78\" ((\"utils.py\" 259) list ) True) ((\"utils.py\" 260) for_group \"utils_79\" ((\"utils.py\" 260) range ((\"utils.py\" 260) literal (intOrNat 0)) ((\"utils.py\" 260) size ((\"utils.py\" 94) attr ((\"\" -1) lambda_params 6 \"\" (unknown 227)) \"text\")) ((\"utils.py\" 260) literal (intOrNat 1))) (((\"utils.py\" 261) if_block ((\"utils.py\" 261) eq ((\"utils.py\" 261) open_variant ((\"utils.py\" 261) slice ((\"utils.py\" 260) iter \"utils_79\") ((\"utils.py\" 261) literal (intOrNat 1)) ((\"utils.py\" 94) attr ((\"\" -1) lambda_params 6 \"\" (unknown 227)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"\" -1) lambda_params 6 \"\" (unknown 227)) \"separator\")) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_78\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) slice ((\"utils.py\" 262) get_local \"utils_77\") ((\"utils.py\" 262) open_variant ((\"utils.py\" 262) is_nat ((\"utils.py\" 262) sub ((\"utils.py\" 260) iter \"utils_79\") ((\"utils.py\" 262) get_local \"utils_77\"))) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"\" -1) lambda_params 6 \"\" (unknown 227)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 262) get_local \"utils_78\"))) ((\"utils.py\" 263) set ((\"\" -1) get_local \"utils_77\") ((\"utils.py\" 263) add ((\"utils.py\" 260) iter \"utils_79\") ((\"utils.py\" 263) literal (intOrNat 1)))))))) ((\"utils.py\" 264) if_block ((\"utils.py\" 264) gt ((\"utils.py\" 264) size ((\"utils.py\" 94) attr ((\"\" -1) lambda_params 6 \"\" (unknown 227)) \"text\")) ((\"utils.py\" 264) literal (intOrNat 0))) (((\"utils.py\" 265) set ((\"utils.py\" 265) get_local \"utils_78\") ((\"utils.py\" 265) cons ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) slice ((\"utils.py\" 265) get_local \"utils_77\") ((\"utils.py\" 265) open_variant ((\"utils.py\" 265) is_nat ((\"utils.py\" 265) sub ((\"utils.py\" 265) size ((\"utils.py\" 94) attr ((\"\" -1) lambda_params 6 \"\" (unknown 227)) \"text\")) ((\"utils.py\" 265) get_local \"utils_77\"))) \"Some\" \"None\") ((\"utils.py\" 94) attr ((\"\" -1) lambda_params 6 \"\" (unknown 227)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 265) get_local \"utils_78\"))))) ((\"utils.py\" 94) result ((\"utils.py\" 266) rev ((\"utils.py\" 266) get_local \"utils_78\")))))) (string_starts_with ((\"\" -1) lambda 7 None False None \"\" (((\"utils.py\" 98) result ((\"utils.py\" 221) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 98) attr ((\"\" -1) lambda_params 7 \"\" (unknown 230)) \"prefix\") ((\"utils.py\" 98) attr ((\"\" -1) lambda_params 7 \"\" (unknown 230)) \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"\" -1) static_id 0)",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 }
]