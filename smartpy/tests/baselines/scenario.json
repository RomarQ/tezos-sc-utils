[
 {
  "shortname": "UtilsTester1_test",
  "longname": "UtilsTester1_test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id (static_id 0 (\"utils.py\" 131)) \nstorage ()\nstorage_type ((unknown 3))\nmessages ((test True None None False (\"smartpy/tests/utils.py\" 38) ((defineLocal \"utils_16\" (literal (intOrNat 1) (\"smartpy_utils.py\" 248)) True (\"smartpy_utils.py\" 248)) (defineLocal \"utils_17\" (list (\"smartpy_utils.py\" 249) ) True (\"smartpy_utils.py\" 249)) (ifBlock (eq (getLocal \"utils_16\" (\"smartpy_utils.py\" 251)) (literal (intOrNat 0) (\"smartpy_utils.py\" 251)) (\"smartpy_utils.py\" 251)) ((set (getLocal \"utils_17\" (\"smartpy_utils.py\" 252)) (cons (literal (string \"0\") (\"smartpy_utils.py\" 252)) (getLocal \"utils_17\" (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252))) (\"smartpy_utils.py\" 251)) (whileBlock (gt (getLocal \"utils_16\" (\"smartpy_utils.py\" 253)) (literal (intOrNat 0) (\"smartpy_utils.py\" 253)) (\"smartpy_utils.py\" 253)) ((set (getLocal \"utils_17\" (\"smartpy_utils.py\" 254)) (cons (getItem (map (\"smartpy_utils.py\" 246) ((literal (intOrNat 0) (\"utils.py\" 132)) (literal (string \"0\") (\"utils.py\" 132))) ((literal (intOrNat 1) (\"utils.py\" 132)) (literal (string \"1\") (\"utils.py\" 132))) ((literal (intOrNat 2) (\"utils.py\" 132)) (literal (string \"2\") (\"utils.py\" 132))) ((literal (intOrNat 3) (\"utils.py\" 132)) (literal (string \"3\") (\"utils.py\" 132))) ((literal (intOrNat 4) (\"utils.py\" 132)) (literal (string \"4\") (\"utils.py\" 132))) ((literal (intOrNat 5) (\"utils.py\" 132)) (literal (string \"5\") (\"utils.py\" 132))) ((literal (intOrNat 6) (\"utils.py\" 132)) (literal (string \"6\") (\"utils.py\" 132))) ((literal (intOrNat 7) (\"utils.py\" 132)) (literal (string \"7\") (\"utils.py\" 132))) ((literal (intOrNat 8) (\"utils.py\" 132)) (literal (string \"8\") (\"utils.py\" 132))) ((literal (intOrNat 9) (\"utils.py\" 132)) (literal (string \"9\") (\"utils.py\" 132)))) (mod (getLocal \"utils_16\" (\"smartpy_utils.py\" 254)) (literal (intOrNat 10) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (getLocal \"utils_17\" (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (set (getLocal \"utils_16\" (\"utils.py\" 132)) (floordiv (getLocal \"utils_16\" (\"smartpy_utils.py\" 255)) (literal (intOrNat 10) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255))) (\"smartpy_utils.py\" 253)) (defineLocal \"utils_18\" (concat (getLocal \"utils_17\" (\"smartpy_utils.py\" 257)) (\"smartpy_utils.py\" 257)) True (\"smartpy_utils.py\" 257)) (ifBlock (literal (bool True) (\"smartpy_utils.py\" 258)) ((set (getLocal \"utils_18\" (\"utils.py\" 132)) (add (literal (string \"-\") (\"smartpy_utils.py\" 259)) (getLocal \"utils_18\" (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259))) (\"smartpy_utils.py\" 258)) (verify (eq (getLocal \"utils_18\" (\"smartpy_utils.py\" 261)) (literal (string \"-1\") (\"utils.py\" 39)) (\"utils.py\" 39)) (\"utils.py\" 39)) (defineLocal \"utils_19\" (literal (intOrNat 1) (\"smartpy_utils.py\" 248)) True (\"smartpy_utils.py\" 248)) (defineLocal \"utils_20\" (list (\"smartpy_utils.py\" 249) ) True (\"smartpy_utils.py\" 249)) (ifBlock (eq (getLocal \"utils_19\" (\"smartpy_utils.py\" 251)) (literal (intOrNat 0) (\"smartpy_utils.py\" 251)) (\"smartpy_utils.py\" 251)) ((set (getLocal \"utils_20\" (\"smartpy_utils.py\" 252)) (cons (literal (string \"0\") (\"smartpy_utils.py\" 252)) (getLocal \"utils_20\" (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252))) (\"smartpy_utils.py\" 251)) (whileBlock (gt (getLocal \"utils_19\" (\"smartpy_utils.py\" 253)) (literal (intOrNat 0) (\"smartpy_utils.py\" 253)) (\"smartpy_utils.py\" 253)) ((set (getLocal \"utils_20\" (\"smartpy_utils.py\" 254)) (cons (getItem (map (\"smartpy_utils.py\" 246) ((literal (intOrNat 0) (\"utils.py\" 132)) (literal (string \"0\") (\"utils.py\" 132))) ((literal (intOrNat 1) (\"utils.py\" 132)) (literal (string \"1\") (\"utils.py\" 132))) ((literal (intOrNat 2) (\"utils.py\" 132)) (literal (string \"2\") (\"utils.py\" 132))) ((literal (intOrNat 3) (\"utils.py\" 132)) (literal (string \"3\") (\"utils.py\" 132))) ((literal (intOrNat 4) (\"utils.py\" 132)) (literal (string \"4\") (\"utils.py\" 132))) ((literal (intOrNat 5) (\"utils.py\" 132)) (literal (string \"5\") (\"utils.py\" 132))) ((literal (intOrNat 6) (\"utils.py\" 132)) (literal (string \"6\") (\"utils.py\" 132))) ((literal (intOrNat 7) (\"utils.py\" 132)) (literal (string \"7\") (\"utils.py\" 132))) ((literal (intOrNat 8) (\"utils.py\" 132)) (literal (string \"8\") (\"utils.py\" 132))) ((literal (intOrNat 9) (\"utils.py\" 132)) (literal (string \"9\") (\"utils.py\" 132)))) (mod (getLocal \"utils_19\" (\"smartpy_utils.py\" 254)) (literal (intOrNat 10) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (getLocal \"utils_20\" (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (set (getLocal \"utils_19\" (\"utils.py\" 132)) (floordiv (getLocal \"utils_19\" (\"smartpy_utils.py\" 255)) (literal (intOrNat 10) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255))) (\"smartpy_utils.py\" 253)) (defineLocal \"utils_21\" (concat (getLocal \"utils_20\" (\"smartpy_utils.py\" 257)) (\"smartpy_utils.py\" 257)) True (\"smartpy_utils.py\" 257)) (ifBlock (literal (bool False) (\"smartpy_utils.py\" 258)) ((set (getLocal \"utils_21\" (\"utils.py\" 132)) (add (literal (string \"-\") (\"smartpy_utils.py\" 259)) (getLocal \"utils_21\" (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259))) (\"smartpy_utils.py\" 258)) (verify (eq (getLocal \"utils_21\" (\"smartpy_utils.py\" 261)) (literal (string \"1\") (\"utils.py\" 40)) (\"utils.py\" 40)) (\"utils.py\" 40)) (verify (eq (call_lambda (private \"string_of_int\" (\"smartpy/tests/utils.py\" 10)) (literal (intOrNat 2) (\"utils.py\" 41)) (\"utils.py\" 41)) (literal (string \"2\") (\"utils.py\" 41)) (\"utils.py\" 41)) (\"utils.py\" 41)) (defineLocal \"utils_22\" (literal (string \"1\") (\"smartpy_utils.py\" 286)) True (\"smartpy_utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (literal (string \"1\") (\"smartpy_utils.py\" 196))) ((set (getLocal \"utils_22\" (\"utils.py\" 132)) (openVariant (slice (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (openVariant (isNat (sub (size (literal (string \"1\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" \"None\" (\"smartpy_utils.py\" 288)) (literal (string \"1\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" (literal (string \"\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288))) (\"smartpy_utils.py\" 287)) (defineLocal \"utils_23\" (literal (intOrNat 0) (\"smartpy_utils.py\" 290)) True (\"smartpy_utils.py\" 290)) (forGroup \"utils_24\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 291)) (size (getLocal \"utils_22\" (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) ((set (getLocal \"utils_23\" (\"utils.py\" 132)) (add (mul (literal (intOrNat 10) (\"smartpy_utils.py\" 292)) (getLocal \"utils_23\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (getItem (map (\"smartpy_utils.py\" 283) ((literal (string \"0\") (\"utils.py\" 132)) (literal (intOrNat 0) (\"utils.py\" 132))) ((literal (string \"1\") (\"utils.py\" 132)) (literal (intOrNat 1) (\"utils.py\" 132))) ((literal (string \"2\") (\"utils.py\" 132)) (literal (intOrNat 2) (\"utils.py\" 132))) ((literal (string \"3\") (\"utils.py\" 132)) (literal (intOrNat 3) (\"utils.py\" 132))) ((literal (string \"4\") (\"utils.py\" 132)) (literal (intOrNat 4) (\"utils.py\" 132))) ((literal (string \"5\") (\"utils.py\" 132)) (literal (intOrNat 5) (\"utils.py\" 132))) ((literal (string \"6\") (\"utils.py\" 132)) (literal (intOrNat 6) (\"utils.py\" 132))) ((literal (string \"7\") (\"utils.py\" 132)) (literal (intOrNat 7) (\"utils.py\" 132))) ((literal (string \"8\") (\"utils.py\" 132)) (literal (intOrNat 8) (\"utils.py\" 132))) ((literal (string \"9\") (\"utils.py\" 132)) (literal (intOrNat 9) (\"utils.py\" 132)))) (openVariant (slice (iter \"utils_24\" (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 292)) (getLocal \"utils_22\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) \"Some\" \"None\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292))) (\"smartpy_utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (literal (string \"1\") (\"smartpy_utils.py\" 196))) ((set (getLocal \"utils_23\" (\"utils.py\" 132)) (mul (getLocal \"utils_23\" (\"smartpy_utils.py\" 295)) (literal (int -1) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295))) (\"smartpy_utils.py\" 294)) (verify (eq (getLocal \"utils_23\" (\"smartpy_utils.py\" 297)) (literal (intOrNat 1) (\"utils.py\" 43)) (\"utils.py\" 43)) (\"utils.py\" 43)) (defineLocal \"utils_25\" (literal (string \"-1\") (\"smartpy_utils.py\" 286)) True (\"smartpy_utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (literal (string \"-1\") (\"smartpy_utils.py\" 196))) ((set (getLocal \"utils_25\" (\"utils.py\" 132)) (openVariant (slice (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (openVariant (isNat (sub (size (literal (string \"-1\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" \"None\" (\"smartpy_utils.py\" 288)) (literal (string \"-1\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" (literal (string \"\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288))) (\"smartpy_utils.py\" 287)) (defineLocal \"utils_26\" (literal (intOrNat 0) (\"smartpy_utils.py\" 290)) True (\"smartpy_utils.py\" 290)) (forGroup \"utils_27\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 291)) (size (getLocal \"utils_25\" (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) ((set (getLocal \"utils_26\" (\"utils.py\" 132)) (add (mul (literal (intOrNat 10) (\"smartpy_utils.py\" 292)) (getLocal \"utils_26\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (getItem (map (\"smartpy_utils.py\" 283) ((literal (string \"0\") (\"utils.py\" 132)) (literal (intOrNat 0) (\"utils.py\" 132))) ((literal (string \"1\") (\"utils.py\" 132)) (literal (intOrNat 1) (\"utils.py\" 132))) ((literal (string \"2\") (\"utils.py\" 132)) (literal (intOrNat 2) (\"utils.py\" 132))) ((literal (string \"3\") (\"utils.py\" 132)) (literal (intOrNat 3) (\"utils.py\" 132))) ((literal (string \"4\") (\"utils.py\" 132)) (literal (intOrNat 4) (\"utils.py\" 132))) ((literal (string \"5\") (\"utils.py\" 132)) (literal (intOrNat 5) (\"utils.py\" 132))) ((literal (string \"6\") (\"utils.py\" 132)) (literal (intOrNat 6) (\"utils.py\" 132))) ((literal (string \"7\") (\"utils.py\" 132)) (literal (intOrNat 7) (\"utils.py\" 132))) ((literal (string \"8\") (\"utils.py\" 132)) (literal (intOrNat 8) (\"utils.py\" 132))) ((literal (string \"9\") (\"utils.py\" 132)) (literal (intOrNat 9) (\"utils.py\" 132)))) (openVariant (slice (iter \"utils_27\" (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 292)) (getLocal \"utils_25\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) \"Some\" \"None\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292))) (\"smartpy_utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (literal (string \"-1\") (\"smartpy_utils.py\" 196))) ((set (getLocal \"utils_26\" (\"utils.py\" 132)) (mul (getLocal \"utils_26\" (\"smartpy_utils.py\" 295)) (literal (int -1) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295))) (\"smartpy_utils.py\" 294)) (verify (eq (getLocal \"utils_26\" (\"smartpy_utils.py\" 297)) (literal (int -1) (\"utils.py\" 44)) (\"utils.py\" 44)) (\"utils.py\" 44)) (verify (eq (call_lambda (private \"int_of_string\" (\"smartpy/tests/utils.py\" 14)) (literal (string \"2\") (\"utils.py\" 45)) (\"utils.py\" 45)) (literal (intOrNat 2) (\"utils.py\" 45)) (\"utils.py\" 45)) (\"utils.py\" 45)) (defineLocal \"utils_28\" (literal (intOrNat 0) (\"smartpy_utils.py\" 233)) True (\"smartpy_utils.py\" 233)) (defineLocal \"utils_29\" (list (\"smartpy_utils.py\" 234) ) True (\"smartpy_utils.py\" 234)) (forGroup \"utils_30\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 235)) (size (literal (string \"a b\") (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_30\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 236)) (literal (string \"a b\") (\"smartpy_utils.py\" 236)) (\"smartpy_utils.py\" 236)) \"Some\" \"None\" (\"smartpy_utils.py\" 236)) (literal (string \" \") (\"smartpy_utils.py\" 236)) (\"smartpy_utils.py\" 236)) ((set (getLocal \"utils_29\" (\"smartpy_utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_28\" (\"smartpy_utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_30\" (\"smartpy_utils.py\" 235)) (getLocal \"utils_28\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (literal (string \"a b\") (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (getLocal \"utils_29\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (set (getLocal \"utils_28\" (\"utils.py\" 132)) (add (iter \"utils_30\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238))) (\"smartpy_utils.py\" 236))) (\"smartpy_utils.py\" 235)) (ifBlock (gt (size (literal (string \"a b\") (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) (literal (intOrNat 0) (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) ((set (getLocal \"utils_29\" (\"smartpy_utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_28\" (\"smartpy_utils.py\" 240)) (openVariant (isNat (sub (size (literal (string \"a b\") (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (getLocal \"utils_28\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (literal (string \"a b\") (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (getLocal \"utils_29\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240))) (\"smartpy_utils.py\" 239)) (verify (eq (pack (type_annotation (rev (getLocal \"utils_29\" (\"smartpy_utils.py\" 241)) (\"smartpy_utils.py\" 241)) (unknown 36) (\"utils.py\" 47)) (\"utils.py\" 47)) (pack (type_annotation (list (\"utils.py\" 47) (literal (string \"a\") (\"utils.py\" 47)) (literal (string \"b\") (\"utils.py\" 47))) (unknown 36) (\"utils.py\" 47)) (\"utils.py\" 47)) (\"utils.py\" 47)) (\"utils.py\" 47)) (defineLocal \"utils_31\" (literal (intOrNat 0) (\"smartpy_utils.py\" 233)) True (\"smartpy_utils.py\" 233)) (defineLocal \"utils_32\" (list (\"smartpy_utils.py\" 234) ) True (\"smartpy_utils.py\" 234)) (forGroup \"utils_33\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 235)) (size (literal (string \"b,a\") (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_33\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 236)) (literal (string \"b,a\") (\"smartpy_utils.py\" 236)) (\"smartpy_utils.py\" 236)) \"Some\" \"None\" (\"smartpy_utils.py\" 236)) (literal (string \",\") (\"smartpy_utils.py\" 236)) (\"smartpy_utils.py\" 236)) ((set (getLocal \"utils_32\" (\"smartpy_utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_31\" (\"smartpy_utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_33\" (\"smartpy_utils.py\" 235)) (getLocal \"utils_31\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (literal (string \"b,a\") (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (getLocal \"utils_32\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (set (getLocal \"utils_31\" (\"utils.py\" 132)) (add (iter \"utils_33\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238))) (\"smartpy_utils.py\" 236))) (\"smartpy_utils.py\" 235)) (ifBlock (gt (size (literal (string \"b,a\") (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) (literal (intOrNat 0) (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) ((set (getLocal \"utils_32\" (\"smartpy_utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_31\" (\"smartpy_utils.py\" 240)) (openVariant (isNat (sub (size (literal (string \"b,a\") (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (getLocal \"utils_31\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (literal (string \"b,a\") (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (getLocal \"utils_32\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240))) (\"smartpy_utils.py\" 239)) (verify (eq (pack (type_annotation (rev (getLocal \"utils_32\" (\"smartpy_utils.py\" 241)) (\"smartpy_utils.py\" 241)) (unknown 39) (\"utils.py\" 48)) (\"utils.py\" 48)) (pack (type_annotation (list (\"utils.py\" 48) (literal (string \"b\") (\"utils.py\" 48)) (literal (string \"a\") (\"utils.py\" 48))) (unknown 39) (\"utils.py\" 48)) (\"utils.py\" 48)) (\"utils.py\" 48)) (\"utils.py\" 48)) (verify (eq (pack (type_annotation (call_lambda (private \"string_split\" (\"smartpy/tests/utils.py\" 18)) (record (\"utils.py\" 49) (separator (literal (string \",,\") (\"utils.py\" 49))) (text (literal (string \"a,b\") (\"utils.py\" 49)))) (\"utils.py\" 49)) (unknown 40) (\"utils.py\" 49)) (\"utils.py\" 49)) (pack (type_annotation (list (\"utils.py\" 49) (literal (string \"a,b\") (\"utils.py\" 49))) (unknown 40) (\"utils.py\" 49)) (\"utils.py\" 49)) (\"utils.py\" 49)) (\"utils.py\" 49)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"a\") (\"smartpy_utils.py\" 196)) (literal (string \"abc\") (\"smartpy_utils.py\" 196))) (literal (bool True) (\"utils.py\" 51)) (\"utils.py\" 51)) (\"utils.py\" 51)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"b\") (\"smartpy_utils.py\" 196)) (literal (string \"abc\") (\"smartpy_utils.py\" 196))) (literal (bool False) (\"utils.py\" 52)) (\"utils.py\" 52)) (\"utils.py\" 52)) (verify (eq (call_lambda (private \"string_starts_with\" (\"smartpy/tests/utils.py\" 22)) (record (\"utils.py\" 53) (prefix (literal (string \"a\") (\"utils.py\" 53))) (text (literal (string \"abc\") (\"utils.py\" 53)))) (\"utils.py\" 53)) (literal (bool True) (\"utils.py\" 53)) (\"utils.py\" 53)) (\"utils.py\" 53)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 137) (literal (string \"abc\") (\"smartpy_utils.py\" 137)) (literal (string \"c\") (\"smartpy_utils.py\" 137))) (literal (bool True) (\"utils.py\" 55)) (\"utils.py\" 55)) (\"utils.py\" 55)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 137) (literal (string \"abc\") (\"smartpy_utils.py\" 137)) (literal (string \"b\") (\"smartpy_utils.py\" 137))) (literal (bool False) (\"utils.py\" 56)) (\"utils.py\" 56)) (\"utils.py\" 56)) (verify (eq (call_lambda (private \"string_ends_with\" (\"smartpy/tests/utils.py\" 26)) (record (\"utils.py\" 57) (postfix (literal (string \"c\") (\"utils.py\" 57))) (text (literal (string \"abc\") (\"utils.py\" 57)))) (\"utils.py\" 57)) (literal (bool True) (\"utils.py\" 57)) (\"utils.py\" 57)) (\"utils.py\" 57)) (defineLocal \"utils_34_hist\" (map (\"smartpy_utils.py\" 83) ) True (\"smartpy_utils.py\" 83)) (forGroup \"utils_35_x\" (list (\"smartpy_utils.py\" 84) (literal (intOrNat 1) (\"smartpy_utils.py\" 84)) (literal (intOrNat 2) (\"smartpy_utils.py\" 84)) (literal (intOrNat 3) (\"smartpy_utils.py\" 84)) (literal (intOrNat 4) (\"smartpy_utils.py\" 84)) (literal (intOrNat 5) (\"smartpy_utils.py\" 84))) ((ifBlock (contains (getLocal \"utils_34_hist\" (\"smartpy_utils.py\" 85)) (iter \"utils_35_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 85)) ((set (getItem (getLocal \"utils_34_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_35_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (add (getItem (getLocal \"utils_34_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_35_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (literal (intOrNat 1) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86))) (\"smartpy_utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_34_hist\" (\"smartpy_utils.py\" 88)) (iter \"utils_35_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 88)) (literal (intOrNat 1) (\"smartpy_utils.py\" 88)) (\"smartpy_utils.py\" 88))))) (\"smartpy_utils.py\" 84)) (defineLocal \"compute_smartpy_utils_90i\" (size (list (\"smartpy_utils.py\" 90) (literal (intOrNat 1) (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 90)) (literal (intOrNat 3) (\"smartpy_utils.py\" 90)) (literal (intOrNat 4) (\"smartpy_utils.py\" 90)) (literal (intOrNat 5) (\"smartpy_utils.py\" 90))) (\"smartpy_utils.py\" 90)) True (\"smartpy_utils.py\" 90)) (defineLocal \"utils_36_result\" (literal (nat 0) (\"smartpy_utils.py\" 91)) True (\"smartpy_utils.py\" 91)) (defineLocal \"utils_37_half\" (truediv (getLocal \"compute_smartpy_utils_90i\" (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 92)) (\"smartpy_utils.py\" 92)) True (\"smartpy_utils.py\" 92)) (defineLocal \"utils_38_use_average\" (eq (mul (getLocal \"utils_37_half\" (\"smartpy_utils.py\" 93)) (literal (intOrNat 2) (\"smartpy_utils.py\" 93)) (\"smartpy_utils.py\" 93)) (getLocal \"compute_smartpy_utils_90i\" (\"smartpy_utils.py\" 90)) (\"smartpy_utils.py\" 93)) True (\"smartpy_utils.py\" 93)) (defineLocal \"utils_39_i\" (literal (intOrNat 0) (\"smartpy_utils.py\" 94)) True (\"smartpy_utils.py\" 94)) (forGroup \"utils_40_x\" (items (getLocal \"utils_34_hist\" (\"smartpy_utils.py\" 95)) (\"smartpy_utils.py\" 95)) ((ifBlock (getLocal \"utils_38_use_average\" (\"smartpy_utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_39_i\" (\"smartpy_utils.py\" 97)) (getLocal \"utils_37_half\" (\"smartpy_utils.py\" 97)) (\"smartpy_utils.py\" 97)) ((set (getLocal \"utils_36_result\" (\"utils.py\" 132)) (attr (iter \"utils_40_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 98)) (set (getLocal \"utils_39_i\" (\"utils.py\" 132)) (add (getLocal \"utils_39_i\" (\"smartpy_utils.py\" 99)) (attr (iter \"utils_40_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (ifBlock (gt (getLocal \"utils_39_i\" (\"smartpy_utils.py\" 100)) (getLocal \"utils_37_half\" (\"smartpy_utils.py\" 100)) (\"smartpy_utils.py\" 100)) ((set (getLocal \"utils_38_use_average\" (\"utils.py\" 132)) (literal (bool False) (\"smartpy_utils.py\" 101)) (\"smartpy_utils.py\" 101))) (\"smartpy_utils.py\" 100))) (\"smartpy_utils.py\" 97)) (elseBlock ((set (getLocal \"utils_36_result\" (\"utils.py\" 132)) (add (getLocal \"utils_36_result\" (\"smartpy_utils.py\" 103)) (attr (iter \"utils_40_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 103)) (\"smartpy_utils.py\" 103)) (set (getLocal \"utils_36_result\" (\"utils.py\" 132)) (truediv (getLocal \"utils_36_result\" (\"smartpy_utils.py\" 104)) (literal (intOrNat 2) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (set (getLocal \"utils_38_use_average\" (\"utils.py\" 132)) (literal (bool False) (\"smartpy_utils.py\" 105)) (\"smartpy_utils.py\" 105)) (set (getLocal \"utils_39_i\" (\"utils.py\" 132)) (add (getLocal \"utils_39_i\" (\"smartpy_utils.py\" 106)) (attr (iter \"utils_40_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 106)) (\"smartpy_utils.py\" 106))))) (\"smartpy_utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_39_i\" (\"smartpy_utils.py\" 108)) (getLocal \"utils_37_half\" (\"smartpy_utils.py\" 108)) (\"smartpy_utils.py\" 108)) ((set (getLocal \"utils_36_result\" (\"utils.py\" 132)) (attr (iter \"utils_40_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 109)) (set (getLocal \"utils_39_i\" (\"utils.py\" 132)) (add (getLocal \"utils_39_i\" (\"smartpy_utils.py\" 110)) (attr (iter \"utils_40_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 110)) (\"smartpy_utils.py\" 110))) (\"smartpy_utils.py\" 108))))) (\"smartpy_utils.py\" 95)) (verify (eq (getLocal \"utils_36_result\" (\"smartpy_utils.py\" 112)) (literal (intOrNat 3) (\"utils.py\" 59)) (\"utils.py\" 59)) (\"utils.py\" 59)) (defineLocal \"utils_41_hist\" (map (\"smartpy_utils.py\" 83) ) True (\"smartpy_utils.py\" 83)) (forGroup \"utils_42_x\" (list (\"smartpy_utils.py\" 84) (literal (intOrNat 1) (\"smartpy_utils.py\" 84)) (literal (intOrNat 2) (\"smartpy_utils.py\" 84)) (literal (intOrNat 2) (\"smartpy_utils.py\" 84)) (literal (intOrNat 3) (\"smartpy_utils.py\" 84))) ((ifBlock (contains (getLocal \"utils_41_hist\" (\"smartpy_utils.py\" 85)) (iter \"utils_42_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 85)) ((set (getItem (getLocal \"utils_41_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_42_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (add (getItem (getLocal \"utils_41_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_42_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (literal (intOrNat 1) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86))) (\"smartpy_utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_41_hist\" (\"smartpy_utils.py\" 88)) (iter \"utils_42_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 88)) (literal (intOrNat 1) (\"smartpy_utils.py\" 88)) (\"smartpy_utils.py\" 88))))) (\"smartpy_utils.py\" 84)) (defineLocal \"compute_smartpy_utils_90\" (size (list (\"smartpy_utils.py\" 90) (literal (intOrNat 1) (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 90)) (literal (intOrNat 3) (\"smartpy_utils.py\" 90))) (\"smartpy_utils.py\" 90)) True (\"smartpy_utils.py\" 90)) (defineLocal \"utils_43_result\" (literal (nat 0) (\"smartpy_utils.py\" 91)) True (\"smartpy_utils.py\" 91)) (defineLocal \"utils_44_half\" (truediv (getLocal \"compute_smartpy_utils_90\" (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 92)) (\"smartpy_utils.py\" 92)) True (\"smartpy_utils.py\" 92)) (defineLocal \"utils_45_use_average\" (eq (mul (getLocal \"utils_44_half\" (\"smartpy_utils.py\" 93)) (literal (intOrNat 2) (\"smartpy_utils.py\" 93)) (\"smartpy_utils.py\" 93)) (getLocal \"compute_smartpy_utils_90\" (\"smartpy_utils.py\" 90)) (\"smartpy_utils.py\" 93)) True (\"smartpy_utils.py\" 93)) (defineLocal \"utils_46_i\" (literal (intOrNat 0) (\"smartpy_utils.py\" 94)) True (\"smartpy_utils.py\" 94)) (forGroup \"utils_47_x\" (items (getLocal \"utils_41_hist\" (\"smartpy_utils.py\" 95)) (\"smartpy_utils.py\" 95)) ((ifBlock (getLocal \"utils_45_use_average\" (\"smartpy_utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_46_i\" (\"smartpy_utils.py\" 97)) (getLocal \"utils_44_half\" (\"smartpy_utils.py\" 97)) (\"smartpy_utils.py\" 97)) ((set (getLocal \"utils_43_result\" (\"utils.py\" 132)) (attr (iter \"utils_47_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 98)) (set (getLocal \"utils_46_i\" (\"utils.py\" 132)) (add (getLocal \"utils_46_i\" (\"smartpy_utils.py\" 99)) (attr (iter \"utils_47_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (ifBlock (gt (getLocal \"utils_46_i\" (\"smartpy_utils.py\" 100)) (getLocal \"utils_44_half\" (\"smartpy_utils.py\" 100)) (\"smartpy_utils.py\" 100)) ((set (getLocal \"utils_45_use_average\" (\"utils.py\" 132)) (literal (bool False) (\"smartpy_utils.py\" 101)) (\"smartpy_utils.py\" 101))) (\"smartpy_utils.py\" 100))) (\"smartpy_utils.py\" 97)) (elseBlock ((set (getLocal \"utils_43_result\" (\"utils.py\" 132)) (add (getLocal \"utils_43_result\" (\"smartpy_utils.py\" 103)) (attr (iter \"utils_47_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 103)) (\"smartpy_utils.py\" 103)) (set (getLocal \"utils_43_result\" (\"utils.py\" 132)) (truediv (getLocal \"utils_43_result\" (\"smartpy_utils.py\" 104)) (literal (intOrNat 2) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (set (getLocal \"utils_45_use_average\" (\"utils.py\" 132)) (literal (bool False) (\"smartpy_utils.py\" 105)) (\"smartpy_utils.py\" 105)) (set (getLocal \"utils_46_i\" (\"utils.py\" 132)) (add (getLocal \"utils_46_i\" (\"smartpy_utils.py\" 106)) (attr (iter \"utils_47_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 106)) (\"smartpy_utils.py\" 106))))) (\"smartpy_utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_46_i\" (\"smartpy_utils.py\" 108)) (getLocal \"utils_44_half\" (\"smartpy_utils.py\" 108)) (\"smartpy_utils.py\" 108)) ((set (getLocal \"utils_43_result\" (\"utils.py\" 132)) (attr (iter \"utils_47_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 109)) (set (getLocal \"utils_46_i\" (\"utils.py\" 132)) (add (getLocal \"utils_46_i\" (\"smartpy_utils.py\" 110)) (attr (iter \"utils_47_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 110)) (\"smartpy_utils.py\" 110))) (\"smartpy_utils.py\" 108))))) (\"smartpy_utils.py\" 95)) (verify (eq (getLocal \"utils_43_result\" (\"smartpy_utils.py\" 112)) (literal (intOrNat 2) (\"utils.py\" 60)) (\"utils.py\" 60)) (\"utils.py\" 60)) (verify (eq (call_lambda (private \"math_median\" (\"smartpy/tests/utils.py\" 34)) (list (\"utils.py\" 61) (literal (intOrNat 1) (\"utils.py\" 61)) (literal (intOrNat 2) (\"utils.py\" 61)) (literal (intOrNat 2) (\"utils.py\" 61)) (literal (intOrNat 5) (\"utils.py\" 61))) (\"utils.py\" 61)) (literal (intOrNat 2) (\"utils.py\" 61)) (\"utils.py\" 61)) (\"utils.py\" 61)) (verify (literal (bool True) (\"smartpy_utils.py\" 126)) (literal (string \"(number) must be lower than 64\") (\"smartpy_utils.py\" 126)) (\"smartpy_utils.py\" 126)) (verify (eq (openVariant (slice (literal (intOrNat 2) (\"smartpy_utils.py\" 131)) (openVariant (isNat (sub (size (pack (literal (intOrNat 54) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 131)) (literal (intOrNat 2) (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) \"Some\" \"None\" (\"smartpy_utils.py\" 131)) (pack (literal (intOrNat 54) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 131)) \"Some\" (literal (string \"Could not encode nat to bytes.\") (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) (literal (bytes \"0x36\") (\"utils.py\" 63)) (\"utils.py\" 63)) (\"utils.py\" 63)) (verify (eq (openVariant (slice (literal (intOrNat 6) (\"smartpy_utils.py\" 122)) (openVariant (isNat (sub (size (pack (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"smartpy_utils.py\" 117)) (\"smartpy_utils.py\" 117)) (\"smartpy_utils.py\" 122)) (literal (intOrNat 6) (\"smartpy_utils.py\" 122)) (\"smartpy_utils.py\" 122)) (\"smartpy_utils.py\" 122)) \"Some\" \"None\" (\"smartpy_utils.py\" 122)) (pack (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"smartpy_utils.py\" 117)) (\"smartpy_utils.py\" 117)) (\"smartpy_utils.py\" 122)) \"Some\" (literal (string \"Could not encode string to bytes.\") (\"smartpy_utils.py\" 122)) (\"smartpy_utils.py\" 122)) (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 64)) (\"utils.py\" 64)) (\"utils.py\" 64)) (verify (lt (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 65)) (\"smartpy_utils.py\" 267)) (literal (intOrNat 64) (\"smartpy_utils.py\" 126)) (\"smartpy_utils.py\" 126)) (literal (string \"(number) must be lower than 64\") (\"smartpy_utils.py\" 126)) (\"smartpy_utils.py\" 126)) (defineLocal \"lengthBytes\" (openVariant (slice (literal (intOrNat 2) (\"smartpy_utils.py\" 131)) (openVariant (isNat (sub (size (pack (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 65)) (\"smartpy_utils.py\" 267)) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 131)) (literal (intOrNat 2) (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) \"Some\" \"None\" (\"smartpy_utils.py\" 131)) (pack (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 65)) (\"smartpy_utils.py\" 267)) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 131)) \"Some\" (literal (string \"Could not encode nat to bytes.\") (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) True (\"smartpy_utils.py\" 267)) (whileBlock (lt (size (getLocal \"lengthBytes\" (\"smartpy_utils.py\" 268)) (\"smartpy_utils.py\" 268)) (literal (intOrNat 4) (\"smartpy_utils.py\" 268)) (\"smartpy_utils.py\" 268)) ((set (getLocal \"lengthBytes\" (\"utils.py\" 132)) (add (literal (bytes \"0x00\") (\"smartpy_utils.py\" 269)) (getLocal \"lengthBytes\" (\"smartpy_utils.py\" 269)) (\"smartpy_utils.py\" 269)) (\"smartpy_utils.py\" 269))) (\"smartpy_utils.py\" 268)) (verify (eq (openVariant (unpack (concat (list (\"smartpy_utils.py\" 275) (literal (bytes \"0x05\") (\"smartpy_utils.py\" 275)) (literal (bytes \"0x01\") (\"smartpy_utils.py\" 275)) (getLocal \"lengthBytes\" (\"smartpy_utils.py\" 275)) (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 65))) (\"smartpy_utils.py\" 275)) \"string\" (\"smartpy_utils.py\" 276)) \"Some\" (literal (string \"Could not decode bytes to string\") (\"smartpy_utils.py\" 276)) (\"smartpy_utils.py\" 276)) (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"utils.py\" 65)) (\"utils.py\" 65)) (\"utils.py\" 65)))))\nflags ()\nprivates ((int_of_string (lambda 0 None False \"\" (\"utils.py\" 132) ((defineLocal \"utils_0\" (lambdaParams 0 \"\" (\"utils.py\" 132) (unknown 4)) True (\"smartpy_utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (lambdaParams 0 \"\" (\"utils.py\" 132) (unknown 4))) ((set (getLocal \"utils_0\" (\"utils.py\" 132)) (openVariant (slice (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (openVariant (isNat (sub (size (lambdaParams 0 \"\" (\"utils.py\" 132) (unknown 4)) (\"smartpy_utils.py\" 288)) (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" \"None\" (\"smartpy_utils.py\" 288)) (lambdaParams 0 \"\" (\"utils.py\" 132) (unknown 4)) (\"smartpy_utils.py\" 288)) \"Some\" (literal (string \"\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288))) (\"smartpy_utils.py\" 287)) (defineLocal \"utils_1\" (literal (intOrNat 0) (\"smartpy_utils.py\" 290)) True (\"smartpy_utils.py\" 290)) (forGroup \"utils_2\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 291)) (size (getLocal \"utils_0\" (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) ((set (getLocal \"utils_1\" (\"utils.py\" 132)) (add (mul (literal (intOrNat 10) (\"smartpy_utils.py\" 292)) (getLocal \"utils_1\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (getItem (map (\"smartpy_utils.py\" 283) ((literal (string \"0\") (\"utils.py\" 132)) (literal (intOrNat 0) (\"utils.py\" 132))) ((literal (string \"1\") (\"utils.py\" 132)) (literal (intOrNat 1) (\"utils.py\" 132))) ((literal (string \"2\") (\"utils.py\" 132)) (literal (intOrNat 2) (\"utils.py\" 132))) ((literal (string \"3\") (\"utils.py\" 132)) (literal (intOrNat 3) (\"utils.py\" 132))) ((literal (string \"4\") (\"utils.py\" 132)) (literal (intOrNat 4) (\"utils.py\" 132))) ((literal (string \"5\") (\"utils.py\" 132)) (literal (intOrNat 5) (\"utils.py\" 132))) ((literal (string \"6\") (\"utils.py\" 132)) (literal (intOrNat 6) (\"utils.py\" 132))) ((literal (string \"7\") (\"utils.py\" 132)) (literal (intOrNat 7) (\"utils.py\" 132))) ((literal (string \"8\") (\"utils.py\" 132)) (literal (intOrNat 8) (\"utils.py\" 132))) ((literal (string \"9\") (\"utils.py\" 132)) (literal (intOrNat 9) (\"utils.py\" 132)))) (openVariant (slice (iter \"utils_2\" (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 292)) (getLocal \"utils_0\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) \"Some\" \"None\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292))) (\"smartpy_utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (lambdaParams 0 \"\" (\"utils.py\" 132) (unknown 4))) ((set (getLocal \"utils_1\" (\"utils.py\" 132)) (mul (getLocal \"utils_1\" (\"smartpy_utils.py\" 295)) (literal (int -1) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295))) (\"smartpy_utils.py\" 294)) (result (getLocal \"utils_1\" (\"smartpy_utils.py\" 297)) (\"utils.py\" 15))))) (math_median (lambda 1 None False \"\" (\"utils.py\" 132) ((defineLocal \"utils_3_hist\" (map (\"smartpy_utils.py\" 83) ) True (\"smartpy_utils.py\" 83)) (forGroup \"utils_4_x\" (lambdaParams 1 \"\" (\"utils.py\" 132) (unknown 7)) ((ifBlock (contains (getLocal \"utils_3_hist\" (\"smartpy_utils.py\" 85)) (iter \"utils_4_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 85)) ((set (getItem (getLocal \"utils_3_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_4_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (add (getItem (getLocal \"utils_3_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_4_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (literal (intOrNat 1) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86))) (\"smartpy_utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_3_hist\" (\"smartpy_utils.py\" 88)) (iter \"utils_4_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 88)) (literal (intOrNat 1) (\"smartpy_utils.py\" 88)) (\"smartpy_utils.py\" 88))))) (\"smartpy_utils.py\" 84)) (defineLocal \"compute_smartpy_utils_90\" (size (lambdaParams 1 \"\" (\"utils.py\" 132) (unknown 7)) (\"smartpy_utils.py\" 90)) True (\"smartpy_utils.py\" 90)) (defineLocal \"utils_5_result\" (literal (nat 0) (\"smartpy_utils.py\" 91)) True (\"smartpy_utils.py\" 91)) (defineLocal \"utils_6_half\" (truediv (getLocal \"compute_smartpy_utils_90\" (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 92)) (\"smartpy_utils.py\" 92)) True (\"smartpy_utils.py\" 92)) (defineLocal \"utils_7_use_average\" (eq (mul (getLocal \"utils_6_half\" (\"smartpy_utils.py\" 93)) (literal (intOrNat 2) (\"smartpy_utils.py\" 93)) (\"smartpy_utils.py\" 93)) (getLocal \"compute_smartpy_utils_90\" (\"smartpy_utils.py\" 90)) (\"smartpy_utils.py\" 93)) True (\"smartpy_utils.py\" 93)) (defineLocal \"utils_8_i\" (literal (intOrNat 0) (\"smartpy_utils.py\" 94)) True (\"smartpy_utils.py\" 94)) (forGroup \"utils_9_x\" (items (getLocal \"utils_3_hist\" (\"smartpy_utils.py\" 95)) (\"smartpy_utils.py\" 95)) ((ifBlock (getLocal \"utils_7_use_average\" (\"smartpy_utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_8_i\" (\"smartpy_utils.py\" 97)) (getLocal \"utils_6_half\" (\"smartpy_utils.py\" 97)) (\"smartpy_utils.py\" 97)) ((set (getLocal \"utils_5_result\" (\"utils.py\" 132)) (attr (iter \"utils_9_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 98)) (set (getLocal \"utils_8_i\" (\"utils.py\" 132)) (add (getLocal \"utils_8_i\" (\"smartpy_utils.py\" 99)) (attr (iter \"utils_9_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (ifBlock (gt (getLocal \"utils_8_i\" (\"smartpy_utils.py\" 100)) (getLocal \"utils_6_half\" (\"smartpy_utils.py\" 100)) (\"smartpy_utils.py\" 100)) ((set (getLocal \"utils_7_use_average\" (\"utils.py\" 132)) (literal (bool False) (\"smartpy_utils.py\" 101)) (\"smartpy_utils.py\" 101))) (\"smartpy_utils.py\" 100))) (\"smartpy_utils.py\" 97)) (elseBlock ((set (getLocal \"utils_5_result\" (\"utils.py\" 132)) (add (getLocal \"utils_5_result\" (\"smartpy_utils.py\" 103)) (attr (iter \"utils_9_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 103)) (\"smartpy_utils.py\" 103)) (set (getLocal \"utils_5_result\" (\"utils.py\" 132)) (truediv (getLocal \"utils_5_result\" (\"smartpy_utils.py\" 104)) (literal (intOrNat 2) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (set (getLocal \"utils_7_use_average\" (\"utils.py\" 132)) (literal (bool False) (\"smartpy_utils.py\" 105)) (\"smartpy_utils.py\" 105)) (set (getLocal \"utils_8_i\" (\"utils.py\" 132)) (add (getLocal \"utils_8_i\" (\"smartpy_utils.py\" 106)) (attr (iter \"utils_9_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 106)) (\"smartpy_utils.py\" 106))))) (\"smartpy_utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_8_i\" (\"smartpy_utils.py\" 108)) (getLocal \"utils_6_half\" (\"smartpy_utils.py\" 108)) (\"smartpy_utils.py\" 108)) ((set (getLocal \"utils_5_result\" (\"utils.py\" 132)) (attr (iter \"utils_9_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 109)) (set (getLocal \"utils_8_i\" (\"utils.py\" 132)) (add (getLocal \"utils_8_i\" (\"smartpy_utils.py\" 110)) (attr (iter \"utils_9_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 110)) (\"smartpy_utils.py\" 110))) (\"smartpy_utils.py\" 108))))) (\"smartpy_utils.py\" 95)) (result (getLocal \"utils_5_result\" (\"smartpy_utils.py\" 112)) (\"utils.py\" 35))))) (math_pow (lambda 2 None False \"\" (\"utils.py\" 132) ((result (call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") (\"smartpy_utils.py\" 9) (attr (lambdaParams 2 \"\" (\"utils.py\" 132) (unknown 14)) \"exponent\" (\"utils.py\" 31)) (attr (lambdaParams 2 \"\" (\"utils.py\" 132) (unknown 14)) \"base\" (\"utils.py\" 31)) (literal (intOrNat 1) (\"smartpy_utils.py\" 9))) (\"utils.py\" 31))))) (string_ends_with (lambda 3 None False \"\" (\"utils.py\" 132) ((result (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 137) (attr (lambdaParams 3 \"\" (\"utils.py\" 132) (unknown 15)) \"text\" (\"utils.py\" 27)) (attr (lambdaParams 3 \"\" (\"utils.py\" 132) (unknown 15)) \"postfix\" (\"utils.py\" 27))) (\"utils.py\" 27))))) (string_of_int (lambda 4 None False \"\" (\"utils.py\" 132) ((defineLocal \"utils_10\" (abs (lambdaParams 4 \"\" (\"utils.py\" 132) (unknown 16)) (\"smartpy_utils.py\" 248)) True (\"smartpy_utils.py\" 248)) (defineLocal \"utils_11\" (list (\"smartpy_utils.py\" 249) ) True (\"smartpy_utils.py\" 249)) (ifBlock (eq (getLocal \"utils_10\" (\"smartpy_utils.py\" 251)) (literal (intOrNat 0) (\"smartpy_utils.py\" 251)) (\"smartpy_utils.py\" 251)) ((set (getLocal \"utils_11\" (\"smartpy_utils.py\" 252)) (cons (literal (string \"0\") (\"smartpy_utils.py\" 252)) (getLocal \"utils_11\" (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252))) (\"smartpy_utils.py\" 251)) (whileBlock (gt (getLocal \"utils_10\" (\"smartpy_utils.py\" 253)) (literal (intOrNat 0) (\"smartpy_utils.py\" 253)) (\"smartpy_utils.py\" 253)) ((set (getLocal \"utils_11\" (\"smartpy_utils.py\" 254)) (cons (getItem (map (\"smartpy_utils.py\" 246) ((literal (intOrNat 0) (\"utils.py\" 132)) (literal (string \"0\") (\"utils.py\" 132))) ((literal (intOrNat 1) (\"utils.py\" 132)) (literal (string \"1\") (\"utils.py\" 132))) ((literal (intOrNat 2) (\"utils.py\" 132)) (literal (string \"2\") (\"utils.py\" 132))) ((literal (intOrNat 3) (\"utils.py\" 132)) (literal (string \"3\") (\"utils.py\" 132))) ((literal (intOrNat 4) (\"utils.py\" 132)) (literal (string \"4\") (\"utils.py\" 132))) ((literal (intOrNat 5) (\"utils.py\" 132)) (literal (string \"5\") (\"utils.py\" 132))) ((literal (intOrNat 6) (\"utils.py\" 132)) (literal (string \"6\") (\"utils.py\" 132))) ((literal (intOrNat 7) (\"utils.py\" 132)) (literal (string \"7\") (\"utils.py\" 132))) ((literal (intOrNat 8) (\"utils.py\" 132)) (literal (string \"8\") (\"utils.py\" 132))) ((literal (intOrNat 9) (\"utils.py\" 132)) (literal (string \"9\") (\"utils.py\" 132)))) (mod (getLocal \"utils_10\" (\"smartpy_utils.py\" 254)) (literal (intOrNat 10) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (getLocal \"utils_11\" (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (set (getLocal \"utils_10\" (\"utils.py\" 132)) (floordiv (getLocal \"utils_10\" (\"smartpy_utils.py\" 255)) (literal (intOrNat 10) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255))) (\"smartpy_utils.py\" 253)) (defineLocal \"utils_12\" (concat (getLocal \"utils_11\" (\"smartpy_utils.py\" 257)) (\"smartpy_utils.py\" 257)) True (\"smartpy_utils.py\" 257)) (ifBlock (lt (lambdaParams 4 \"\" (\"utils.py\" 132) (unknown 16)) (literal (intOrNat 0) (\"smartpy_utils.py\" 247)) (\"smartpy_utils.py\" 247)) ((set (getLocal \"utils_12\" (\"utils.py\" 132)) (add (literal (string \"-\") (\"smartpy_utils.py\" 259)) (getLocal \"utils_12\" (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259))) (\"smartpy_utils.py\" 258)) (result (getLocal \"utils_12\" (\"smartpy_utils.py\" 261)) (\"utils.py\" 11))))) (string_split (lambda 5 None False \"\" (\"utils.py\" 132) ((defineLocal \"utils_13\" (literal (intOrNat 0) (\"smartpy_utils.py\" 233)) True (\"smartpy_utils.py\" 233)) (defineLocal \"utils_14\" (list (\"smartpy_utils.py\" 234) ) True (\"smartpy_utils.py\" 234)) (forGroup \"utils_15\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 235)) (size (attr (lambdaParams 5 \"\" (\"utils.py\" 132) (unknown 20)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_15\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 236)) (attr (lambdaParams 5 \"\" (\"utils.py\" 132) (unknown 20)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 236)) \"Some\" \"None\" (\"smartpy_utils.py\" 236)) (attr (lambdaParams 5 \"\" (\"utils.py\" 132) (unknown 20)) \"separator\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 236)) ((set (getLocal \"utils_14\" (\"smartpy_utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_13\" (\"smartpy_utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_15\" (\"smartpy_utils.py\" 235)) (getLocal \"utils_13\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (attr (lambdaParams 5 \"\" (\"utils.py\" 132) (unknown 20)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (getLocal \"utils_14\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (set (getLocal \"utils_13\" (\"utils.py\" 132)) (add (iter \"utils_15\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238))) (\"smartpy_utils.py\" 236))) (\"smartpy_utils.py\" 235)) (ifBlock (gt (size (attr (lambdaParams 5 \"\" (\"utils.py\" 132) (unknown 20)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 239)) (literal (intOrNat 0) (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) ((set (getLocal \"utils_14\" (\"smartpy_utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_13\" (\"smartpy_utils.py\" 240)) (openVariant (isNat (sub (size (attr (lambdaParams 5 \"\" (\"utils.py\" 132) (unknown 20)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 240)) (getLocal \"utils_13\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (attr (lambdaParams 5 \"\" (\"utils.py\" 132) (unknown 20)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (getLocal \"utils_14\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240))) (\"smartpy_utils.py\" 239)) (result (rev (getLocal \"utils_14\" (\"smartpy_utils.py\" 241)) (\"smartpy_utils.py\" 241)) (\"utils.py\" 19))))) (string_starts_with (lambda 6 None False \"\" (\"utils.py\" 132) ((result (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (attr (lambdaParams 6 \"\" (\"utils.py\" 132) (unknown 23)) \"prefix\" (\"utils.py\" 23)) (attr (lambdaParams 6 \"\" (\"utils.py\" 132) (unknown 23)) \"text\" (\"utils.py\" 23))) (\"utils.py\" 23))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "(static_id 0 (\"utils.py\" 131))",
    "line_no": "(\"utils.py\" 132)",
    "show": true
   },
   {
    "action": "message",
    "id": "(static_id 0 (\"utils.py\" 131))",
    "line_no": "(\"utils.py\" 134)",
    "message": "test",
    "params": "(record (\"utils.py\" 134) )"
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "UtilsTester2_test",
  "longname": "UtilsTester2_test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id (static_id 0 (\"utils.py\" 140)) \nstorage ()\nstorage_type ((unknown 54))\nmessages ((test True None None False (\"smartpy/tests/utils.py\" 98) ((defineLocal \"utils_16\" (literal (intOrNat 1) (\"utils.py\" 248)) True (\"utils.py\" 248)) (defineLocal \"utils_17\" (list (\"utils.py\" 249) ) True (\"utils.py\" 249)) (ifBlock (eq (getLocal \"utils_16\" (\"utils.py\" 251)) (literal (intOrNat 0) (\"utils.py\" 251)) (\"utils.py\" 251)) ((set (getLocal \"utils_17\" (\"utils.py\" 252)) (cons (literal (string \"0\") (\"utils.py\" 252)) (getLocal \"utils_17\" (\"utils.py\" 252)) (\"utils.py\" 252)) (\"utils.py\" 252))) (\"utils.py\" 251)) (whileBlock (gt (getLocal \"utils_16\" (\"utils.py\" 253)) (literal (intOrNat 0) (\"utils.py\" 253)) (\"utils.py\" 253)) ((set (getLocal \"utils_17\" (\"utils.py\" 254)) (cons (getItem (map (\"utils.py\" 246) ((literal (intOrNat 0) (\"utils.py\" 141)) (literal (string \"0\") (\"utils.py\" 141))) ((literal (intOrNat 1) (\"utils.py\" 141)) (literal (string \"1\") (\"utils.py\" 141))) ((literal (intOrNat 2) (\"utils.py\" 141)) (literal (string \"2\") (\"utils.py\" 141))) ((literal (intOrNat 3) (\"utils.py\" 141)) (literal (string \"3\") (\"utils.py\" 141))) ((literal (intOrNat 4) (\"utils.py\" 141)) (literal (string \"4\") (\"utils.py\" 141))) ((literal (intOrNat 5) (\"utils.py\" 141)) (literal (string \"5\") (\"utils.py\" 141))) ((literal (intOrNat 6) (\"utils.py\" 141)) (literal (string \"6\") (\"utils.py\" 141))) ((literal (intOrNat 7) (\"utils.py\" 141)) (literal (string \"7\") (\"utils.py\" 141))) ((literal (intOrNat 8) (\"utils.py\" 141)) (literal (string \"8\") (\"utils.py\" 141))) ((literal (intOrNat 9) (\"utils.py\" 141)) (literal (string \"9\") (\"utils.py\" 141)))) (mod (getLocal \"utils_16\" (\"utils.py\" 254)) (literal (intOrNat 10) (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (getLocal \"utils_17\" (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (set (getLocal \"utils_16\" (\"utils.py\" 141)) (floordiv (getLocal \"utils_16\" (\"utils.py\" 255)) (literal (intOrNat 10) (\"utils.py\" 255)) (\"utils.py\" 255)) (\"utils.py\" 255))) (\"utils.py\" 253)) (defineLocal \"utils_18\" (concat (getLocal \"utils_17\" (\"utils.py\" 257)) (\"utils.py\" 257)) True (\"utils.py\" 257)) (ifBlock (literal (bool True) (\"utils.py\" 258)) ((set (getLocal \"utils_18\" (\"utils.py\" 141)) (add (literal (string \"-\") (\"utils.py\" 259)) (getLocal \"utils_18\" (\"utils.py\" 259)) (\"utils.py\" 259)) (\"utils.py\" 259))) (\"utils.py\" 258)) (verify (eq (getLocal \"utils_18\" (\"utils.py\" 261)) (literal (string \"-1\") (\"utils.py\" 99)) (\"utils.py\" 99)) (\"utils.py\" 99)) (defineLocal \"utils_19\" (literal (intOrNat 1) (\"utils.py\" 248)) True (\"utils.py\" 248)) (defineLocal \"utils_20\" (list (\"utils.py\" 249) ) True (\"utils.py\" 249)) (ifBlock (eq (getLocal \"utils_19\" (\"utils.py\" 251)) (literal (intOrNat 0) (\"utils.py\" 251)) (\"utils.py\" 251)) ((set (getLocal \"utils_20\" (\"utils.py\" 252)) (cons (literal (string \"0\") (\"utils.py\" 252)) (getLocal \"utils_20\" (\"utils.py\" 252)) (\"utils.py\" 252)) (\"utils.py\" 252))) (\"utils.py\" 251)) (whileBlock (gt (getLocal \"utils_19\" (\"utils.py\" 253)) (literal (intOrNat 0) (\"utils.py\" 253)) (\"utils.py\" 253)) ((set (getLocal \"utils_20\" (\"utils.py\" 254)) (cons (getItem (map (\"utils.py\" 246) ((literal (intOrNat 0) (\"utils.py\" 141)) (literal (string \"0\") (\"utils.py\" 141))) ((literal (intOrNat 1) (\"utils.py\" 141)) (literal (string \"1\") (\"utils.py\" 141))) ((literal (intOrNat 2) (\"utils.py\" 141)) (literal (string \"2\") (\"utils.py\" 141))) ((literal (intOrNat 3) (\"utils.py\" 141)) (literal (string \"3\") (\"utils.py\" 141))) ((literal (intOrNat 4) (\"utils.py\" 141)) (literal (string \"4\") (\"utils.py\" 141))) ((literal (intOrNat 5) (\"utils.py\" 141)) (literal (string \"5\") (\"utils.py\" 141))) ((literal (intOrNat 6) (\"utils.py\" 141)) (literal (string \"6\") (\"utils.py\" 141))) ((literal (intOrNat 7) (\"utils.py\" 141)) (literal (string \"7\") (\"utils.py\" 141))) ((literal (intOrNat 8) (\"utils.py\" 141)) (literal (string \"8\") (\"utils.py\" 141))) ((literal (intOrNat 9) (\"utils.py\" 141)) (literal (string \"9\") (\"utils.py\" 141)))) (mod (getLocal \"utils_19\" (\"utils.py\" 254)) (literal (intOrNat 10) (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (getLocal \"utils_20\" (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (set (getLocal \"utils_19\" (\"utils.py\" 141)) (floordiv (getLocal \"utils_19\" (\"utils.py\" 255)) (literal (intOrNat 10) (\"utils.py\" 255)) (\"utils.py\" 255)) (\"utils.py\" 255))) (\"utils.py\" 253)) (defineLocal \"utils_21\" (concat (getLocal \"utils_20\" (\"utils.py\" 257)) (\"utils.py\" 257)) True (\"utils.py\" 257)) (ifBlock (literal (bool False) (\"utils.py\" 258)) ((set (getLocal \"utils_21\" (\"utils.py\" 141)) (add (literal (string \"-\") (\"utils.py\" 259)) (getLocal \"utils_21\" (\"utils.py\" 259)) (\"utils.py\" 259)) (\"utils.py\" 259))) (\"utils.py\" 258)) (verify (eq (getLocal \"utils_21\" (\"utils.py\" 261)) (literal (string \"1\") (\"utils.py\" 100)) (\"utils.py\" 100)) (\"utils.py\" 100)) (verify (eq (call_lambda (private \"string_of_int\" (\"smartpy/tests/utils.py\" 70)) (literal (intOrNat 2) (\"utils.py\" 101)) (\"utils.py\" 101)) (literal (string \"2\") (\"utils.py\" 101)) (\"utils.py\" 101)) (\"utils.py\" 101)) (defineLocal \"utils_22\" (literal (string \"1\") (\"utils.py\" 286)) True (\"utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (literal (string \"1\") (\"utils.py\" 196))) ((set (getLocal \"utils_22\" (\"utils.py\" 141)) (openVariant (slice (literal (intOrNat 1) (\"utils.py\" 288)) (openVariant (isNat (sub (size (literal (string \"1\") (\"utils.py\" 288)) (\"utils.py\" 288)) (literal (intOrNat 1) (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" \"None\" (\"utils.py\" 288)) (literal (string \"1\") (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" (literal (string \"\") (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288))) (\"utils.py\" 287)) (defineLocal \"utils_23\" (literal (intOrNat 0) (\"utils.py\" 290)) True (\"utils.py\" 290)) (forGroup \"utils_24\" (range (literal (intOrNat 0) (\"utils.py\" 291)) (size (getLocal \"utils_22\" (\"utils.py\" 291)) (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 291)) (\"utils.py\" 291)) ((set (getLocal \"utils_23\" (\"utils.py\" 141)) (add (mul (literal (intOrNat 10) (\"utils.py\" 292)) (getLocal \"utils_23\" (\"utils.py\" 292)) (\"utils.py\" 292)) (getItem (map (\"utils.py\" 283) ((literal (string \"0\") (\"utils.py\" 141)) (literal (intOrNat 0) (\"utils.py\" 141))) ((literal (string \"1\") (\"utils.py\" 141)) (literal (intOrNat 1) (\"utils.py\" 141))) ((literal (string \"2\") (\"utils.py\" 141)) (literal (intOrNat 2) (\"utils.py\" 141))) ((literal (string \"3\") (\"utils.py\" 141)) (literal (intOrNat 3) (\"utils.py\" 141))) ((literal (string \"4\") (\"utils.py\" 141)) (literal (intOrNat 4) (\"utils.py\" 141))) ((literal (string \"5\") (\"utils.py\" 141)) (literal (intOrNat 5) (\"utils.py\" 141))) ((literal (string \"6\") (\"utils.py\" 141)) (literal (intOrNat 6) (\"utils.py\" 141))) ((literal (string \"7\") (\"utils.py\" 141)) (literal (intOrNat 7) (\"utils.py\" 141))) ((literal (string \"8\") (\"utils.py\" 141)) (literal (intOrNat 8) (\"utils.py\" 141))) ((literal (string \"9\") (\"utils.py\" 141)) (literal (intOrNat 9) (\"utils.py\" 141)))) (openVariant (slice (iter \"utils_24\" (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 292)) (getLocal \"utils_22\" (\"utils.py\" 292)) (\"utils.py\" 292)) \"Some\" \"None\" (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292))) (\"utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (literal (string \"1\") (\"utils.py\" 196))) ((set (getLocal \"utils_23\" (\"utils.py\" 141)) (mul (getLocal \"utils_23\" (\"utils.py\" 295)) (literal (int -1) (\"utils.py\" 295)) (\"utils.py\" 295)) (\"utils.py\" 295))) (\"utils.py\" 294)) (verify (eq (getLocal \"utils_23\" (\"utils.py\" 297)) (literal (intOrNat 1) (\"utils.py\" 103)) (\"utils.py\" 103)) (\"utils.py\" 103)) (defineLocal \"utils_25\" (literal (string \"-1\") (\"utils.py\" 286)) True (\"utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (literal (string \"-1\") (\"utils.py\" 196))) ((set (getLocal \"utils_25\" (\"utils.py\" 141)) (openVariant (slice (literal (intOrNat 1) (\"utils.py\" 288)) (openVariant (isNat (sub (size (literal (string \"-1\") (\"utils.py\" 288)) (\"utils.py\" 288)) (literal (intOrNat 1) (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" \"None\" (\"utils.py\" 288)) (literal (string \"-1\") (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" (literal (string \"\") (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288))) (\"utils.py\" 287)) (defineLocal \"utils_26\" (literal (intOrNat 0) (\"utils.py\" 290)) True (\"utils.py\" 290)) (forGroup \"utils_27\" (range (literal (intOrNat 0) (\"utils.py\" 291)) (size (getLocal \"utils_25\" (\"utils.py\" 291)) (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 291)) (\"utils.py\" 291)) ((set (getLocal \"utils_26\" (\"utils.py\" 141)) (add (mul (literal (intOrNat 10) (\"utils.py\" 292)) (getLocal \"utils_26\" (\"utils.py\" 292)) (\"utils.py\" 292)) (getItem (map (\"utils.py\" 283) ((literal (string \"0\") (\"utils.py\" 141)) (literal (intOrNat 0) (\"utils.py\" 141))) ((literal (string \"1\") (\"utils.py\" 141)) (literal (intOrNat 1) (\"utils.py\" 141))) ((literal (string \"2\") (\"utils.py\" 141)) (literal (intOrNat 2) (\"utils.py\" 141))) ((literal (string \"3\") (\"utils.py\" 141)) (literal (intOrNat 3) (\"utils.py\" 141))) ((literal (string \"4\") (\"utils.py\" 141)) (literal (intOrNat 4) (\"utils.py\" 141))) ((literal (string \"5\") (\"utils.py\" 141)) (literal (intOrNat 5) (\"utils.py\" 141))) ((literal (string \"6\") (\"utils.py\" 141)) (literal (intOrNat 6) (\"utils.py\" 141))) ((literal (string \"7\") (\"utils.py\" 141)) (literal (intOrNat 7) (\"utils.py\" 141))) ((literal (string \"8\") (\"utils.py\" 141)) (literal (intOrNat 8) (\"utils.py\" 141))) ((literal (string \"9\") (\"utils.py\" 141)) (literal (intOrNat 9) (\"utils.py\" 141)))) (openVariant (slice (iter \"utils_27\" (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 292)) (getLocal \"utils_25\" (\"utils.py\" 292)) (\"utils.py\" 292)) \"Some\" \"None\" (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292))) (\"utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (literal (string \"-1\") (\"utils.py\" 196))) ((set (getLocal \"utils_26\" (\"utils.py\" 141)) (mul (getLocal \"utils_26\" (\"utils.py\" 295)) (literal (int -1) (\"utils.py\" 295)) (\"utils.py\" 295)) (\"utils.py\" 295))) (\"utils.py\" 294)) (verify (eq (getLocal \"utils_26\" (\"utils.py\" 297)) (literal (int -1) (\"utils.py\" 104)) (\"utils.py\" 104)) (\"utils.py\" 104)) (verify (eq (call_lambda (private \"int_of_string\" (\"smartpy/tests/utils.py\" 74)) (literal (string \"2\") (\"utils.py\" 105)) (\"utils.py\" 105)) (literal (intOrNat 2) (\"utils.py\" 105)) (\"utils.py\" 105)) (\"utils.py\" 105)) (defineLocal \"utils_28\" (literal (intOrNat 0) (\"utils.py\" 233)) True (\"utils.py\" 233)) (defineLocal \"utils_29\" (list (\"utils.py\" 234) ) True (\"utils.py\" 234)) (forGroup \"utils_30\" (range (literal (intOrNat 0) (\"utils.py\" 235)) (size (literal (string \"a b\") (\"utils.py\" 235)) (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 235)) (\"utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_30\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 236)) (literal (string \"a b\") (\"utils.py\" 236)) (\"utils.py\" 236)) \"Some\" \"None\" (\"utils.py\" 236)) (literal (string \" \") (\"utils.py\" 236)) (\"utils.py\" 236)) ((set (getLocal \"utils_29\" (\"utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_28\" (\"utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_30\" (\"utils.py\" 235)) (getLocal \"utils_28\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (literal (string \"a b\") (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (getLocal \"utils_29\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) (set (getLocal \"utils_28\" (\"utils.py\" 141)) (add (iter \"utils_30\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 238)) (\"utils.py\" 238)) (\"utils.py\" 238))) (\"utils.py\" 236))) (\"utils.py\" 235)) (ifBlock (gt (size (literal (string \"a b\") (\"utils.py\" 239)) (\"utils.py\" 239)) (literal (intOrNat 0) (\"utils.py\" 239)) (\"utils.py\" 239)) ((set (getLocal \"utils_29\" (\"utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_28\" (\"utils.py\" 240)) (openVariant (isNat (sub (size (literal (string \"a b\") (\"utils.py\" 240)) (\"utils.py\" 240)) (getLocal \"utils_28\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (literal (string \"a b\") (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (getLocal \"utils_29\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240))) (\"utils.py\" 239)) (verify (eq (pack (type_annotation (rev (getLocal \"utils_29\" (\"utils.py\" 241)) (\"utils.py\" 241)) (unknown 87) (\"utils.py\" 107)) (\"utils.py\" 107)) (pack (type_annotation (list (\"utils.py\" 107) (literal (string \"a\") (\"utils.py\" 107)) (literal (string \"b\") (\"utils.py\" 107))) (unknown 87) (\"utils.py\" 107)) (\"utils.py\" 107)) (\"utils.py\" 107)) (\"utils.py\" 107)) (defineLocal \"utils_31\" (literal (intOrNat 0) (\"utils.py\" 233)) True (\"utils.py\" 233)) (defineLocal \"utils_32\" (list (\"utils.py\" 234) ) True (\"utils.py\" 234)) (forGroup \"utils_33\" (range (literal (intOrNat 0) (\"utils.py\" 235)) (size (literal (string \"b,a\") (\"utils.py\" 235)) (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 235)) (\"utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_33\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 236)) (literal (string \"b,a\") (\"utils.py\" 236)) (\"utils.py\" 236)) \"Some\" \"None\" (\"utils.py\" 236)) (literal (string \",\") (\"utils.py\" 236)) (\"utils.py\" 236)) ((set (getLocal \"utils_32\" (\"utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_31\" (\"utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_33\" (\"utils.py\" 235)) (getLocal \"utils_31\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (literal (string \"b,a\") (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (getLocal \"utils_32\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) (set (getLocal \"utils_31\" (\"utils.py\" 141)) (add (iter \"utils_33\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 238)) (\"utils.py\" 238)) (\"utils.py\" 238))) (\"utils.py\" 236))) (\"utils.py\" 235)) (ifBlock (gt (size (literal (string \"b,a\") (\"utils.py\" 239)) (\"utils.py\" 239)) (literal (intOrNat 0) (\"utils.py\" 239)) (\"utils.py\" 239)) ((set (getLocal \"utils_32\" (\"utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_31\" (\"utils.py\" 240)) (openVariant (isNat (sub (size (literal (string \"b,a\") (\"utils.py\" 240)) (\"utils.py\" 240)) (getLocal \"utils_31\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (literal (string \"b,a\") (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (getLocal \"utils_32\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240))) (\"utils.py\" 239)) (verify (eq (pack (type_annotation (rev (getLocal \"utils_32\" (\"utils.py\" 241)) (\"utils.py\" 241)) (unknown 90) (\"utils.py\" 108)) (\"utils.py\" 108)) (pack (type_annotation (list (\"utils.py\" 108) (literal (string \"b\") (\"utils.py\" 108)) (literal (string \"a\") (\"utils.py\" 108))) (unknown 90) (\"utils.py\" 108)) (\"utils.py\" 108)) (\"utils.py\" 108)) (\"utils.py\" 108)) (verify (eq (pack (type_annotation (call_lambda (private \"string_split\" (\"smartpy/tests/utils.py\" 78)) (record (\"utils.py\" 109) (separator (literal (string \",,\") (\"utils.py\" 109))) (text (literal (string \"a,b\") (\"utils.py\" 109)))) (\"utils.py\" 109)) (unknown 91) (\"utils.py\" 109)) (\"utils.py\" 109)) (pack (type_annotation (list (\"utils.py\" 109) (literal (string \"a,b\") (\"utils.py\" 109))) (unknown 91) (\"utils.py\" 109)) (\"utils.py\" 109)) (\"utils.py\" 109)) (\"utils.py\" 109)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"a\") (\"utils.py\" 196)) (literal (string \"abc\") (\"utils.py\" 196))) (literal (bool True) (\"utils.py\" 111)) (\"utils.py\" 111)) (\"utils.py\" 111)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"b\") (\"utils.py\" 196)) (literal (string \"abc\") (\"utils.py\" 196))) (literal (bool False) (\"utils.py\" 112)) (\"utils.py\" 112)) (\"utils.py\" 112)) (verify (eq (call_lambda (private \"string_starts_with\" (\"smartpy/tests/utils.py\" 82)) (record (\"utils.py\" 113) (prefix (literal (string \"a\") (\"utils.py\" 113))) (text (literal (string \"abc\") (\"utils.py\" 113)))) (\"utils.py\" 113)) (literal (bool True) (\"utils.py\" 113)) (\"utils.py\" 113)) (\"utils.py\" 113)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 137) (literal (string \"abc\") (\"utils.py\" 137)) (literal (string \"c\") (\"utils.py\" 137))) (literal (bool True) (\"utils.py\" 115)) (\"utils.py\" 115)) (\"utils.py\" 115)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 137) (literal (string \"abc\") (\"utils.py\" 137)) (literal (string \"b\") (\"utils.py\" 137))) (literal (bool False) (\"utils.py\" 116)) (\"utils.py\" 116)) (\"utils.py\" 116)) (verify (eq (call_lambda (private \"string_ends_with\" (\"smartpy/tests/utils.py\" 86)) (record (\"utils.py\" 117) (postfix (literal (string \"c\") (\"utils.py\" 117))) (text (literal (string \"abc\") (\"utils.py\" 117)))) (\"utils.py\" 117)) (literal (bool True) (\"utils.py\" 117)) (\"utils.py\" 117)) (\"utils.py\" 117)) (defineLocal \"utils_34_hist\" (map (\"utils.py\" 83) ) True (\"utils.py\" 83)) (forGroup \"utils_35_x\" (list (\"utils.py\" 84) (literal (intOrNat 1) (\"utils.py\" 84)) (literal (intOrNat 2) (\"utils.py\" 84)) (literal (intOrNat 3) (\"utils.py\" 84)) (literal (intOrNat 4) (\"utils.py\" 84)) (literal (intOrNat 5) (\"utils.py\" 84))) ((ifBlock (contains (getLocal \"utils_34_hist\" (\"utils.py\" 85)) (iter \"utils_35_x\" (\"utils.py\" 84)) (\"utils.py\" 85)) ((set (getItem (getLocal \"utils_34_hist\" (\"utils.py\" 86)) (iter \"utils_35_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (add (getItem (getLocal \"utils_34_hist\" (\"utils.py\" 86)) (iter \"utils_35_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (literal (intOrNat 1) (\"utils.py\" 86)) (\"utils.py\" 86)) (\"utils.py\" 86))) (\"utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_34_hist\" (\"utils.py\" 88)) (iter \"utils_35_x\" (\"utils.py\" 84)) (\"utils.py\" 88)) (literal (intOrNat 1) (\"utils.py\" 88)) (\"utils.py\" 88))))) (\"utils.py\" 84)) (defineLocal \"compute_utils_90i\" (size (list (\"utils.py\" 90) (literal (intOrNat 1) (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 90)) (literal (intOrNat 3) (\"utils.py\" 90)) (literal (intOrNat 4) (\"utils.py\" 90)) (literal (intOrNat 5) (\"utils.py\" 90))) (\"utils.py\" 90)) True (\"utils.py\" 90)) (defineLocal \"utils_36_result\" (literal (nat 0) (\"utils.py\" 91)) True (\"utils.py\" 91)) (defineLocal \"utils_37_half\" (truediv (getLocal \"compute_utils_90i\" (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 92)) (\"utils.py\" 92)) True (\"utils.py\" 92)) (defineLocal \"utils_38_use_average\" (eq (mul (getLocal \"utils_37_half\" (\"utils.py\" 93)) (literal (intOrNat 2) (\"utils.py\" 93)) (\"utils.py\" 93)) (getLocal \"compute_utils_90i\" (\"utils.py\" 90)) (\"utils.py\" 93)) True (\"utils.py\" 93)) (defineLocal \"utils_39_i\" (literal (intOrNat 0) (\"utils.py\" 94)) True (\"utils.py\" 94)) (forGroup \"utils_40_x\" (items (getLocal \"utils_34_hist\" (\"utils.py\" 95)) (\"utils.py\" 95)) ((ifBlock (getLocal \"utils_38_use_average\" (\"utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_39_i\" (\"utils.py\" 97)) (getLocal \"utils_37_half\" (\"utils.py\" 97)) (\"utils.py\" 97)) ((set (getLocal \"utils_36_result\" (\"utils.py\" 141)) (attr (iter \"utils_40_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 98)) (set (getLocal \"utils_39_i\" (\"utils.py\" 141)) (add (getLocal \"utils_39_i\" (\"utils.py\" 99)) (attr (iter \"utils_40_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 99)) (\"utils.py\" 99)) (ifBlock (gt (getLocal \"utils_39_i\" (\"utils.py\" 100)) (getLocal \"utils_37_half\" (\"utils.py\" 100)) (\"utils.py\" 100)) ((set (getLocal \"utils_38_use_average\" (\"utils.py\" 141)) (literal (bool False) (\"utils.py\" 101)) (\"utils.py\" 101))) (\"utils.py\" 100))) (\"utils.py\" 97)) (elseBlock ((set (getLocal \"utils_36_result\" (\"utils.py\" 141)) (add (getLocal \"utils_36_result\" (\"utils.py\" 103)) (attr (iter \"utils_40_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 103)) (\"utils.py\" 103)) (set (getLocal \"utils_36_result\" (\"utils.py\" 141)) (truediv (getLocal \"utils_36_result\" (\"utils.py\" 104)) (literal (intOrNat 2) (\"utils.py\" 104)) (\"utils.py\" 104)) (\"utils.py\" 104)) (set (getLocal \"utils_38_use_average\" (\"utils.py\" 141)) (literal (bool False) (\"utils.py\" 105)) (\"utils.py\" 105)) (set (getLocal \"utils_39_i\" (\"utils.py\" 141)) (add (getLocal \"utils_39_i\" (\"utils.py\" 106)) (attr (iter \"utils_40_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 106)) (\"utils.py\" 106))))) (\"utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_39_i\" (\"utils.py\" 108)) (getLocal \"utils_37_half\" (\"utils.py\" 108)) (\"utils.py\" 108)) ((set (getLocal \"utils_36_result\" (\"utils.py\" 141)) (attr (iter \"utils_40_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 109)) (set (getLocal \"utils_39_i\" (\"utils.py\" 141)) (add (getLocal \"utils_39_i\" (\"utils.py\" 110)) (attr (iter \"utils_40_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 110)) (\"utils.py\" 110))) (\"utils.py\" 108))))) (\"utils.py\" 95)) (verify (eq (getLocal \"utils_36_result\" (\"utils.py\" 112)) (literal (intOrNat 3) (\"utils.py\" 119)) (\"utils.py\" 119)) (\"utils.py\" 119)) (defineLocal \"utils_41_hist\" (map (\"utils.py\" 83) ) True (\"utils.py\" 83)) (forGroup \"utils_42_x\" (list (\"utils.py\" 84) (literal (intOrNat 1) (\"utils.py\" 84)) (literal (intOrNat 2) (\"utils.py\" 84)) (literal (intOrNat 2) (\"utils.py\" 84)) (literal (intOrNat 3) (\"utils.py\" 84))) ((ifBlock (contains (getLocal \"utils_41_hist\" (\"utils.py\" 85)) (iter \"utils_42_x\" (\"utils.py\" 84)) (\"utils.py\" 85)) ((set (getItem (getLocal \"utils_41_hist\" (\"utils.py\" 86)) (iter \"utils_42_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (add (getItem (getLocal \"utils_41_hist\" (\"utils.py\" 86)) (iter \"utils_42_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (literal (intOrNat 1) (\"utils.py\" 86)) (\"utils.py\" 86)) (\"utils.py\" 86))) (\"utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_41_hist\" (\"utils.py\" 88)) (iter \"utils_42_x\" (\"utils.py\" 84)) (\"utils.py\" 88)) (literal (intOrNat 1) (\"utils.py\" 88)) (\"utils.py\" 88))))) (\"utils.py\" 84)) (defineLocal \"compute_utils_90\" (size (list (\"utils.py\" 90) (literal (intOrNat 1) (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 90)) (literal (intOrNat 3) (\"utils.py\" 90))) (\"utils.py\" 90)) True (\"utils.py\" 90)) (defineLocal \"utils_43_result\" (literal (nat 0) (\"utils.py\" 91)) True (\"utils.py\" 91)) (defineLocal \"utils_44_half\" (truediv (getLocal \"compute_utils_90\" (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 92)) (\"utils.py\" 92)) True (\"utils.py\" 92)) (defineLocal \"utils_45_use_average\" (eq (mul (getLocal \"utils_44_half\" (\"utils.py\" 93)) (literal (intOrNat 2) (\"utils.py\" 93)) (\"utils.py\" 93)) (getLocal \"compute_utils_90\" (\"utils.py\" 90)) (\"utils.py\" 93)) True (\"utils.py\" 93)) (defineLocal \"utils_46_i\" (literal (intOrNat 0) (\"utils.py\" 94)) True (\"utils.py\" 94)) (forGroup \"utils_47_x\" (items (getLocal \"utils_41_hist\" (\"utils.py\" 95)) (\"utils.py\" 95)) ((ifBlock (getLocal \"utils_45_use_average\" (\"utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_46_i\" (\"utils.py\" 97)) (getLocal \"utils_44_half\" (\"utils.py\" 97)) (\"utils.py\" 97)) ((set (getLocal \"utils_43_result\" (\"utils.py\" 141)) (attr (iter \"utils_47_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 98)) (set (getLocal \"utils_46_i\" (\"utils.py\" 141)) (add (getLocal \"utils_46_i\" (\"utils.py\" 99)) (attr (iter \"utils_47_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 99)) (\"utils.py\" 99)) (ifBlock (gt (getLocal \"utils_46_i\" (\"utils.py\" 100)) (getLocal \"utils_44_half\" (\"utils.py\" 100)) (\"utils.py\" 100)) ((set (getLocal \"utils_45_use_average\" (\"utils.py\" 141)) (literal (bool False) (\"utils.py\" 101)) (\"utils.py\" 101))) (\"utils.py\" 100))) (\"utils.py\" 97)) (elseBlock ((set (getLocal \"utils_43_result\" (\"utils.py\" 141)) (add (getLocal \"utils_43_result\" (\"utils.py\" 103)) (attr (iter \"utils_47_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 103)) (\"utils.py\" 103)) (set (getLocal \"utils_43_result\" (\"utils.py\" 141)) (truediv (getLocal \"utils_43_result\" (\"utils.py\" 104)) (literal (intOrNat 2) (\"utils.py\" 104)) (\"utils.py\" 104)) (\"utils.py\" 104)) (set (getLocal \"utils_45_use_average\" (\"utils.py\" 141)) (literal (bool False) (\"utils.py\" 105)) (\"utils.py\" 105)) (set (getLocal \"utils_46_i\" (\"utils.py\" 141)) (add (getLocal \"utils_46_i\" (\"utils.py\" 106)) (attr (iter \"utils_47_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 106)) (\"utils.py\" 106))))) (\"utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_46_i\" (\"utils.py\" 108)) (getLocal \"utils_44_half\" (\"utils.py\" 108)) (\"utils.py\" 108)) ((set (getLocal \"utils_43_result\" (\"utils.py\" 141)) (attr (iter \"utils_47_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 109)) (set (getLocal \"utils_46_i\" (\"utils.py\" 141)) (add (getLocal \"utils_46_i\" (\"utils.py\" 110)) (attr (iter \"utils_47_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 110)) (\"utils.py\" 110))) (\"utils.py\" 108))))) (\"utils.py\" 95)) (verify (eq (getLocal \"utils_43_result\" (\"utils.py\" 112)) (literal (intOrNat 2) (\"utils.py\" 120)) (\"utils.py\" 120)) (\"utils.py\" 120)) (verify (eq (call_lambda (private \"math_median\" (\"smartpy/tests/utils.py\" 94)) (list (\"utils.py\" 121) (literal (intOrNat 1) (\"utils.py\" 121)) (literal (intOrNat 2) (\"utils.py\" 121)) (literal (intOrNat 2) (\"utils.py\" 121)) (literal (intOrNat 5) (\"utils.py\" 121))) (\"utils.py\" 121)) (literal (intOrNat 2) (\"utils.py\" 121)) (\"utils.py\" 121)) (\"utils.py\" 121)) (verify (literal (bool True) (\"utils.py\" 126)) (literal (string \"(number) must be lower than 64\") (\"utils.py\" 126)) (\"utils.py\" 126)) (verify (eq (openVariant (slice (literal (intOrNat 2) (\"utils.py\" 131)) (openVariant (isNat (sub (size (pack (literal (intOrNat 54) (\"utils.py\" 127)) (\"utils.py\" 127)) (\"utils.py\" 131)) (literal (intOrNat 2) (\"utils.py\" 131)) (\"utils.py\" 131)) (\"utils.py\" 131)) \"Some\" \"None\" (\"utils.py\" 131)) (pack (literal (intOrNat 54) (\"utils.py\" 127)) (\"utils.py\" 127)) (\"utils.py\" 131)) \"Some\" (literal (string \"Could not encode nat to bytes.\") (\"utils.py\" 131)) (\"utils.py\" 131)) (literal (bytes \"0x36\") (\"utils.py\" 123)) (\"utils.py\" 123)) (\"utils.py\" 123)) (verify (eq (openVariant (slice (literal (intOrNat 6) (\"utils.py\" 122)) (openVariant (isNat (sub (size (pack (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"utils.py\" 117)) (\"utils.py\" 117)) (\"utils.py\" 122)) (literal (intOrNat 6) (\"utils.py\" 122)) (\"utils.py\" 122)) (\"utils.py\" 122)) \"Some\" \"None\" (\"utils.py\" 122)) (pack (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"utils.py\" 117)) (\"utils.py\" 117)) (\"utils.py\" 122)) \"Some\" (literal (string \"Could not encode string to bytes.\") (\"utils.py\" 122)) (\"utils.py\" 122)) (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 124)) (\"utils.py\" 124)) (\"utils.py\" 124)) (verify (lt (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 125)) (\"utils.py\" 267)) (literal (intOrNat 64) (\"utils.py\" 126)) (\"utils.py\" 126)) (literal (string \"(number) must be lower than 64\") (\"utils.py\" 126)) (\"utils.py\" 126)) (defineLocal \"lengthBytes\" (openVariant (slice (literal (intOrNat 2) (\"utils.py\" 131)) (openVariant (isNat (sub (size (pack (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 125)) (\"utils.py\" 267)) (\"utils.py\" 127)) (\"utils.py\" 131)) (literal (intOrNat 2) (\"utils.py\" 131)) (\"utils.py\" 131)) (\"utils.py\" 131)) \"Some\" \"None\" (\"utils.py\" 131)) (pack (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 125)) (\"utils.py\" 267)) (\"utils.py\" 127)) (\"utils.py\" 131)) \"Some\" (literal (string \"Could not encode nat to bytes.\") (\"utils.py\" 131)) (\"utils.py\" 131)) True (\"utils.py\" 267)) (whileBlock (lt (size (getLocal \"lengthBytes\" (\"utils.py\" 268)) (\"utils.py\" 268)) (literal (intOrNat 4) (\"utils.py\" 268)) (\"utils.py\" 268)) ((set (getLocal \"lengthBytes\" (\"utils.py\" 141)) (add (literal (bytes \"0x00\") (\"utils.py\" 269)) (getLocal \"lengthBytes\" (\"utils.py\" 269)) (\"utils.py\" 269)) (\"utils.py\" 269))) (\"utils.py\" 268)) (verify (eq (openVariant (unpack (concat (list (\"utils.py\" 275) (literal (bytes \"0x05\") (\"utils.py\" 275)) (literal (bytes \"0x01\") (\"utils.py\" 275)) (getLocal \"lengthBytes\" (\"utils.py\" 275)) (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 125))) (\"utils.py\" 275)) \"string\" (\"utils.py\" 276)) \"Some\" (literal (string \"Could not decode bytes to string\") (\"utils.py\" 276)) (\"utils.py\" 276)) (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"utils.py\" 125)) (\"utils.py\" 125)) (\"utils.py\" 125)))))\nflags ()\nprivates ((int_of_string (lambda 0 None False \"\" (\"utils.py\" 141) ((defineLocal \"utils_0\" (lambdaParams 0 \"\" (\"utils.py\" 141) (unknown 55)) True (\"utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (lambdaParams 0 \"\" (\"utils.py\" 141) (unknown 55))) ((set (getLocal \"utils_0\" (\"utils.py\" 141)) (openVariant (slice (literal (intOrNat 1) (\"utils.py\" 288)) (openVariant (isNat (sub (size (lambdaParams 0 \"\" (\"utils.py\" 141) (unknown 55)) (\"utils.py\" 288)) (literal (intOrNat 1) (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" \"None\" (\"utils.py\" 288)) (lambdaParams 0 \"\" (\"utils.py\" 141) (unknown 55)) (\"utils.py\" 288)) \"Some\" (literal (string \"\") (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288))) (\"utils.py\" 287)) (defineLocal \"utils_1\" (literal (intOrNat 0) (\"utils.py\" 290)) True (\"utils.py\" 290)) (forGroup \"utils_2\" (range (literal (intOrNat 0) (\"utils.py\" 291)) (size (getLocal \"utils_0\" (\"utils.py\" 291)) (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 291)) (\"utils.py\" 291)) ((set (getLocal \"utils_1\" (\"utils.py\" 141)) (add (mul (literal (intOrNat 10) (\"utils.py\" 292)) (getLocal \"utils_1\" (\"utils.py\" 292)) (\"utils.py\" 292)) (getItem (map (\"utils.py\" 283) ((literal (string \"0\") (\"utils.py\" 141)) (literal (intOrNat 0) (\"utils.py\" 141))) ((literal (string \"1\") (\"utils.py\" 141)) (literal (intOrNat 1) (\"utils.py\" 141))) ((literal (string \"2\") (\"utils.py\" 141)) (literal (intOrNat 2) (\"utils.py\" 141))) ((literal (string \"3\") (\"utils.py\" 141)) (literal (intOrNat 3) (\"utils.py\" 141))) ((literal (string \"4\") (\"utils.py\" 141)) (literal (intOrNat 4) (\"utils.py\" 141))) ((literal (string \"5\") (\"utils.py\" 141)) (literal (intOrNat 5) (\"utils.py\" 141))) ((literal (string \"6\") (\"utils.py\" 141)) (literal (intOrNat 6) (\"utils.py\" 141))) ((literal (string \"7\") (\"utils.py\" 141)) (literal (intOrNat 7) (\"utils.py\" 141))) ((literal (string \"8\") (\"utils.py\" 141)) (literal (intOrNat 8) (\"utils.py\" 141))) ((literal (string \"9\") (\"utils.py\" 141)) (literal (intOrNat 9) (\"utils.py\" 141)))) (openVariant (slice (iter \"utils_2\" (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 292)) (getLocal \"utils_0\" (\"utils.py\" 292)) (\"utils.py\" 292)) \"Some\" \"None\" (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292))) (\"utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (lambdaParams 0 \"\" (\"utils.py\" 141) (unknown 55))) ((set (getLocal \"utils_1\" (\"utils.py\" 141)) (mul (getLocal \"utils_1\" (\"utils.py\" 295)) (literal (int -1) (\"utils.py\" 295)) (\"utils.py\" 295)) (\"utils.py\" 295))) (\"utils.py\" 294)) (result (getLocal \"utils_1\" (\"utils.py\" 297)) (\"utils.py\" 75))))) (math_median (lambda 1 None False \"\" (\"utils.py\" 141) ((defineLocal \"utils_3_hist\" (map (\"utils.py\" 83) ) True (\"utils.py\" 83)) (forGroup \"utils_4_x\" (lambdaParams 1 \"\" (\"utils.py\" 141) (unknown 58)) ((ifBlock (contains (getLocal \"utils_3_hist\" (\"utils.py\" 85)) (iter \"utils_4_x\" (\"utils.py\" 84)) (\"utils.py\" 85)) ((set (getItem (getLocal \"utils_3_hist\" (\"utils.py\" 86)) (iter \"utils_4_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (add (getItem (getLocal \"utils_3_hist\" (\"utils.py\" 86)) (iter \"utils_4_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (literal (intOrNat 1) (\"utils.py\" 86)) (\"utils.py\" 86)) (\"utils.py\" 86))) (\"utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_3_hist\" (\"utils.py\" 88)) (iter \"utils_4_x\" (\"utils.py\" 84)) (\"utils.py\" 88)) (literal (intOrNat 1) (\"utils.py\" 88)) (\"utils.py\" 88))))) (\"utils.py\" 84)) (defineLocal \"compute_utils_90\" (size (lambdaParams 1 \"\" (\"utils.py\" 141) (unknown 58)) (\"utils.py\" 90)) True (\"utils.py\" 90)) (defineLocal \"utils_5_result\" (literal (nat 0) (\"utils.py\" 91)) True (\"utils.py\" 91)) (defineLocal \"utils_6_half\" (truediv (getLocal \"compute_utils_90\" (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 92)) (\"utils.py\" 92)) True (\"utils.py\" 92)) (defineLocal \"utils_7_use_average\" (eq (mul (getLocal \"utils_6_half\" (\"utils.py\" 93)) (literal (intOrNat 2) (\"utils.py\" 93)) (\"utils.py\" 93)) (getLocal \"compute_utils_90\" (\"utils.py\" 90)) (\"utils.py\" 93)) True (\"utils.py\" 93)) (defineLocal \"utils_8_i\" (literal (intOrNat 0) (\"utils.py\" 94)) True (\"utils.py\" 94)) (forGroup \"utils_9_x\" (items (getLocal \"utils_3_hist\" (\"utils.py\" 95)) (\"utils.py\" 95)) ((ifBlock (getLocal \"utils_7_use_average\" (\"utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_8_i\" (\"utils.py\" 97)) (getLocal \"utils_6_half\" (\"utils.py\" 97)) (\"utils.py\" 97)) ((set (getLocal \"utils_5_result\" (\"utils.py\" 141)) (attr (iter \"utils_9_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 98)) (set (getLocal \"utils_8_i\" (\"utils.py\" 141)) (add (getLocal \"utils_8_i\" (\"utils.py\" 99)) (attr (iter \"utils_9_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 99)) (\"utils.py\" 99)) (ifBlock (gt (getLocal \"utils_8_i\" (\"utils.py\" 100)) (getLocal \"utils_6_half\" (\"utils.py\" 100)) (\"utils.py\" 100)) ((set (getLocal \"utils_7_use_average\" (\"utils.py\" 141)) (literal (bool False) (\"utils.py\" 101)) (\"utils.py\" 101))) (\"utils.py\" 100))) (\"utils.py\" 97)) (elseBlock ((set (getLocal \"utils_5_result\" (\"utils.py\" 141)) (add (getLocal \"utils_5_result\" (\"utils.py\" 103)) (attr (iter \"utils_9_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 103)) (\"utils.py\" 103)) (set (getLocal \"utils_5_result\" (\"utils.py\" 141)) (truediv (getLocal \"utils_5_result\" (\"utils.py\" 104)) (literal (intOrNat 2) (\"utils.py\" 104)) (\"utils.py\" 104)) (\"utils.py\" 104)) (set (getLocal \"utils_7_use_average\" (\"utils.py\" 141)) (literal (bool False) (\"utils.py\" 105)) (\"utils.py\" 105)) (set (getLocal \"utils_8_i\" (\"utils.py\" 141)) (add (getLocal \"utils_8_i\" (\"utils.py\" 106)) (attr (iter \"utils_9_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 106)) (\"utils.py\" 106))))) (\"utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_8_i\" (\"utils.py\" 108)) (getLocal \"utils_6_half\" (\"utils.py\" 108)) (\"utils.py\" 108)) ((set (getLocal \"utils_5_result\" (\"utils.py\" 141)) (attr (iter \"utils_9_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 109)) (set (getLocal \"utils_8_i\" (\"utils.py\" 141)) (add (getLocal \"utils_8_i\" (\"utils.py\" 110)) (attr (iter \"utils_9_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 110)) (\"utils.py\" 110))) (\"utils.py\" 108))))) (\"utils.py\" 95)) (result (getLocal \"utils_5_result\" (\"utils.py\" 112)) (\"utils.py\" 95))))) (math_pow (lambda 2 None False \"\" (\"utils.py\" 141) ((result (call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") (\"utils.py\" 9) (attr (lambdaParams 2 \"\" (\"utils.py\" 141) (unknown 65)) \"exponent\" (\"utils.py\" 91)) (attr (lambdaParams 2 \"\" (\"utils.py\" 141) (unknown 65)) \"base\" (\"utils.py\" 91)) (literal (intOrNat 1) (\"utils.py\" 9))) (\"utils.py\" 91))))) (string_ends_with (lambda 3 None False \"\" (\"utils.py\" 141) ((result (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 137) (attr (lambdaParams 3 \"\" (\"utils.py\" 141) (unknown 66)) \"text\" (\"utils.py\" 87)) (attr (lambdaParams 3 \"\" (\"utils.py\" 141) (unknown 66)) \"postfix\" (\"utils.py\" 87))) (\"utils.py\" 87))))) (string_of_int (lambda 4 None False \"\" (\"utils.py\" 141) ((defineLocal \"utils_10\" (abs (lambdaParams 4 \"\" (\"utils.py\" 141) (unknown 67)) (\"utils.py\" 248)) True (\"utils.py\" 248)) (defineLocal \"utils_11\" (list (\"utils.py\" 249) ) True (\"utils.py\" 249)) (ifBlock (eq (getLocal \"utils_10\" (\"utils.py\" 251)) (literal (intOrNat 0) (\"utils.py\" 251)) (\"utils.py\" 251)) ((set (getLocal \"utils_11\" (\"utils.py\" 252)) (cons (literal (string \"0\") (\"utils.py\" 252)) (getLocal \"utils_11\" (\"utils.py\" 252)) (\"utils.py\" 252)) (\"utils.py\" 252))) (\"utils.py\" 251)) (whileBlock (gt (getLocal \"utils_10\" (\"utils.py\" 253)) (literal (intOrNat 0) (\"utils.py\" 253)) (\"utils.py\" 253)) ((set (getLocal \"utils_11\" (\"utils.py\" 254)) (cons (getItem (map (\"utils.py\" 246) ((literal (intOrNat 0) (\"utils.py\" 141)) (literal (string \"0\") (\"utils.py\" 141))) ((literal (intOrNat 1) (\"utils.py\" 141)) (literal (string \"1\") (\"utils.py\" 141))) ((literal (intOrNat 2) (\"utils.py\" 141)) (literal (string \"2\") (\"utils.py\" 141))) ((literal (intOrNat 3) (\"utils.py\" 141)) (literal (string \"3\") (\"utils.py\" 141))) ((literal (intOrNat 4) (\"utils.py\" 141)) (literal (string \"4\") (\"utils.py\" 141))) ((literal (intOrNat 5) (\"utils.py\" 141)) (literal (string \"5\") (\"utils.py\" 141))) ((literal (intOrNat 6) (\"utils.py\" 141)) (literal (string \"6\") (\"utils.py\" 141))) ((literal (intOrNat 7) (\"utils.py\" 141)) (literal (string \"7\") (\"utils.py\" 141))) ((literal (intOrNat 8) (\"utils.py\" 141)) (literal (string \"8\") (\"utils.py\" 141))) ((literal (intOrNat 9) (\"utils.py\" 141)) (literal (string \"9\") (\"utils.py\" 141)))) (mod (getLocal \"utils_10\" (\"utils.py\" 254)) (literal (intOrNat 10) (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (getLocal \"utils_11\" (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (set (getLocal \"utils_10\" (\"utils.py\" 141)) (floordiv (getLocal \"utils_10\" (\"utils.py\" 255)) (literal (intOrNat 10) (\"utils.py\" 255)) (\"utils.py\" 255)) (\"utils.py\" 255))) (\"utils.py\" 253)) (defineLocal \"utils_12\" (concat (getLocal \"utils_11\" (\"utils.py\" 257)) (\"utils.py\" 257)) True (\"utils.py\" 257)) (ifBlock (lt (lambdaParams 4 \"\" (\"utils.py\" 141) (unknown 67)) (literal (intOrNat 0) (\"utils.py\" 247)) (\"utils.py\" 247)) ((set (getLocal \"utils_12\" (\"utils.py\" 141)) (add (literal (string \"-\") (\"utils.py\" 259)) (getLocal \"utils_12\" (\"utils.py\" 259)) (\"utils.py\" 259)) (\"utils.py\" 259))) (\"utils.py\" 258)) (result (getLocal \"utils_12\" (\"utils.py\" 261)) (\"utils.py\" 71))))) (string_split (lambda 5 None False \"\" (\"utils.py\" 141) ((defineLocal \"utils_13\" (literal (intOrNat 0) (\"utils.py\" 233)) True (\"utils.py\" 233)) (defineLocal \"utils_14\" (list (\"utils.py\" 234) ) True (\"utils.py\" 234)) (forGroup \"utils_15\" (range (literal (intOrNat 0) (\"utils.py\" 235)) (size (attr (lambdaParams 5 \"\" (\"utils.py\" 141) (unknown 71)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 235)) (\"utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_15\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 236)) (attr (lambdaParams 5 \"\" (\"utils.py\" 141) (unknown 71)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 236)) \"Some\" \"None\" (\"utils.py\" 236)) (attr (lambdaParams 5 \"\" (\"utils.py\" 141) (unknown 71)) \"separator\" (\"utils.py\" 79)) (\"utils.py\" 236)) ((set (getLocal \"utils_14\" (\"utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_13\" (\"utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_15\" (\"utils.py\" 235)) (getLocal \"utils_13\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (attr (lambdaParams 5 \"\" (\"utils.py\" 141) (unknown 71)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (getLocal \"utils_14\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) (set (getLocal \"utils_13\" (\"utils.py\" 141)) (add (iter \"utils_15\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 238)) (\"utils.py\" 238)) (\"utils.py\" 238))) (\"utils.py\" 236))) (\"utils.py\" 235)) (ifBlock (gt (size (attr (lambdaParams 5 \"\" (\"utils.py\" 141) (unknown 71)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 239)) (literal (intOrNat 0) (\"utils.py\" 239)) (\"utils.py\" 239)) ((set (getLocal \"utils_14\" (\"utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_13\" (\"utils.py\" 240)) (openVariant (isNat (sub (size (attr (lambdaParams 5 \"\" (\"utils.py\" 141) (unknown 71)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 240)) (getLocal \"utils_13\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (attr (lambdaParams 5 \"\" (\"utils.py\" 141) (unknown 71)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (getLocal \"utils_14\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240))) (\"utils.py\" 239)) (result (rev (getLocal \"utils_14\" (\"utils.py\" 241)) (\"utils.py\" 241)) (\"utils.py\" 79))))) (string_starts_with (lambda 6 None False \"\" (\"utils.py\" 141) ((result (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (attr (lambdaParams 6 \"\" (\"utils.py\" 141) (unknown 74)) \"prefix\" (\"utils.py\" 83)) (attr (lambdaParams 6 \"\" (\"utils.py\" 141) (unknown 74)) \"text\" (\"utils.py\" 83))) (\"utils.py\" 83))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "(static_id 0 (\"utils.py\" 140))",
    "line_no": "(\"utils.py\" 141)",
    "show": true
   },
   {
    "action": "message",
    "id": "(static_id 0 (\"utils.py\" 140))",
    "line_no": "(\"utils.py\" 143)",
    "message": "test",
    "params": "(record (\"utils.py\" 143) )"
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "UtilsTester1_compilation",
  "longname": "UtilsTester1_compilation",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id (static_id 0 (\"smartpy/tests/utils.py\" 145)) \nstorage ()\nstorage_type ((unknown 1))\nmessages ((test True None None False (\"smartpy/tests/utils.py\" 38) ((defineLocal \"utils_64\" (literal (intOrNat 1) (\"smartpy_utils.py\" 248)) True (\"smartpy_utils.py\" 248)) (defineLocal \"utils_65\" (list (\"smartpy_utils.py\" 249) ) True (\"smartpy_utils.py\" 249)) (ifBlock (eq (getLocal \"utils_64\" (\"smartpy_utils.py\" 251)) (literal (intOrNat 0) (\"smartpy_utils.py\" 251)) (\"smartpy_utils.py\" 251)) ((set (getLocal \"utils_65\" (\"smartpy_utils.py\" 252)) (cons (literal (string \"0\") (\"smartpy_utils.py\" 252)) (getLocal \"utils_65\" (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252))) (\"smartpy_utils.py\" 251)) (whileBlock (gt (getLocal \"utils_64\" (\"smartpy_utils.py\" 253)) (literal (intOrNat 0) (\"smartpy_utils.py\" 253)) (\"smartpy_utils.py\" 253)) ((set (getLocal \"utils_65\" (\"smartpy_utils.py\" 254)) (cons (getItem (map (\"smartpy_utils.py\" 246) ((literal (intOrNat 0) (\"\" -1)) (literal (string \"0\") (\"\" -1))) ((literal (intOrNat 1) (\"\" -1)) (literal (string \"1\") (\"\" -1))) ((literal (intOrNat 2) (\"\" -1)) (literal (string \"2\") (\"\" -1))) ((literal (intOrNat 3) (\"\" -1)) (literal (string \"3\") (\"\" -1))) ((literal (intOrNat 4) (\"\" -1)) (literal (string \"4\") (\"\" -1))) ((literal (intOrNat 5) (\"\" -1)) (literal (string \"5\") (\"\" -1))) ((literal (intOrNat 6) (\"\" -1)) (literal (string \"6\") (\"\" -1))) ((literal (intOrNat 7) (\"\" -1)) (literal (string \"7\") (\"\" -1))) ((literal (intOrNat 8) (\"\" -1)) (literal (string \"8\") (\"\" -1))) ((literal (intOrNat 9) (\"\" -1)) (literal (string \"9\") (\"\" -1)))) (mod (getLocal \"utils_64\" (\"smartpy_utils.py\" 254)) (literal (intOrNat 10) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (getLocal \"utils_65\" (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (set (getLocal \"utils_64\" (\"\" -1)) (floordiv (getLocal \"utils_64\" (\"smartpy_utils.py\" 255)) (literal (intOrNat 10) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255))) (\"smartpy_utils.py\" 253)) (defineLocal \"utils_66\" (concat (getLocal \"utils_65\" (\"smartpy_utils.py\" 257)) (\"smartpy_utils.py\" 257)) True (\"smartpy_utils.py\" 257)) (ifBlock (literal (bool True) (\"smartpy_utils.py\" 258)) ((set (getLocal \"utils_66\" (\"\" -1)) (add (literal (string \"-\") (\"smartpy_utils.py\" 259)) (getLocal \"utils_66\" (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259))) (\"smartpy_utils.py\" 258)) (verify (eq (getLocal \"utils_66\" (\"smartpy_utils.py\" 261)) (literal (string \"-1\") (\"utils.py\" 39)) (\"utils.py\" 39)) (\"utils.py\" 39)) (defineLocal \"utils_67\" (literal (intOrNat 1) (\"smartpy_utils.py\" 248)) True (\"smartpy_utils.py\" 248)) (defineLocal \"utils_68\" (list (\"smartpy_utils.py\" 249) ) True (\"smartpy_utils.py\" 249)) (ifBlock (eq (getLocal \"utils_67\" (\"smartpy_utils.py\" 251)) (literal (intOrNat 0) (\"smartpy_utils.py\" 251)) (\"smartpy_utils.py\" 251)) ((set (getLocal \"utils_68\" (\"smartpy_utils.py\" 252)) (cons (literal (string \"0\") (\"smartpy_utils.py\" 252)) (getLocal \"utils_68\" (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252))) (\"smartpy_utils.py\" 251)) (whileBlock (gt (getLocal \"utils_67\" (\"smartpy_utils.py\" 253)) (literal (intOrNat 0) (\"smartpy_utils.py\" 253)) (\"smartpy_utils.py\" 253)) ((set (getLocal \"utils_68\" (\"smartpy_utils.py\" 254)) (cons (getItem (map (\"smartpy_utils.py\" 246) ((literal (intOrNat 0) (\"\" -1)) (literal (string \"0\") (\"\" -1))) ((literal (intOrNat 1) (\"\" -1)) (literal (string \"1\") (\"\" -1))) ((literal (intOrNat 2) (\"\" -1)) (literal (string \"2\") (\"\" -1))) ((literal (intOrNat 3) (\"\" -1)) (literal (string \"3\") (\"\" -1))) ((literal (intOrNat 4) (\"\" -1)) (literal (string \"4\") (\"\" -1))) ((literal (intOrNat 5) (\"\" -1)) (literal (string \"5\") (\"\" -1))) ((literal (intOrNat 6) (\"\" -1)) (literal (string \"6\") (\"\" -1))) ((literal (intOrNat 7) (\"\" -1)) (literal (string \"7\") (\"\" -1))) ((literal (intOrNat 8) (\"\" -1)) (literal (string \"8\") (\"\" -1))) ((literal (intOrNat 9) (\"\" -1)) (literal (string \"9\") (\"\" -1)))) (mod (getLocal \"utils_67\" (\"smartpy_utils.py\" 254)) (literal (intOrNat 10) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (getLocal \"utils_68\" (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (set (getLocal \"utils_67\" (\"\" -1)) (floordiv (getLocal \"utils_67\" (\"smartpy_utils.py\" 255)) (literal (intOrNat 10) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255))) (\"smartpy_utils.py\" 253)) (defineLocal \"utils_69\" (concat (getLocal \"utils_68\" (\"smartpy_utils.py\" 257)) (\"smartpy_utils.py\" 257)) True (\"smartpy_utils.py\" 257)) (ifBlock (literal (bool False) (\"smartpy_utils.py\" 258)) ((set (getLocal \"utils_69\" (\"\" -1)) (add (literal (string \"-\") (\"smartpy_utils.py\" 259)) (getLocal \"utils_69\" (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259))) (\"smartpy_utils.py\" 258)) (verify (eq (getLocal \"utils_69\" (\"smartpy_utils.py\" 261)) (literal (string \"1\") (\"utils.py\" 40)) (\"utils.py\" 40)) (\"utils.py\" 40)) (verify (eq (call_lambda (private \"string_of_int\" (\"smartpy/tests/utils.py\" 10)) (literal (intOrNat 2) (\"utils.py\" 41)) (\"utils.py\" 41)) (literal (string \"2\") (\"utils.py\" 41)) (\"utils.py\" 41)) (\"utils.py\" 41)) (defineLocal \"utils_70\" (literal (string \"1\") (\"smartpy_utils.py\" 286)) True (\"smartpy_utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (literal (string \"1\") (\"smartpy_utils.py\" 196))) ((set (getLocal \"utils_70\" (\"\" -1)) (openVariant (slice (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (openVariant (isNat (sub (size (literal (string \"1\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" \"None\" (\"smartpy_utils.py\" 288)) (literal (string \"1\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" (literal (string \"\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288))) (\"smartpy_utils.py\" 287)) (defineLocal \"utils_71\" (literal (intOrNat 0) (\"smartpy_utils.py\" 290)) True (\"smartpy_utils.py\" 290)) (forGroup \"utils_72\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 291)) (size (getLocal \"utils_70\" (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) ((set (getLocal \"utils_71\" (\"\" -1)) (add (mul (literal (intOrNat 10) (\"smartpy_utils.py\" 292)) (getLocal \"utils_71\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (getItem (map (\"smartpy_utils.py\" 283) ((literal (string \"0\") (\"\" -1)) (literal (intOrNat 0) (\"\" -1))) ((literal (string \"1\") (\"\" -1)) (literal (intOrNat 1) (\"\" -1))) ((literal (string \"2\") (\"\" -1)) (literal (intOrNat 2) (\"\" -1))) ((literal (string \"3\") (\"\" -1)) (literal (intOrNat 3) (\"\" -1))) ((literal (string \"4\") (\"\" -1)) (literal (intOrNat 4) (\"\" -1))) ((literal (string \"5\") (\"\" -1)) (literal (intOrNat 5) (\"\" -1))) ((literal (string \"6\") (\"\" -1)) (literal (intOrNat 6) (\"\" -1))) ((literal (string \"7\") (\"\" -1)) (literal (intOrNat 7) (\"\" -1))) ((literal (string \"8\") (\"\" -1)) (literal (intOrNat 8) (\"\" -1))) ((literal (string \"9\") (\"\" -1)) (literal (intOrNat 9) (\"\" -1)))) (openVariant (slice (iter \"utils_72\" (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 292)) (getLocal \"utils_70\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) \"Some\" \"None\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292))) (\"smartpy_utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (literal (string \"1\") (\"smartpy_utils.py\" 196))) ((set (getLocal \"utils_71\" (\"\" -1)) (mul (getLocal \"utils_71\" (\"smartpy_utils.py\" 295)) (literal (int -1) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295))) (\"smartpy_utils.py\" 294)) (verify (eq (getLocal \"utils_71\" (\"smartpy_utils.py\" 297)) (literal (intOrNat 1) (\"utils.py\" 43)) (\"utils.py\" 43)) (\"utils.py\" 43)) (defineLocal \"utils_73\" (literal (string \"-1\") (\"smartpy_utils.py\" 286)) True (\"smartpy_utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (literal (string \"-1\") (\"smartpy_utils.py\" 196))) ((set (getLocal \"utils_73\" (\"\" -1)) (openVariant (slice (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (openVariant (isNat (sub (size (literal (string \"-1\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" \"None\" (\"smartpy_utils.py\" 288)) (literal (string \"-1\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" (literal (string \"\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288))) (\"smartpy_utils.py\" 287)) (defineLocal \"utils_74\" (literal (intOrNat 0) (\"smartpy_utils.py\" 290)) True (\"smartpy_utils.py\" 290)) (forGroup \"utils_75\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 291)) (size (getLocal \"utils_73\" (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) ((set (getLocal \"utils_74\" (\"\" -1)) (add (mul (literal (intOrNat 10) (\"smartpy_utils.py\" 292)) (getLocal \"utils_74\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (getItem (map (\"smartpy_utils.py\" 283) ((literal (string \"0\") (\"\" -1)) (literal (intOrNat 0) (\"\" -1))) ((literal (string \"1\") (\"\" -1)) (literal (intOrNat 1) (\"\" -1))) ((literal (string \"2\") (\"\" -1)) (literal (intOrNat 2) (\"\" -1))) ((literal (string \"3\") (\"\" -1)) (literal (intOrNat 3) (\"\" -1))) ((literal (string \"4\") (\"\" -1)) (literal (intOrNat 4) (\"\" -1))) ((literal (string \"5\") (\"\" -1)) (literal (intOrNat 5) (\"\" -1))) ((literal (string \"6\") (\"\" -1)) (literal (intOrNat 6) (\"\" -1))) ((literal (string \"7\") (\"\" -1)) (literal (intOrNat 7) (\"\" -1))) ((literal (string \"8\") (\"\" -1)) (literal (intOrNat 8) (\"\" -1))) ((literal (string \"9\") (\"\" -1)) (literal (intOrNat 9) (\"\" -1)))) (openVariant (slice (iter \"utils_75\" (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 292)) (getLocal \"utils_73\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) \"Some\" \"None\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292))) (\"smartpy_utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (literal (string \"-1\") (\"smartpy_utils.py\" 196))) ((set (getLocal \"utils_74\" (\"\" -1)) (mul (getLocal \"utils_74\" (\"smartpy_utils.py\" 295)) (literal (int -1) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295))) (\"smartpy_utils.py\" 294)) (verify (eq (getLocal \"utils_74\" (\"smartpy_utils.py\" 297)) (literal (int -1) (\"utils.py\" 44)) (\"utils.py\" 44)) (\"utils.py\" 44)) (verify (eq (call_lambda (private \"int_of_string\" (\"smartpy/tests/utils.py\" 14)) (literal (string \"2\") (\"utils.py\" 45)) (\"utils.py\" 45)) (literal (intOrNat 2) (\"utils.py\" 45)) (\"utils.py\" 45)) (\"utils.py\" 45)) (defineLocal \"utils_76\" (literal (intOrNat 0) (\"smartpy_utils.py\" 233)) True (\"smartpy_utils.py\" 233)) (defineLocal \"utils_77\" (list (\"smartpy_utils.py\" 234) ) True (\"smartpy_utils.py\" 234)) (forGroup \"utils_78\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 235)) (size (literal (string \"a b\") (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_78\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 236)) (literal (string \"a b\") (\"smartpy_utils.py\" 236)) (\"smartpy_utils.py\" 236)) \"Some\" \"None\" (\"smartpy_utils.py\" 236)) (literal (string \" \") (\"smartpy_utils.py\" 236)) (\"smartpy_utils.py\" 236)) ((set (getLocal \"utils_77\" (\"smartpy_utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_76\" (\"smartpy_utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_78\" (\"smartpy_utils.py\" 235)) (getLocal \"utils_76\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (literal (string \"a b\") (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (getLocal \"utils_77\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (set (getLocal \"utils_76\" (\"\" -1)) (add (iter \"utils_78\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238))) (\"smartpy_utils.py\" 236))) (\"smartpy_utils.py\" 235)) (ifBlock (gt (size (literal (string \"a b\") (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) (literal (intOrNat 0) (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) ((set (getLocal \"utils_77\" (\"smartpy_utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_76\" (\"smartpy_utils.py\" 240)) (openVariant (isNat (sub (size (literal (string \"a b\") (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (getLocal \"utils_76\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (literal (string \"a b\") (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (getLocal \"utils_77\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240))) (\"smartpy_utils.py\" 239)) (verify (eq (pack (type_annotation (rev (getLocal \"utils_77\" (\"smartpy_utils.py\" 241)) (\"smartpy_utils.py\" 241)) (unknown 137) (\"utils.py\" 47)) (\"utils.py\" 47)) (pack (type_annotation (list (\"utils.py\" 47) (literal (string \"a\") (\"utils.py\" 47)) (literal (string \"b\") (\"utils.py\" 47))) (unknown 137) (\"utils.py\" 47)) (\"utils.py\" 47)) (\"utils.py\" 47)) (\"utils.py\" 47)) (defineLocal \"utils_79\" (literal (intOrNat 0) (\"smartpy_utils.py\" 233)) True (\"smartpy_utils.py\" 233)) (defineLocal \"utils_80\" (list (\"smartpy_utils.py\" 234) ) True (\"smartpy_utils.py\" 234)) (forGroup \"utils_81\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 235)) (size (literal (string \"b,a\") (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_81\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 236)) (literal (string \"b,a\") (\"smartpy_utils.py\" 236)) (\"smartpy_utils.py\" 236)) \"Some\" \"None\" (\"smartpy_utils.py\" 236)) (literal (string \",\") (\"smartpy_utils.py\" 236)) (\"smartpy_utils.py\" 236)) ((set (getLocal \"utils_80\" (\"smartpy_utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_79\" (\"smartpy_utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_81\" (\"smartpy_utils.py\" 235)) (getLocal \"utils_79\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (literal (string \"b,a\") (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (getLocal \"utils_80\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (set (getLocal \"utils_79\" (\"\" -1)) (add (iter \"utils_81\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238))) (\"smartpy_utils.py\" 236))) (\"smartpy_utils.py\" 235)) (ifBlock (gt (size (literal (string \"b,a\") (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) (literal (intOrNat 0) (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) ((set (getLocal \"utils_80\" (\"smartpy_utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_79\" (\"smartpy_utils.py\" 240)) (openVariant (isNat (sub (size (literal (string \"b,a\") (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (getLocal \"utils_79\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (literal (string \"b,a\") (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (getLocal \"utils_80\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240))) (\"smartpy_utils.py\" 239)) (verify (eq (pack (type_annotation (rev (getLocal \"utils_80\" (\"smartpy_utils.py\" 241)) (\"smartpy_utils.py\" 241)) (unknown 140) (\"utils.py\" 48)) (\"utils.py\" 48)) (pack (type_annotation (list (\"utils.py\" 48) (literal (string \"b\") (\"utils.py\" 48)) (literal (string \"a\") (\"utils.py\" 48))) (unknown 140) (\"utils.py\" 48)) (\"utils.py\" 48)) (\"utils.py\" 48)) (\"utils.py\" 48)) (verify (eq (pack (type_annotation (call_lambda (private \"string_split\" (\"smartpy/tests/utils.py\" 18)) (record (\"utils.py\" 49) (separator (literal (string \",,\") (\"utils.py\" 49))) (text (literal (string \"a,b\") (\"utils.py\" 49)))) (\"utils.py\" 49)) (unknown 141) (\"utils.py\" 49)) (\"utils.py\" 49)) (pack (type_annotation (list (\"utils.py\" 49) (literal (string \"a,b\") (\"utils.py\" 49))) (unknown 141) (\"utils.py\" 49)) (\"utils.py\" 49)) (\"utils.py\" 49)) (\"utils.py\" 49)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"a\") (\"smartpy_utils.py\" 196)) (literal (string \"abc\") (\"smartpy_utils.py\" 196))) (literal (bool True) (\"utils.py\" 51)) (\"utils.py\" 51)) (\"utils.py\" 51)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"b\") (\"smartpy_utils.py\" 196)) (literal (string \"abc\") (\"smartpy_utils.py\" 196))) (literal (bool False) (\"utils.py\" 52)) (\"utils.py\" 52)) (\"utils.py\" 52)) (verify (eq (call_lambda (private \"string_starts_with\" (\"smartpy/tests/utils.py\" 22)) (record (\"utils.py\" 53) (prefix (literal (string \"a\") (\"utils.py\" 53))) (text (literal (string \"abc\") (\"utils.py\" 53)))) (\"utils.py\" 53)) (literal (bool True) (\"utils.py\" 53)) (\"utils.py\" 53)) (\"utils.py\" 53)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 137) (literal (string \"abc\") (\"smartpy_utils.py\" 137)) (literal (string \"c\") (\"smartpy_utils.py\" 137))) (literal (bool True) (\"utils.py\" 55)) (\"utils.py\" 55)) (\"utils.py\" 55)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 137) (literal (string \"abc\") (\"smartpy_utils.py\" 137)) (literal (string \"b\") (\"smartpy_utils.py\" 137))) (literal (bool False) (\"utils.py\" 56)) (\"utils.py\" 56)) (\"utils.py\" 56)) (verify (eq (call_lambda (private \"string_ends_with\" (\"smartpy/tests/utils.py\" 26)) (record (\"utils.py\" 57) (postfix (literal (string \"c\") (\"utils.py\" 57))) (text (literal (string \"abc\") (\"utils.py\" 57)))) (\"utils.py\" 57)) (literal (bool True) (\"utils.py\" 57)) (\"utils.py\" 57)) (\"utils.py\" 57)) (defineLocal \"utils_82_hist\" (map (\"smartpy_utils.py\" 83) ) True (\"smartpy_utils.py\" 83)) (forGroup \"utils_83_x\" (list (\"smartpy_utils.py\" 84) (literal (intOrNat 1) (\"smartpy_utils.py\" 84)) (literal (intOrNat 2) (\"smartpy_utils.py\" 84)) (literal (intOrNat 3) (\"smartpy_utils.py\" 84)) (literal (intOrNat 4) (\"smartpy_utils.py\" 84)) (literal (intOrNat 5) (\"smartpy_utils.py\" 84))) ((ifBlock (contains (getLocal \"utils_82_hist\" (\"smartpy_utils.py\" 85)) (iter \"utils_83_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 85)) ((set (getItem (getLocal \"utils_82_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_83_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (add (getItem (getLocal \"utils_82_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_83_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (literal (intOrNat 1) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86))) (\"smartpy_utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_82_hist\" (\"smartpy_utils.py\" 88)) (iter \"utils_83_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 88)) (literal (intOrNat 1) (\"smartpy_utils.py\" 88)) (\"smartpy_utils.py\" 88))))) (\"smartpy_utils.py\" 84)) (defineLocal \"compute_smartpy_utils_90i\" (size (list (\"smartpy_utils.py\" 90) (literal (intOrNat 1) (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 90)) (literal (intOrNat 3) (\"smartpy_utils.py\" 90)) (literal (intOrNat 4) (\"smartpy_utils.py\" 90)) (literal (intOrNat 5) (\"smartpy_utils.py\" 90))) (\"smartpy_utils.py\" 90)) True (\"smartpy_utils.py\" 90)) (defineLocal \"utils_84_result\" (literal (nat 0) (\"smartpy_utils.py\" 91)) True (\"smartpy_utils.py\" 91)) (defineLocal \"utils_85_half\" (truediv (getLocal \"compute_smartpy_utils_90i\" (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 92)) (\"smartpy_utils.py\" 92)) True (\"smartpy_utils.py\" 92)) (defineLocal \"utils_86_use_average\" (eq (mul (getLocal \"utils_85_half\" (\"smartpy_utils.py\" 93)) (literal (intOrNat 2) (\"smartpy_utils.py\" 93)) (\"smartpy_utils.py\" 93)) (getLocal \"compute_smartpy_utils_90i\" (\"smartpy_utils.py\" 90)) (\"smartpy_utils.py\" 93)) True (\"smartpy_utils.py\" 93)) (defineLocal \"utils_87_i\" (literal (intOrNat 0) (\"smartpy_utils.py\" 94)) True (\"smartpy_utils.py\" 94)) (forGroup \"utils_88_x\" (items (getLocal \"utils_82_hist\" (\"smartpy_utils.py\" 95)) (\"smartpy_utils.py\" 95)) ((ifBlock (getLocal \"utils_86_use_average\" (\"smartpy_utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_87_i\" (\"smartpy_utils.py\" 97)) (getLocal \"utils_85_half\" (\"smartpy_utils.py\" 97)) (\"smartpy_utils.py\" 97)) ((set (getLocal \"utils_84_result\" (\"\" -1)) (attr (iter \"utils_88_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 98)) (set (getLocal \"utils_87_i\" (\"\" -1)) (add (getLocal \"utils_87_i\" (\"smartpy_utils.py\" 99)) (attr (iter \"utils_88_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (ifBlock (gt (getLocal \"utils_87_i\" (\"smartpy_utils.py\" 100)) (getLocal \"utils_85_half\" (\"smartpy_utils.py\" 100)) (\"smartpy_utils.py\" 100)) ((set (getLocal \"utils_86_use_average\" (\"\" -1)) (literal (bool False) (\"smartpy_utils.py\" 101)) (\"smartpy_utils.py\" 101))) (\"smartpy_utils.py\" 100))) (\"smartpy_utils.py\" 97)) (elseBlock ((set (getLocal \"utils_84_result\" (\"\" -1)) (add (getLocal \"utils_84_result\" (\"smartpy_utils.py\" 103)) (attr (iter \"utils_88_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 103)) (\"smartpy_utils.py\" 103)) (set (getLocal \"utils_84_result\" (\"\" -1)) (truediv (getLocal \"utils_84_result\" (\"smartpy_utils.py\" 104)) (literal (intOrNat 2) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (set (getLocal \"utils_86_use_average\" (\"\" -1)) (literal (bool False) (\"smartpy_utils.py\" 105)) (\"smartpy_utils.py\" 105)) (set (getLocal \"utils_87_i\" (\"\" -1)) (add (getLocal \"utils_87_i\" (\"smartpy_utils.py\" 106)) (attr (iter \"utils_88_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 106)) (\"smartpy_utils.py\" 106))))) (\"smartpy_utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_87_i\" (\"smartpy_utils.py\" 108)) (getLocal \"utils_85_half\" (\"smartpy_utils.py\" 108)) (\"smartpy_utils.py\" 108)) ((set (getLocal \"utils_84_result\" (\"\" -1)) (attr (iter \"utils_88_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 109)) (set (getLocal \"utils_87_i\" (\"\" -1)) (add (getLocal \"utils_87_i\" (\"smartpy_utils.py\" 110)) (attr (iter \"utils_88_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 110)) (\"smartpy_utils.py\" 110))) (\"smartpy_utils.py\" 108))))) (\"smartpy_utils.py\" 95)) (verify (eq (getLocal \"utils_84_result\" (\"smartpy_utils.py\" 112)) (literal (intOrNat 3) (\"utils.py\" 59)) (\"utils.py\" 59)) (\"utils.py\" 59)) (defineLocal \"utils_89_hist\" (map (\"smartpy_utils.py\" 83) ) True (\"smartpy_utils.py\" 83)) (forGroup \"utils_90_x\" (list (\"smartpy_utils.py\" 84) (literal (intOrNat 1) (\"smartpy_utils.py\" 84)) (literal (intOrNat 2) (\"smartpy_utils.py\" 84)) (literal (intOrNat 2) (\"smartpy_utils.py\" 84)) (literal (intOrNat 3) (\"smartpy_utils.py\" 84))) ((ifBlock (contains (getLocal \"utils_89_hist\" (\"smartpy_utils.py\" 85)) (iter \"utils_90_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 85)) ((set (getItem (getLocal \"utils_89_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_90_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (add (getItem (getLocal \"utils_89_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_90_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (literal (intOrNat 1) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86))) (\"smartpy_utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_89_hist\" (\"smartpy_utils.py\" 88)) (iter \"utils_90_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 88)) (literal (intOrNat 1) (\"smartpy_utils.py\" 88)) (\"smartpy_utils.py\" 88))))) (\"smartpy_utils.py\" 84)) (defineLocal \"compute_smartpy_utils_90\" (size (list (\"smartpy_utils.py\" 90) (literal (intOrNat 1) (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 90)) (literal (intOrNat 3) (\"smartpy_utils.py\" 90))) (\"smartpy_utils.py\" 90)) True (\"smartpy_utils.py\" 90)) (defineLocal \"utils_91_result\" (literal (nat 0) (\"smartpy_utils.py\" 91)) True (\"smartpy_utils.py\" 91)) (defineLocal \"utils_92_half\" (truediv (getLocal \"compute_smartpy_utils_90\" (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 92)) (\"smartpy_utils.py\" 92)) True (\"smartpy_utils.py\" 92)) (defineLocal \"utils_93_use_average\" (eq (mul (getLocal \"utils_92_half\" (\"smartpy_utils.py\" 93)) (literal (intOrNat 2) (\"smartpy_utils.py\" 93)) (\"smartpy_utils.py\" 93)) (getLocal \"compute_smartpy_utils_90\" (\"smartpy_utils.py\" 90)) (\"smartpy_utils.py\" 93)) True (\"smartpy_utils.py\" 93)) (defineLocal \"utils_94_i\" (literal (intOrNat 0) (\"smartpy_utils.py\" 94)) True (\"smartpy_utils.py\" 94)) (forGroup \"utils_95_x\" (items (getLocal \"utils_89_hist\" (\"smartpy_utils.py\" 95)) (\"smartpy_utils.py\" 95)) ((ifBlock (getLocal \"utils_93_use_average\" (\"smartpy_utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_94_i\" (\"smartpy_utils.py\" 97)) (getLocal \"utils_92_half\" (\"smartpy_utils.py\" 97)) (\"smartpy_utils.py\" 97)) ((set (getLocal \"utils_91_result\" (\"\" -1)) (attr (iter \"utils_95_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 98)) (set (getLocal \"utils_94_i\" (\"\" -1)) (add (getLocal \"utils_94_i\" (\"smartpy_utils.py\" 99)) (attr (iter \"utils_95_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (ifBlock (gt (getLocal \"utils_94_i\" (\"smartpy_utils.py\" 100)) (getLocal \"utils_92_half\" (\"smartpy_utils.py\" 100)) (\"smartpy_utils.py\" 100)) ((set (getLocal \"utils_93_use_average\" (\"\" -1)) (literal (bool False) (\"smartpy_utils.py\" 101)) (\"smartpy_utils.py\" 101))) (\"smartpy_utils.py\" 100))) (\"smartpy_utils.py\" 97)) (elseBlock ((set (getLocal \"utils_91_result\" (\"\" -1)) (add (getLocal \"utils_91_result\" (\"smartpy_utils.py\" 103)) (attr (iter \"utils_95_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 103)) (\"smartpy_utils.py\" 103)) (set (getLocal \"utils_91_result\" (\"\" -1)) (truediv (getLocal \"utils_91_result\" (\"smartpy_utils.py\" 104)) (literal (intOrNat 2) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (set (getLocal \"utils_93_use_average\" (\"\" -1)) (literal (bool False) (\"smartpy_utils.py\" 105)) (\"smartpy_utils.py\" 105)) (set (getLocal \"utils_94_i\" (\"\" -1)) (add (getLocal \"utils_94_i\" (\"smartpy_utils.py\" 106)) (attr (iter \"utils_95_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 106)) (\"smartpy_utils.py\" 106))))) (\"smartpy_utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_94_i\" (\"smartpy_utils.py\" 108)) (getLocal \"utils_92_half\" (\"smartpy_utils.py\" 108)) (\"smartpy_utils.py\" 108)) ((set (getLocal \"utils_91_result\" (\"\" -1)) (attr (iter \"utils_95_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 109)) (set (getLocal \"utils_94_i\" (\"\" -1)) (add (getLocal \"utils_94_i\" (\"smartpy_utils.py\" 110)) (attr (iter \"utils_95_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 110)) (\"smartpy_utils.py\" 110))) (\"smartpy_utils.py\" 108))))) (\"smartpy_utils.py\" 95)) (verify (eq (getLocal \"utils_91_result\" (\"smartpy_utils.py\" 112)) (literal (intOrNat 2) (\"utils.py\" 60)) (\"utils.py\" 60)) (\"utils.py\" 60)) (verify (eq (call_lambda (private \"math_median\" (\"smartpy/tests/utils.py\" 34)) (list (\"utils.py\" 61) (literal (intOrNat 1) (\"utils.py\" 61)) (literal (intOrNat 2) (\"utils.py\" 61)) (literal (intOrNat 2) (\"utils.py\" 61)) (literal (intOrNat 5) (\"utils.py\" 61))) (\"utils.py\" 61)) (literal (intOrNat 2) (\"utils.py\" 61)) (\"utils.py\" 61)) (\"utils.py\" 61)) (verify (literal (bool True) (\"smartpy_utils.py\" 126)) (literal (string \"(number) must be lower than 64\") (\"smartpy_utils.py\" 126)) (\"smartpy_utils.py\" 126)) (verify (eq (openVariant (slice (literal (intOrNat 2) (\"smartpy_utils.py\" 131)) (openVariant (isNat (sub (size (pack (literal (intOrNat 54) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 131)) (literal (intOrNat 2) (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) \"Some\" \"None\" (\"smartpy_utils.py\" 131)) (pack (literal (intOrNat 54) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 131)) \"Some\" (literal (string \"Could not encode nat to bytes.\") (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) (literal (bytes \"0x36\") (\"utils.py\" 63)) (\"utils.py\" 63)) (\"utils.py\" 63)) (verify (eq (openVariant (slice (literal (intOrNat 6) (\"smartpy_utils.py\" 122)) (openVariant (isNat (sub (size (pack (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"smartpy_utils.py\" 117)) (\"smartpy_utils.py\" 117)) (\"smartpy_utils.py\" 122)) (literal (intOrNat 6) (\"smartpy_utils.py\" 122)) (\"smartpy_utils.py\" 122)) (\"smartpy_utils.py\" 122)) \"Some\" \"None\" (\"smartpy_utils.py\" 122)) (pack (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"smartpy_utils.py\" 117)) (\"smartpy_utils.py\" 117)) (\"smartpy_utils.py\" 122)) \"Some\" (literal (string \"Could not encode string to bytes.\") (\"smartpy_utils.py\" 122)) (\"smartpy_utils.py\" 122)) (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 64)) (\"utils.py\" 64)) (\"utils.py\" 64)) (verify (lt (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 65)) (\"smartpy_utils.py\" 267)) (literal (intOrNat 64) (\"smartpy_utils.py\" 126)) (\"smartpy_utils.py\" 126)) (literal (string \"(number) must be lower than 64\") (\"smartpy_utils.py\" 126)) (\"smartpy_utils.py\" 126)) (defineLocal \"lengthBytes\" (openVariant (slice (literal (intOrNat 2) (\"smartpy_utils.py\" 131)) (openVariant (isNat (sub (size (pack (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 65)) (\"smartpy_utils.py\" 267)) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 131)) (literal (intOrNat 2) (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) \"Some\" \"None\" (\"smartpy_utils.py\" 131)) (pack (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 65)) (\"smartpy_utils.py\" 267)) (\"smartpy_utils.py\" 127)) (\"smartpy_utils.py\" 131)) \"Some\" (literal (string \"Could not encode nat to bytes.\") (\"smartpy_utils.py\" 131)) (\"smartpy_utils.py\" 131)) True (\"smartpy_utils.py\" 267)) (whileBlock (lt (size (getLocal \"lengthBytes\" (\"smartpy_utils.py\" 268)) (\"smartpy_utils.py\" 268)) (literal (intOrNat 4) (\"smartpy_utils.py\" 268)) (\"smartpy_utils.py\" 268)) ((set (getLocal \"lengthBytes\" (\"\" -1)) (add (literal (bytes \"0x00\") (\"smartpy_utils.py\" 269)) (getLocal \"lengthBytes\" (\"smartpy_utils.py\" 269)) (\"smartpy_utils.py\" 269)) (\"smartpy_utils.py\" 269))) (\"smartpy_utils.py\" 268)) (verify (eq (openVariant (unpack (concat (list (\"smartpy_utils.py\" 275) (literal (bytes \"0x05\") (\"smartpy_utils.py\" 275)) (literal (bytes \"0x01\") (\"smartpy_utils.py\" 275)) (getLocal \"lengthBytes\" (\"smartpy_utils.py\" 275)) (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 65))) (\"smartpy_utils.py\" 275)) \"string\" (\"smartpy_utils.py\" 276)) \"Some\" (literal (string \"Could not decode bytes to string\") (\"smartpy_utils.py\" 276)) (\"smartpy_utils.py\" 276)) (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"utils.py\" 65)) (\"utils.py\" 65)) (\"utils.py\" 65)))))\nflags ()\nprivates ((int_of_string (lambda 0 None False \"\" (\"\" -1) ((defineLocal \"utils_48\" (lambdaParams 0 \"\" (\"\" -1) (unknown 105)) True (\"smartpy_utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (lambdaParams 0 \"\" (\"\" -1) (unknown 105))) ((set (getLocal \"utils_48\" (\"\" -1)) (openVariant (slice (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (openVariant (isNat (sub (size (lambdaParams 0 \"\" (\"\" -1) (unknown 105)) (\"smartpy_utils.py\" 288)) (literal (intOrNat 1) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) \"Some\" \"None\" (\"smartpy_utils.py\" 288)) (lambdaParams 0 \"\" (\"\" -1) (unknown 105)) (\"smartpy_utils.py\" 288)) \"Some\" (literal (string \"\") (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288)) (\"smartpy_utils.py\" 288))) (\"smartpy_utils.py\" 287)) (defineLocal \"utils_49\" (literal (intOrNat 0) (\"smartpy_utils.py\" 290)) True (\"smartpy_utils.py\" 290)) (forGroup \"utils_50\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 291)) (size (getLocal \"utils_48\" (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 291)) (\"smartpy_utils.py\" 291)) ((set (getLocal \"utils_49\" (\"\" -1)) (add (mul (literal (intOrNat 10) (\"smartpy_utils.py\" 292)) (getLocal \"utils_49\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (getItem (map (\"smartpy_utils.py\" 283) ((literal (string \"0\") (\"\" -1)) (literal (intOrNat 0) (\"\" -1))) ((literal (string \"1\") (\"\" -1)) (literal (intOrNat 1) (\"\" -1))) ((literal (string \"2\") (\"\" -1)) (literal (intOrNat 2) (\"\" -1))) ((literal (string \"3\") (\"\" -1)) (literal (intOrNat 3) (\"\" -1))) ((literal (string \"4\") (\"\" -1)) (literal (intOrNat 4) (\"\" -1))) ((literal (string \"5\") (\"\" -1)) (literal (intOrNat 5) (\"\" -1))) ((literal (string \"6\") (\"\" -1)) (literal (intOrNat 6) (\"\" -1))) ((literal (string \"7\") (\"\" -1)) (literal (intOrNat 7) (\"\" -1))) ((literal (string \"8\") (\"\" -1)) (literal (intOrNat 8) (\"\" -1))) ((literal (string \"9\") (\"\" -1)) (literal (intOrNat 9) (\"\" -1)))) (openVariant (slice (iter \"utils_50\" (\"smartpy_utils.py\" 291)) (literal (intOrNat 1) (\"smartpy_utils.py\" 292)) (getLocal \"utils_48\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) \"Some\" \"None\" (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292)) (\"smartpy_utils.py\" 292))) (\"smartpy_utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (literal (string \"-\") (\"smartpy_utils.py\" 196)) (lambdaParams 0 \"\" (\"\" -1) (unknown 105))) ((set (getLocal \"utils_49\" (\"\" -1)) (mul (getLocal \"utils_49\" (\"smartpy_utils.py\" 295)) (literal (int -1) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295)) (\"smartpy_utils.py\" 295))) (\"smartpy_utils.py\" 294)) (result (getLocal \"utils_49\" (\"smartpy_utils.py\" 297)) (\"utils.py\" 15))))) (math_median (lambda 1 None False \"\" (\"\" -1) ((defineLocal \"utils_51_hist\" (map (\"smartpy_utils.py\" 83) ) True (\"smartpy_utils.py\" 83)) (forGroup \"utils_52_x\" (lambdaParams 1 \"\" (\"\" -1) (unknown 108)) ((ifBlock (contains (getLocal \"utils_51_hist\" (\"smartpy_utils.py\" 85)) (iter \"utils_52_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 85)) ((set (getItem (getLocal \"utils_51_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_52_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (add (getItem (getLocal \"utils_51_hist\" (\"smartpy_utils.py\" 86)) (iter \"utils_52_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 86)) (literal (intOrNat 1) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86)) (\"smartpy_utils.py\" 86))) (\"smartpy_utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_51_hist\" (\"smartpy_utils.py\" 88)) (iter \"utils_52_x\" (\"smartpy_utils.py\" 84)) (\"smartpy_utils.py\" 88)) (literal (intOrNat 1) (\"smartpy_utils.py\" 88)) (\"smartpy_utils.py\" 88))))) (\"smartpy_utils.py\" 84)) (defineLocal \"compute_smartpy_utils_90\" (size (lambdaParams 1 \"\" (\"\" -1) (unknown 108)) (\"smartpy_utils.py\" 90)) True (\"smartpy_utils.py\" 90)) (defineLocal \"utils_53_result\" (literal (nat 0) (\"smartpy_utils.py\" 91)) True (\"smartpy_utils.py\" 91)) (defineLocal \"utils_54_half\" (truediv (getLocal \"compute_smartpy_utils_90\" (\"smartpy_utils.py\" 90)) (literal (intOrNat 2) (\"smartpy_utils.py\" 92)) (\"smartpy_utils.py\" 92)) True (\"smartpy_utils.py\" 92)) (defineLocal \"utils_55_use_average\" (eq (mul (getLocal \"utils_54_half\" (\"smartpy_utils.py\" 93)) (literal (intOrNat 2) (\"smartpy_utils.py\" 93)) (\"smartpy_utils.py\" 93)) (getLocal \"compute_smartpy_utils_90\" (\"smartpy_utils.py\" 90)) (\"smartpy_utils.py\" 93)) True (\"smartpy_utils.py\" 93)) (defineLocal \"utils_56_i\" (literal (intOrNat 0) (\"smartpy_utils.py\" 94)) True (\"smartpy_utils.py\" 94)) (forGroup \"utils_57_x\" (items (getLocal \"utils_51_hist\" (\"smartpy_utils.py\" 95)) (\"smartpy_utils.py\" 95)) ((ifBlock (getLocal \"utils_55_use_average\" (\"smartpy_utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_56_i\" (\"smartpy_utils.py\" 97)) (getLocal \"utils_54_half\" (\"smartpy_utils.py\" 97)) (\"smartpy_utils.py\" 97)) ((set (getLocal \"utils_53_result\" (\"\" -1)) (attr (iter \"utils_57_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 98)) (set (getLocal \"utils_56_i\" (\"\" -1)) (add (getLocal \"utils_56_i\" (\"smartpy_utils.py\" 99)) (attr (iter \"utils_57_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 99)) (ifBlock (gt (getLocal \"utils_56_i\" (\"smartpy_utils.py\" 100)) (getLocal \"utils_54_half\" (\"smartpy_utils.py\" 100)) (\"smartpy_utils.py\" 100)) ((set (getLocal \"utils_55_use_average\" (\"\" -1)) (literal (bool False) (\"smartpy_utils.py\" 101)) (\"smartpy_utils.py\" 101))) (\"smartpy_utils.py\" 100))) (\"smartpy_utils.py\" 97)) (elseBlock ((set (getLocal \"utils_53_result\" (\"\" -1)) (add (getLocal \"utils_53_result\" (\"smartpy_utils.py\" 103)) (attr (iter \"utils_57_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 103)) (\"smartpy_utils.py\" 103)) (set (getLocal \"utils_53_result\" (\"\" -1)) (truediv (getLocal \"utils_53_result\" (\"smartpy_utils.py\" 104)) (literal (intOrNat 2) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (\"smartpy_utils.py\" 104)) (set (getLocal \"utils_55_use_average\" (\"\" -1)) (literal (bool False) (\"smartpy_utils.py\" 105)) (\"smartpy_utils.py\" 105)) (set (getLocal \"utils_56_i\" (\"\" -1)) (add (getLocal \"utils_56_i\" (\"smartpy_utils.py\" 106)) (attr (iter \"utils_57_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 106)) (\"smartpy_utils.py\" 106))))) (\"smartpy_utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_56_i\" (\"smartpy_utils.py\" 108)) (getLocal \"utils_54_half\" (\"smartpy_utils.py\" 108)) (\"smartpy_utils.py\" 108)) ((set (getLocal \"utils_53_result\" (\"\" -1)) (attr (iter \"utils_57_x\" (\"smartpy_utils.py\" 95)) \"key\" (\"smartpy_utils.py\" 98)) (\"smartpy_utils.py\" 109)) (set (getLocal \"utils_56_i\" (\"\" -1)) (add (getLocal \"utils_56_i\" (\"smartpy_utils.py\" 110)) (attr (iter \"utils_57_x\" (\"smartpy_utils.py\" 95)) \"value\" (\"smartpy_utils.py\" 99)) (\"smartpy_utils.py\" 110)) (\"smartpy_utils.py\" 110))) (\"smartpy_utils.py\" 108))))) (\"smartpy_utils.py\" 95)) (result (getLocal \"utils_53_result\" (\"smartpy_utils.py\" 112)) (\"utils.py\" 35))))) (math_pow (lambda 2 None False \"\" (\"\" -1) ((result (call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") (\"smartpy_utils.py\" 9) (attr (lambdaParams 2 \"\" (\"\" -1) (unknown 115)) \"exponent\" (\"utils.py\" 31)) (attr (lambdaParams 2 \"\" (\"\" -1) (unknown 115)) \"base\" (\"utils.py\" 31)) (literal (intOrNat 1) (\"smartpy_utils.py\" 9))) (\"utils.py\" 31))))) (string_ends_with (lambda 3 None False \"\" (\"\" -1) ((result (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 137) (attr (lambdaParams 3 \"\" (\"\" -1) (unknown 116)) \"text\" (\"utils.py\" 27)) (attr (lambdaParams 3 \"\" (\"\" -1) (unknown 116)) \"postfix\" (\"utils.py\" 27))) (\"utils.py\" 27))))) (string_of_int (lambda 4 None False \"\" (\"\" -1) ((defineLocal \"utils_58\" (abs (lambdaParams 4 \"\" (\"\" -1) (unknown 117)) (\"smartpy_utils.py\" 248)) True (\"smartpy_utils.py\" 248)) (defineLocal \"utils_59\" (list (\"smartpy_utils.py\" 249) ) True (\"smartpy_utils.py\" 249)) (ifBlock (eq (getLocal \"utils_58\" (\"smartpy_utils.py\" 251)) (literal (intOrNat 0) (\"smartpy_utils.py\" 251)) (\"smartpy_utils.py\" 251)) ((set (getLocal \"utils_59\" (\"smartpy_utils.py\" 252)) (cons (literal (string \"0\") (\"smartpy_utils.py\" 252)) (getLocal \"utils_59\" (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252)) (\"smartpy_utils.py\" 252))) (\"smartpy_utils.py\" 251)) (whileBlock (gt (getLocal \"utils_58\" (\"smartpy_utils.py\" 253)) (literal (intOrNat 0) (\"smartpy_utils.py\" 253)) (\"smartpy_utils.py\" 253)) ((set (getLocal \"utils_59\" (\"smartpy_utils.py\" 254)) (cons (getItem (map (\"smartpy_utils.py\" 246) ((literal (intOrNat 0) (\"\" -1)) (literal (string \"0\") (\"\" -1))) ((literal (intOrNat 1) (\"\" -1)) (literal (string \"1\") (\"\" -1))) ((literal (intOrNat 2) (\"\" -1)) (literal (string \"2\") (\"\" -1))) ((literal (intOrNat 3) (\"\" -1)) (literal (string \"3\") (\"\" -1))) ((literal (intOrNat 4) (\"\" -1)) (literal (string \"4\") (\"\" -1))) ((literal (intOrNat 5) (\"\" -1)) (literal (string \"5\") (\"\" -1))) ((literal (intOrNat 6) (\"\" -1)) (literal (string \"6\") (\"\" -1))) ((literal (intOrNat 7) (\"\" -1)) (literal (string \"7\") (\"\" -1))) ((literal (intOrNat 8) (\"\" -1)) (literal (string \"8\") (\"\" -1))) ((literal (intOrNat 9) (\"\" -1)) (literal (string \"9\") (\"\" -1)))) (mod (getLocal \"utils_58\" (\"smartpy_utils.py\" 254)) (literal (intOrNat 10) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (getLocal \"utils_59\" (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (\"smartpy_utils.py\" 254)) (set (getLocal \"utils_58\" (\"\" -1)) (floordiv (getLocal \"utils_58\" (\"smartpy_utils.py\" 255)) (literal (intOrNat 10) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255)) (\"smartpy_utils.py\" 255))) (\"smartpy_utils.py\" 253)) (defineLocal \"utils_60\" (concat (getLocal \"utils_59\" (\"smartpy_utils.py\" 257)) (\"smartpy_utils.py\" 257)) True (\"smartpy_utils.py\" 257)) (ifBlock (lt (lambdaParams 4 \"\" (\"\" -1) (unknown 117)) (literal (intOrNat 0) (\"smartpy_utils.py\" 247)) (\"smartpy_utils.py\" 247)) ((set (getLocal \"utils_60\" (\"\" -1)) (add (literal (string \"-\") (\"smartpy_utils.py\" 259)) (getLocal \"utils_60\" (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259)) (\"smartpy_utils.py\" 259))) (\"smartpy_utils.py\" 258)) (result (getLocal \"utils_60\" (\"smartpy_utils.py\" 261)) (\"utils.py\" 11))))) (string_split (lambda 5 None False \"\" (\"\" -1) ((defineLocal \"utils_61\" (literal (intOrNat 0) (\"smartpy_utils.py\" 233)) True (\"smartpy_utils.py\" 233)) (defineLocal \"utils_62\" (list (\"smartpy_utils.py\" 234) ) True (\"smartpy_utils.py\" 234)) (forGroup \"utils_63\" (range (literal (intOrNat 0) (\"smartpy_utils.py\" 235)) (size (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 121)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 235)) (\"smartpy_utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_63\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 236)) (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 121)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 236)) \"Some\" \"None\" (\"smartpy_utils.py\" 236)) (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 121)) \"separator\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 236)) ((set (getLocal \"utils_62\" (\"smartpy_utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_61\" (\"smartpy_utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_63\" (\"smartpy_utils.py\" 235)) (getLocal \"utils_61\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 121)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 237)) \"Some\" \"None\" (\"smartpy_utils.py\" 237)) (getLocal \"utils_62\" (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (\"smartpy_utils.py\" 237)) (set (getLocal \"utils_61\" (\"\" -1)) (add (iter \"utils_63\" (\"smartpy_utils.py\" 235)) (literal (intOrNat 1) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238)) (\"smartpy_utils.py\" 238))) (\"smartpy_utils.py\" 236))) (\"smartpy_utils.py\" 235)) (ifBlock (gt (size (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 121)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 239)) (literal (intOrNat 0) (\"smartpy_utils.py\" 239)) (\"smartpy_utils.py\" 239)) ((set (getLocal \"utils_62\" (\"smartpy_utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_61\" (\"smartpy_utils.py\" 240)) (openVariant (isNat (sub (size (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 121)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 240)) (getLocal \"utils_61\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 121)) \"text\" (\"utils.py\" 19)) (\"smartpy_utils.py\" 240)) \"Some\" \"None\" (\"smartpy_utils.py\" 240)) (getLocal \"utils_62\" (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240)) (\"smartpy_utils.py\" 240))) (\"smartpy_utils.py\" 239)) (result (rev (getLocal \"utils_62\" (\"smartpy_utils.py\" 241)) (\"smartpy_utils.py\" 241)) (\"utils.py\" 19))))) (string_starts_with (lambda 6 None False \"\" (\"\" -1) ((result (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"smartpy_utils.py\" 196) (attr (lambdaParams 6 \"\" (\"\" -1) (unknown 124)) \"prefix\" (\"utils.py\" 23)) (attr (lambdaParams 6 \"\" (\"\" -1) (unknown 124)) \"text\" (\"utils.py\" 23))) (\"utils.py\" 23))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "(static_id 0 (\"smartpy/tests/utils.py\" 145))",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 },
 {
  "shortname": "UtilsTester2_compilation",
  "longname": "UtilsTester2_compilation",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id (static_id 1 (\"smartpy/tests/utils.py\" 146)) \nstorage ()\nstorage_type ((unknown 2))\nmessages ((test True None None False (\"smartpy/tests/utils.py\" 98) ((defineLocal \"utils_64\" (literal (intOrNat 1) (\"utils.py\" 248)) True (\"utils.py\" 248)) (defineLocal \"utils_65\" (list (\"utils.py\" 249) ) True (\"utils.py\" 249)) (ifBlock (eq (getLocal \"utils_64\" (\"utils.py\" 251)) (literal (intOrNat 0) (\"utils.py\" 251)) (\"utils.py\" 251)) ((set (getLocal \"utils_65\" (\"utils.py\" 252)) (cons (literal (string \"0\") (\"utils.py\" 252)) (getLocal \"utils_65\" (\"utils.py\" 252)) (\"utils.py\" 252)) (\"utils.py\" 252))) (\"utils.py\" 251)) (whileBlock (gt (getLocal \"utils_64\" (\"utils.py\" 253)) (literal (intOrNat 0) (\"utils.py\" 253)) (\"utils.py\" 253)) ((set (getLocal \"utils_65\" (\"utils.py\" 254)) (cons (getItem (map (\"utils.py\" 246) ((literal (intOrNat 0) (\"\" -1)) (literal (string \"0\") (\"\" -1))) ((literal (intOrNat 1) (\"\" -1)) (literal (string \"1\") (\"\" -1))) ((literal (intOrNat 2) (\"\" -1)) (literal (string \"2\") (\"\" -1))) ((literal (intOrNat 3) (\"\" -1)) (literal (string \"3\") (\"\" -1))) ((literal (intOrNat 4) (\"\" -1)) (literal (string \"4\") (\"\" -1))) ((literal (intOrNat 5) (\"\" -1)) (literal (string \"5\") (\"\" -1))) ((literal (intOrNat 6) (\"\" -1)) (literal (string \"6\") (\"\" -1))) ((literal (intOrNat 7) (\"\" -1)) (literal (string \"7\") (\"\" -1))) ((literal (intOrNat 8) (\"\" -1)) (literal (string \"8\") (\"\" -1))) ((literal (intOrNat 9) (\"\" -1)) (literal (string \"9\") (\"\" -1)))) (mod (getLocal \"utils_64\" (\"utils.py\" 254)) (literal (intOrNat 10) (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (getLocal \"utils_65\" (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (set (getLocal \"utils_64\" (\"\" -1)) (floordiv (getLocal \"utils_64\" (\"utils.py\" 255)) (literal (intOrNat 10) (\"utils.py\" 255)) (\"utils.py\" 255)) (\"utils.py\" 255))) (\"utils.py\" 253)) (defineLocal \"utils_66\" (concat (getLocal \"utils_65\" (\"utils.py\" 257)) (\"utils.py\" 257)) True (\"utils.py\" 257)) (ifBlock (literal (bool True) (\"utils.py\" 258)) ((set (getLocal \"utils_66\" (\"\" -1)) (add (literal (string \"-\") (\"utils.py\" 259)) (getLocal \"utils_66\" (\"utils.py\" 259)) (\"utils.py\" 259)) (\"utils.py\" 259))) (\"utils.py\" 258)) (verify (eq (getLocal \"utils_66\" (\"utils.py\" 261)) (literal (string \"-1\") (\"utils.py\" 99)) (\"utils.py\" 99)) (\"utils.py\" 99)) (defineLocal \"utils_67\" (literal (intOrNat 1) (\"utils.py\" 248)) True (\"utils.py\" 248)) (defineLocal \"utils_68\" (list (\"utils.py\" 249) ) True (\"utils.py\" 249)) (ifBlock (eq (getLocal \"utils_67\" (\"utils.py\" 251)) (literal (intOrNat 0) (\"utils.py\" 251)) (\"utils.py\" 251)) ((set (getLocal \"utils_68\" (\"utils.py\" 252)) (cons (literal (string \"0\") (\"utils.py\" 252)) (getLocal \"utils_68\" (\"utils.py\" 252)) (\"utils.py\" 252)) (\"utils.py\" 252))) (\"utils.py\" 251)) (whileBlock (gt (getLocal \"utils_67\" (\"utils.py\" 253)) (literal (intOrNat 0) (\"utils.py\" 253)) (\"utils.py\" 253)) ((set (getLocal \"utils_68\" (\"utils.py\" 254)) (cons (getItem (map (\"utils.py\" 246) ((literal (intOrNat 0) (\"\" -1)) (literal (string \"0\") (\"\" -1))) ((literal (intOrNat 1) (\"\" -1)) (literal (string \"1\") (\"\" -1))) ((literal (intOrNat 2) (\"\" -1)) (literal (string \"2\") (\"\" -1))) ((literal (intOrNat 3) (\"\" -1)) (literal (string \"3\") (\"\" -1))) ((literal (intOrNat 4) (\"\" -1)) (literal (string \"4\") (\"\" -1))) ((literal (intOrNat 5) (\"\" -1)) (literal (string \"5\") (\"\" -1))) ((literal (intOrNat 6) (\"\" -1)) (literal (string \"6\") (\"\" -1))) ((literal (intOrNat 7) (\"\" -1)) (literal (string \"7\") (\"\" -1))) ((literal (intOrNat 8) (\"\" -1)) (literal (string \"8\") (\"\" -1))) ((literal (intOrNat 9) (\"\" -1)) (literal (string \"9\") (\"\" -1)))) (mod (getLocal \"utils_67\" (\"utils.py\" 254)) (literal (intOrNat 10) (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (getLocal \"utils_68\" (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (set (getLocal \"utils_67\" (\"\" -1)) (floordiv (getLocal \"utils_67\" (\"utils.py\" 255)) (literal (intOrNat 10) (\"utils.py\" 255)) (\"utils.py\" 255)) (\"utils.py\" 255))) (\"utils.py\" 253)) (defineLocal \"utils_69\" (concat (getLocal \"utils_68\" (\"utils.py\" 257)) (\"utils.py\" 257)) True (\"utils.py\" 257)) (ifBlock (literal (bool False) (\"utils.py\" 258)) ((set (getLocal \"utils_69\" (\"\" -1)) (add (literal (string \"-\") (\"utils.py\" 259)) (getLocal \"utils_69\" (\"utils.py\" 259)) (\"utils.py\" 259)) (\"utils.py\" 259))) (\"utils.py\" 258)) (verify (eq (getLocal \"utils_69\" (\"utils.py\" 261)) (literal (string \"1\") (\"utils.py\" 100)) (\"utils.py\" 100)) (\"utils.py\" 100)) (verify (eq (call_lambda (private \"string_of_int\" (\"smartpy/tests/utils.py\" 70)) (literal (intOrNat 2) (\"utils.py\" 101)) (\"utils.py\" 101)) (literal (string \"2\") (\"utils.py\" 101)) (\"utils.py\" 101)) (\"utils.py\" 101)) (defineLocal \"utils_70\" (literal (string \"1\") (\"utils.py\" 286)) True (\"utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (literal (string \"1\") (\"utils.py\" 196))) ((set (getLocal \"utils_70\" (\"\" -1)) (openVariant (slice (literal (intOrNat 1) (\"utils.py\" 288)) (openVariant (isNat (sub (size (literal (string \"1\") (\"utils.py\" 288)) (\"utils.py\" 288)) (literal (intOrNat 1) (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" \"None\" (\"utils.py\" 288)) (literal (string \"1\") (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" (literal (string \"\") (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288))) (\"utils.py\" 287)) (defineLocal \"utils_71\" (literal (intOrNat 0) (\"utils.py\" 290)) True (\"utils.py\" 290)) (forGroup \"utils_72\" (range (literal (intOrNat 0) (\"utils.py\" 291)) (size (getLocal \"utils_70\" (\"utils.py\" 291)) (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 291)) (\"utils.py\" 291)) ((set (getLocal \"utils_71\" (\"\" -1)) (add (mul (literal (intOrNat 10) (\"utils.py\" 292)) (getLocal \"utils_71\" (\"utils.py\" 292)) (\"utils.py\" 292)) (getItem (map (\"utils.py\" 283) ((literal (string \"0\") (\"\" -1)) (literal (intOrNat 0) (\"\" -1))) ((literal (string \"1\") (\"\" -1)) (literal (intOrNat 1) (\"\" -1))) ((literal (string \"2\") (\"\" -1)) (literal (intOrNat 2) (\"\" -1))) ((literal (string \"3\") (\"\" -1)) (literal (intOrNat 3) (\"\" -1))) ((literal (string \"4\") (\"\" -1)) (literal (intOrNat 4) (\"\" -1))) ((literal (string \"5\") (\"\" -1)) (literal (intOrNat 5) (\"\" -1))) ((literal (string \"6\") (\"\" -1)) (literal (intOrNat 6) (\"\" -1))) ((literal (string \"7\") (\"\" -1)) (literal (intOrNat 7) (\"\" -1))) ((literal (string \"8\") (\"\" -1)) (literal (intOrNat 8) (\"\" -1))) ((literal (string \"9\") (\"\" -1)) (literal (intOrNat 9) (\"\" -1)))) (openVariant (slice (iter \"utils_72\" (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 292)) (getLocal \"utils_70\" (\"utils.py\" 292)) (\"utils.py\" 292)) \"Some\" \"None\" (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292))) (\"utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (literal (string \"1\") (\"utils.py\" 196))) ((set (getLocal \"utils_71\" (\"\" -1)) (mul (getLocal \"utils_71\" (\"utils.py\" 295)) (literal (int -1) (\"utils.py\" 295)) (\"utils.py\" 295)) (\"utils.py\" 295))) (\"utils.py\" 294)) (verify (eq (getLocal \"utils_71\" (\"utils.py\" 297)) (literal (intOrNat 1) (\"utils.py\" 103)) (\"utils.py\" 103)) (\"utils.py\" 103)) (defineLocal \"utils_73\" (literal (string \"-1\") (\"utils.py\" 286)) True (\"utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (literal (string \"-1\") (\"utils.py\" 196))) ((set (getLocal \"utils_73\" (\"\" -1)) (openVariant (slice (literal (intOrNat 1) (\"utils.py\" 288)) (openVariant (isNat (sub (size (literal (string \"-1\") (\"utils.py\" 288)) (\"utils.py\" 288)) (literal (intOrNat 1) (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" \"None\" (\"utils.py\" 288)) (literal (string \"-1\") (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" (literal (string \"\") (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288))) (\"utils.py\" 287)) (defineLocal \"utils_74\" (literal (intOrNat 0) (\"utils.py\" 290)) True (\"utils.py\" 290)) (forGroup \"utils_75\" (range (literal (intOrNat 0) (\"utils.py\" 291)) (size (getLocal \"utils_73\" (\"utils.py\" 291)) (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 291)) (\"utils.py\" 291)) ((set (getLocal \"utils_74\" (\"\" -1)) (add (mul (literal (intOrNat 10) (\"utils.py\" 292)) (getLocal \"utils_74\" (\"utils.py\" 292)) (\"utils.py\" 292)) (getItem (map (\"utils.py\" 283) ((literal (string \"0\") (\"\" -1)) (literal (intOrNat 0) (\"\" -1))) ((literal (string \"1\") (\"\" -1)) (literal (intOrNat 1) (\"\" -1))) ((literal (string \"2\") (\"\" -1)) (literal (intOrNat 2) (\"\" -1))) ((literal (string \"3\") (\"\" -1)) (literal (intOrNat 3) (\"\" -1))) ((literal (string \"4\") (\"\" -1)) (literal (intOrNat 4) (\"\" -1))) ((literal (string \"5\") (\"\" -1)) (literal (intOrNat 5) (\"\" -1))) ((literal (string \"6\") (\"\" -1)) (literal (intOrNat 6) (\"\" -1))) ((literal (string \"7\") (\"\" -1)) (literal (intOrNat 7) (\"\" -1))) ((literal (string \"8\") (\"\" -1)) (literal (intOrNat 8) (\"\" -1))) ((literal (string \"9\") (\"\" -1)) (literal (intOrNat 9) (\"\" -1)))) (openVariant (slice (iter \"utils_75\" (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 292)) (getLocal \"utils_73\" (\"utils.py\" 292)) (\"utils.py\" 292)) \"Some\" \"None\" (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292))) (\"utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (literal (string \"-1\") (\"utils.py\" 196))) ((set (getLocal \"utils_74\" (\"\" -1)) (mul (getLocal \"utils_74\" (\"utils.py\" 295)) (literal (int -1) (\"utils.py\" 295)) (\"utils.py\" 295)) (\"utils.py\" 295))) (\"utils.py\" 294)) (verify (eq (getLocal \"utils_74\" (\"utils.py\" 297)) (literal (int -1) (\"utils.py\" 104)) (\"utils.py\" 104)) (\"utils.py\" 104)) (verify (eq (call_lambda (private \"int_of_string\" (\"smartpy/tests/utils.py\" 74)) (literal (string \"2\") (\"utils.py\" 105)) (\"utils.py\" 105)) (literal (intOrNat 2) (\"utils.py\" 105)) (\"utils.py\" 105)) (\"utils.py\" 105)) (defineLocal \"utils_76\" (literal (intOrNat 0) (\"utils.py\" 233)) True (\"utils.py\" 233)) (defineLocal \"utils_77\" (list (\"utils.py\" 234) ) True (\"utils.py\" 234)) (forGroup \"utils_78\" (range (literal (intOrNat 0) (\"utils.py\" 235)) (size (literal (string \"a b\") (\"utils.py\" 235)) (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 235)) (\"utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_78\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 236)) (literal (string \"a b\") (\"utils.py\" 236)) (\"utils.py\" 236)) \"Some\" \"None\" (\"utils.py\" 236)) (literal (string \" \") (\"utils.py\" 236)) (\"utils.py\" 236)) ((set (getLocal \"utils_77\" (\"utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_76\" (\"utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_78\" (\"utils.py\" 235)) (getLocal \"utils_76\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (literal (string \"a b\") (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (getLocal \"utils_77\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) (set (getLocal \"utils_76\" (\"\" -1)) (add (iter \"utils_78\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 238)) (\"utils.py\" 238)) (\"utils.py\" 238))) (\"utils.py\" 236))) (\"utils.py\" 235)) (ifBlock (gt (size (literal (string \"a b\") (\"utils.py\" 239)) (\"utils.py\" 239)) (literal (intOrNat 0) (\"utils.py\" 239)) (\"utils.py\" 239)) ((set (getLocal \"utils_77\" (\"utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_76\" (\"utils.py\" 240)) (openVariant (isNat (sub (size (literal (string \"a b\") (\"utils.py\" 240)) (\"utils.py\" 240)) (getLocal \"utils_76\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (literal (string \"a b\") (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (getLocal \"utils_77\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240))) (\"utils.py\" 239)) (verify (eq (pack (type_annotation (rev (getLocal \"utils_77\" (\"utils.py\" 241)) (\"utils.py\" 241)) (unknown 187) (\"utils.py\" 107)) (\"utils.py\" 107)) (pack (type_annotation (list (\"utils.py\" 107) (literal (string \"a\") (\"utils.py\" 107)) (literal (string \"b\") (\"utils.py\" 107))) (unknown 187) (\"utils.py\" 107)) (\"utils.py\" 107)) (\"utils.py\" 107)) (\"utils.py\" 107)) (defineLocal \"utils_79\" (literal (intOrNat 0) (\"utils.py\" 233)) True (\"utils.py\" 233)) (defineLocal \"utils_80\" (list (\"utils.py\" 234) ) True (\"utils.py\" 234)) (forGroup \"utils_81\" (range (literal (intOrNat 0) (\"utils.py\" 235)) (size (literal (string \"b,a\") (\"utils.py\" 235)) (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 235)) (\"utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_81\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 236)) (literal (string \"b,a\") (\"utils.py\" 236)) (\"utils.py\" 236)) \"Some\" \"None\" (\"utils.py\" 236)) (literal (string \",\") (\"utils.py\" 236)) (\"utils.py\" 236)) ((set (getLocal \"utils_80\" (\"utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_79\" (\"utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_81\" (\"utils.py\" 235)) (getLocal \"utils_79\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (literal (string \"b,a\") (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (getLocal \"utils_80\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) (set (getLocal \"utils_79\" (\"\" -1)) (add (iter \"utils_81\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 238)) (\"utils.py\" 238)) (\"utils.py\" 238))) (\"utils.py\" 236))) (\"utils.py\" 235)) (ifBlock (gt (size (literal (string \"b,a\") (\"utils.py\" 239)) (\"utils.py\" 239)) (literal (intOrNat 0) (\"utils.py\" 239)) (\"utils.py\" 239)) ((set (getLocal \"utils_80\" (\"utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_79\" (\"utils.py\" 240)) (openVariant (isNat (sub (size (literal (string \"b,a\") (\"utils.py\" 240)) (\"utils.py\" 240)) (getLocal \"utils_79\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (literal (string \"b,a\") (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (getLocal \"utils_80\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240))) (\"utils.py\" 239)) (verify (eq (pack (type_annotation (rev (getLocal \"utils_80\" (\"utils.py\" 241)) (\"utils.py\" 241)) (unknown 190) (\"utils.py\" 108)) (\"utils.py\" 108)) (pack (type_annotation (list (\"utils.py\" 108) (literal (string \"b\") (\"utils.py\" 108)) (literal (string \"a\") (\"utils.py\" 108))) (unknown 190) (\"utils.py\" 108)) (\"utils.py\" 108)) (\"utils.py\" 108)) (\"utils.py\" 108)) (verify (eq (pack (type_annotation (call_lambda (private \"string_split\" (\"smartpy/tests/utils.py\" 78)) (record (\"utils.py\" 109) (separator (literal (string \",,\") (\"utils.py\" 109))) (text (literal (string \"a,b\") (\"utils.py\" 109)))) (\"utils.py\" 109)) (unknown 191) (\"utils.py\" 109)) (\"utils.py\" 109)) (pack (type_annotation (list (\"utils.py\" 109) (literal (string \"a,b\") (\"utils.py\" 109))) (unknown 191) (\"utils.py\" 109)) (\"utils.py\" 109)) (\"utils.py\" 109)) (\"utils.py\" 109)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"a\") (\"utils.py\" 196)) (literal (string \"abc\") (\"utils.py\" 196))) (literal (bool True) (\"utils.py\" 111)) (\"utils.py\" 111)) (\"utils.py\" 111)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"b\") (\"utils.py\" 196)) (literal (string \"abc\") (\"utils.py\" 196))) (literal (bool False) (\"utils.py\" 112)) (\"utils.py\" 112)) (\"utils.py\" 112)) (verify (eq (call_lambda (private \"string_starts_with\" (\"smartpy/tests/utils.py\" 82)) (record (\"utils.py\" 113) (prefix (literal (string \"a\") (\"utils.py\" 113))) (text (literal (string \"abc\") (\"utils.py\" 113)))) (\"utils.py\" 113)) (literal (bool True) (\"utils.py\" 113)) (\"utils.py\" 113)) (\"utils.py\" 113)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 137) (literal (string \"abc\") (\"utils.py\" 137)) (literal (string \"c\") (\"utils.py\" 137))) (literal (bool True) (\"utils.py\" 115)) (\"utils.py\" 115)) (\"utils.py\" 115)) (verify (eq (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 137) (literal (string \"abc\") (\"utils.py\" 137)) (literal (string \"b\") (\"utils.py\" 137))) (literal (bool False) (\"utils.py\" 116)) (\"utils.py\" 116)) (\"utils.py\" 116)) (verify (eq (call_lambda (private \"string_ends_with\" (\"smartpy/tests/utils.py\" 86)) (record (\"utils.py\" 117) (postfix (literal (string \"c\") (\"utils.py\" 117))) (text (literal (string \"abc\") (\"utils.py\" 117)))) (\"utils.py\" 117)) (literal (bool True) (\"utils.py\" 117)) (\"utils.py\" 117)) (\"utils.py\" 117)) (defineLocal \"utils_82_hist\" (map (\"utils.py\" 83) ) True (\"utils.py\" 83)) (forGroup \"utils_83_x\" (list (\"utils.py\" 84) (literal (intOrNat 1) (\"utils.py\" 84)) (literal (intOrNat 2) (\"utils.py\" 84)) (literal (intOrNat 3) (\"utils.py\" 84)) (literal (intOrNat 4) (\"utils.py\" 84)) (literal (intOrNat 5) (\"utils.py\" 84))) ((ifBlock (contains (getLocal \"utils_82_hist\" (\"utils.py\" 85)) (iter \"utils_83_x\" (\"utils.py\" 84)) (\"utils.py\" 85)) ((set (getItem (getLocal \"utils_82_hist\" (\"utils.py\" 86)) (iter \"utils_83_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (add (getItem (getLocal \"utils_82_hist\" (\"utils.py\" 86)) (iter \"utils_83_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (literal (intOrNat 1) (\"utils.py\" 86)) (\"utils.py\" 86)) (\"utils.py\" 86))) (\"utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_82_hist\" (\"utils.py\" 88)) (iter \"utils_83_x\" (\"utils.py\" 84)) (\"utils.py\" 88)) (literal (intOrNat 1) (\"utils.py\" 88)) (\"utils.py\" 88))))) (\"utils.py\" 84)) (defineLocal \"compute_utils_90i\" (size (list (\"utils.py\" 90) (literal (intOrNat 1) (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 90)) (literal (intOrNat 3) (\"utils.py\" 90)) (literal (intOrNat 4) (\"utils.py\" 90)) (literal (intOrNat 5) (\"utils.py\" 90))) (\"utils.py\" 90)) True (\"utils.py\" 90)) (defineLocal \"utils_84_result\" (literal (nat 0) (\"utils.py\" 91)) True (\"utils.py\" 91)) (defineLocal \"utils_85_half\" (truediv (getLocal \"compute_utils_90i\" (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 92)) (\"utils.py\" 92)) True (\"utils.py\" 92)) (defineLocal \"utils_86_use_average\" (eq (mul (getLocal \"utils_85_half\" (\"utils.py\" 93)) (literal (intOrNat 2) (\"utils.py\" 93)) (\"utils.py\" 93)) (getLocal \"compute_utils_90i\" (\"utils.py\" 90)) (\"utils.py\" 93)) True (\"utils.py\" 93)) (defineLocal \"utils_87_i\" (literal (intOrNat 0) (\"utils.py\" 94)) True (\"utils.py\" 94)) (forGroup \"utils_88_x\" (items (getLocal \"utils_82_hist\" (\"utils.py\" 95)) (\"utils.py\" 95)) ((ifBlock (getLocal \"utils_86_use_average\" (\"utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_87_i\" (\"utils.py\" 97)) (getLocal \"utils_85_half\" (\"utils.py\" 97)) (\"utils.py\" 97)) ((set (getLocal \"utils_84_result\" (\"\" -1)) (attr (iter \"utils_88_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 98)) (set (getLocal \"utils_87_i\" (\"\" -1)) (add (getLocal \"utils_87_i\" (\"utils.py\" 99)) (attr (iter \"utils_88_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 99)) (\"utils.py\" 99)) (ifBlock (gt (getLocal \"utils_87_i\" (\"utils.py\" 100)) (getLocal \"utils_85_half\" (\"utils.py\" 100)) (\"utils.py\" 100)) ((set (getLocal \"utils_86_use_average\" (\"\" -1)) (literal (bool False) (\"utils.py\" 101)) (\"utils.py\" 101))) (\"utils.py\" 100))) (\"utils.py\" 97)) (elseBlock ((set (getLocal \"utils_84_result\" (\"\" -1)) (add (getLocal \"utils_84_result\" (\"utils.py\" 103)) (attr (iter \"utils_88_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 103)) (\"utils.py\" 103)) (set (getLocal \"utils_84_result\" (\"\" -1)) (truediv (getLocal \"utils_84_result\" (\"utils.py\" 104)) (literal (intOrNat 2) (\"utils.py\" 104)) (\"utils.py\" 104)) (\"utils.py\" 104)) (set (getLocal \"utils_86_use_average\" (\"\" -1)) (literal (bool False) (\"utils.py\" 105)) (\"utils.py\" 105)) (set (getLocal \"utils_87_i\" (\"\" -1)) (add (getLocal \"utils_87_i\" (\"utils.py\" 106)) (attr (iter \"utils_88_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 106)) (\"utils.py\" 106))))) (\"utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_87_i\" (\"utils.py\" 108)) (getLocal \"utils_85_half\" (\"utils.py\" 108)) (\"utils.py\" 108)) ((set (getLocal \"utils_84_result\" (\"\" -1)) (attr (iter \"utils_88_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 109)) (set (getLocal \"utils_87_i\" (\"\" -1)) (add (getLocal \"utils_87_i\" (\"utils.py\" 110)) (attr (iter \"utils_88_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 110)) (\"utils.py\" 110))) (\"utils.py\" 108))))) (\"utils.py\" 95)) (verify (eq (getLocal \"utils_84_result\" (\"utils.py\" 112)) (literal (intOrNat 3) (\"utils.py\" 119)) (\"utils.py\" 119)) (\"utils.py\" 119)) (defineLocal \"utils_89_hist\" (map (\"utils.py\" 83) ) True (\"utils.py\" 83)) (forGroup \"utils_90_x\" (list (\"utils.py\" 84) (literal (intOrNat 1) (\"utils.py\" 84)) (literal (intOrNat 2) (\"utils.py\" 84)) (literal (intOrNat 2) (\"utils.py\" 84)) (literal (intOrNat 3) (\"utils.py\" 84))) ((ifBlock (contains (getLocal \"utils_89_hist\" (\"utils.py\" 85)) (iter \"utils_90_x\" (\"utils.py\" 84)) (\"utils.py\" 85)) ((set (getItem (getLocal \"utils_89_hist\" (\"utils.py\" 86)) (iter \"utils_90_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (add (getItem (getLocal \"utils_89_hist\" (\"utils.py\" 86)) (iter \"utils_90_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (literal (intOrNat 1) (\"utils.py\" 86)) (\"utils.py\" 86)) (\"utils.py\" 86))) (\"utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_89_hist\" (\"utils.py\" 88)) (iter \"utils_90_x\" (\"utils.py\" 84)) (\"utils.py\" 88)) (literal (intOrNat 1) (\"utils.py\" 88)) (\"utils.py\" 88))))) (\"utils.py\" 84)) (defineLocal \"compute_utils_90\" (size (list (\"utils.py\" 90) (literal (intOrNat 1) (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 90)) (literal (intOrNat 3) (\"utils.py\" 90))) (\"utils.py\" 90)) True (\"utils.py\" 90)) (defineLocal \"utils_91_result\" (literal (nat 0) (\"utils.py\" 91)) True (\"utils.py\" 91)) (defineLocal \"utils_92_half\" (truediv (getLocal \"compute_utils_90\" (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 92)) (\"utils.py\" 92)) True (\"utils.py\" 92)) (defineLocal \"utils_93_use_average\" (eq (mul (getLocal \"utils_92_half\" (\"utils.py\" 93)) (literal (intOrNat 2) (\"utils.py\" 93)) (\"utils.py\" 93)) (getLocal \"compute_utils_90\" (\"utils.py\" 90)) (\"utils.py\" 93)) True (\"utils.py\" 93)) (defineLocal \"utils_94_i\" (literal (intOrNat 0) (\"utils.py\" 94)) True (\"utils.py\" 94)) (forGroup \"utils_95_x\" (items (getLocal \"utils_89_hist\" (\"utils.py\" 95)) (\"utils.py\" 95)) ((ifBlock (getLocal \"utils_93_use_average\" (\"utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_94_i\" (\"utils.py\" 97)) (getLocal \"utils_92_half\" (\"utils.py\" 97)) (\"utils.py\" 97)) ((set (getLocal \"utils_91_result\" (\"\" -1)) (attr (iter \"utils_95_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 98)) (set (getLocal \"utils_94_i\" (\"\" -1)) (add (getLocal \"utils_94_i\" (\"utils.py\" 99)) (attr (iter \"utils_95_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 99)) (\"utils.py\" 99)) (ifBlock (gt (getLocal \"utils_94_i\" (\"utils.py\" 100)) (getLocal \"utils_92_half\" (\"utils.py\" 100)) (\"utils.py\" 100)) ((set (getLocal \"utils_93_use_average\" (\"\" -1)) (literal (bool False) (\"utils.py\" 101)) (\"utils.py\" 101))) (\"utils.py\" 100))) (\"utils.py\" 97)) (elseBlock ((set (getLocal \"utils_91_result\" (\"\" -1)) (add (getLocal \"utils_91_result\" (\"utils.py\" 103)) (attr (iter \"utils_95_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 103)) (\"utils.py\" 103)) (set (getLocal \"utils_91_result\" (\"\" -1)) (truediv (getLocal \"utils_91_result\" (\"utils.py\" 104)) (literal (intOrNat 2) (\"utils.py\" 104)) (\"utils.py\" 104)) (\"utils.py\" 104)) (set (getLocal \"utils_93_use_average\" (\"\" -1)) (literal (bool False) (\"utils.py\" 105)) (\"utils.py\" 105)) (set (getLocal \"utils_94_i\" (\"\" -1)) (add (getLocal \"utils_94_i\" (\"utils.py\" 106)) (attr (iter \"utils_95_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 106)) (\"utils.py\" 106))))) (\"utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_94_i\" (\"utils.py\" 108)) (getLocal \"utils_92_half\" (\"utils.py\" 108)) (\"utils.py\" 108)) ((set (getLocal \"utils_91_result\" (\"\" -1)) (attr (iter \"utils_95_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 109)) (set (getLocal \"utils_94_i\" (\"\" -1)) (add (getLocal \"utils_94_i\" (\"utils.py\" 110)) (attr (iter \"utils_95_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 110)) (\"utils.py\" 110))) (\"utils.py\" 108))))) (\"utils.py\" 95)) (verify (eq (getLocal \"utils_91_result\" (\"utils.py\" 112)) (literal (intOrNat 2) (\"utils.py\" 120)) (\"utils.py\" 120)) (\"utils.py\" 120)) (verify (eq (call_lambda (private \"math_median\" (\"smartpy/tests/utils.py\" 94)) (list (\"utils.py\" 121) (literal (intOrNat 1) (\"utils.py\" 121)) (literal (intOrNat 2) (\"utils.py\" 121)) (literal (intOrNat 2) (\"utils.py\" 121)) (literal (intOrNat 5) (\"utils.py\" 121))) (\"utils.py\" 121)) (literal (intOrNat 2) (\"utils.py\" 121)) (\"utils.py\" 121)) (\"utils.py\" 121)) (verify (literal (bool True) (\"utils.py\" 126)) (literal (string \"(number) must be lower than 64\") (\"utils.py\" 126)) (\"utils.py\" 126)) (verify (eq (openVariant (slice (literal (intOrNat 2) (\"utils.py\" 131)) (openVariant (isNat (sub (size (pack (literal (intOrNat 54) (\"utils.py\" 127)) (\"utils.py\" 127)) (\"utils.py\" 131)) (literal (intOrNat 2) (\"utils.py\" 131)) (\"utils.py\" 131)) (\"utils.py\" 131)) \"Some\" \"None\" (\"utils.py\" 131)) (pack (literal (intOrNat 54) (\"utils.py\" 127)) (\"utils.py\" 127)) (\"utils.py\" 131)) \"Some\" (literal (string \"Could not encode nat to bytes.\") (\"utils.py\" 131)) (\"utils.py\" 131)) (literal (bytes \"0x36\") (\"utils.py\" 123)) (\"utils.py\" 123)) (\"utils.py\" 123)) (verify (eq (openVariant (slice (literal (intOrNat 6) (\"utils.py\" 122)) (openVariant (isNat (sub (size (pack (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"utils.py\" 117)) (\"utils.py\" 117)) (\"utils.py\" 122)) (literal (intOrNat 6) (\"utils.py\" 122)) (\"utils.py\" 122)) (\"utils.py\" 122)) \"Some\" \"None\" (\"utils.py\" 122)) (pack (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"utils.py\" 117)) (\"utils.py\" 117)) (\"utils.py\" 122)) \"Some\" (literal (string \"Could not encode string to bytes.\") (\"utils.py\" 122)) (\"utils.py\" 122)) (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 124)) (\"utils.py\" 124)) (\"utils.py\" 124)) (verify (lt (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 125)) (\"utils.py\" 267)) (literal (intOrNat 64) (\"utils.py\" 126)) (\"utils.py\" 126)) (literal (string \"(number) must be lower than 64\") (\"utils.py\" 126)) (\"utils.py\" 126)) (defineLocal \"lengthBytes\" (openVariant (slice (literal (intOrNat 2) (\"utils.py\" 131)) (openVariant (isNat (sub (size (pack (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 125)) (\"utils.py\" 267)) (\"utils.py\" 127)) (\"utils.py\" 131)) (literal (intOrNat 2) (\"utils.py\" 131)) (\"utils.py\" 131)) (\"utils.py\" 131)) \"Some\" \"None\" (\"utils.py\" 131)) (pack (size (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 125)) (\"utils.py\" 267)) (\"utils.py\" 127)) (\"utils.py\" 131)) \"Some\" (literal (string \"Could not encode nat to bytes.\") (\"utils.py\" 131)) (\"utils.py\" 131)) True (\"utils.py\" 267)) (whileBlock (lt (size (getLocal \"lengthBytes\" (\"utils.py\" 268)) (\"utils.py\" 268)) (literal (intOrNat 4) (\"utils.py\" 268)) (\"utils.py\" 268)) ((set (getLocal \"lengthBytes\" (\"\" -1)) (add (literal (bytes \"0x00\") (\"utils.py\" 269)) (getLocal \"lengthBytes\" (\"utils.py\" 269)) (\"utils.py\" 269)) (\"utils.py\" 269))) (\"utils.py\" 268)) (verify (eq (openVariant (unpack (concat (list (\"utils.py\" 275) (literal (bytes \"0x05\") (\"utils.py\" 275)) (literal (bytes \"0x01\") (\"utils.py\" 275)) (getLocal \"lengthBytes\" (\"utils.py\" 275)) (literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\") (\"utils.py\" 125))) (\"utils.py\" 275)) \"string\" (\"utils.py\" 276)) \"Some\" (literal (string \"Could not decode bytes to string\") (\"utils.py\" 276)) (\"utils.py\" 276)) (literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\") (\"utils.py\" 125)) (\"utils.py\" 125)) (\"utils.py\" 125)))))\nflags ()\nprivates ((int_of_string (lambda 0 None False \"\" (\"\" -1) ((defineLocal \"utils_48\" (lambdaParams 0 \"\" (\"\" -1) (unknown 155)) True (\"utils.py\" 286)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (lambdaParams 0 \"\" (\"\" -1) (unknown 155))) ((set (getLocal \"utils_48\" (\"\" -1)) (openVariant (slice (literal (intOrNat 1) (\"utils.py\" 288)) (openVariant (isNat (sub (size (lambdaParams 0 \"\" (\"\" -1) (unknown 155)) (\"utils.py\" 288)) (literal (intOrNat 1) (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288)) \"Some\" \"None\" (\"utils.py\" 288)) (lambdaParams 0 \"\" (\"\" -1) (unknown 155)) (\"utils.py\" 288)) \"Some\" (literal (string \"\") (\"utils.py\" 288)) (\"utils.py\" 288)) (\"utils.py\" 288))) (\"utils.py\" 287)) (defineLocal \"utils_49\" (literal (intOrNat 0) (\"utils.py\" 290)) True (\"utils.py\" 290)) (forGroup \"utils_50\" (range (literal (intOrNat 0) (\"utils.py\" 291)) (size (getLocal \"utils_48\" (\"utils.py\" 291)) (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 291)) (\"utils.py\" 291)) ((set (getLocal \"utils_49\" (\"\" -1)) (add (mul (literal (intOrNat 10) (\"utils.py\" 292)) (getLocal \"utils_49\" (\"utils.py\" 292)) (\"utils.py\" 292)) (getItem (map (\"utils.py\" 283) ((literal (string \"0\") (\"\" -1)) (literal (intOrNat 0) (\"\" -1))) ((literal (string \"1\") (\"\" -1)) (literal (intOrNat 1) (\"\" -1))) ((literal (string \"2\") (\"\" -1)) (literal (intOrNat 2) (\"\" -1))) ((literal (string \"3\") (\"\" -1)) (literal (intOrNat 3) (\"\" -1))) ((literal (string \"4\") (\"\" -1)) (literal (intOrNat 4) (\"\" -1))) ((literal (string \"5\") (\"\" -1)) (literal (intOrNat 5) (\"\" -1))) ((literal (string \"6\") (\"\" -1)) (literal (intOrNat 6) (\"\" -1))) ((literal (string \"7\") (\"\" -1)) (literal (intOrNat 7) (\"\" -1))) ((literal (string \"8\") (\"\" -1)) (literal (intOrNat 8) (\"\" -1))) ((literal (string \"9\") (\"\" -1)) (literal (intOrNat 9) (\"\" -1)))) (openVariant (slice (iter \"utils_50\" (\"utils.py\" 291)) (literal (intOrNat 1) (\"utils.py\" 292)) (getLocal \"utils_48\" (\"utils.py\" 292)) (\"utils.py\" 292)) \"Some\" \"None\" (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292)) (\"utils.py\" 292))) (\"utils.py\" 291)) (ifBlock (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (literal (string \"-\") (\"utils.py\" 196)) (lambdaParams 0 \"\" (\"\" -1) (unknown 155))) ((set (getLocal \"utils_49\" (\"\" -1)) (mul (getLocal \"utils_49\" (\"utils.py\" 295)) (literal (int -1) (\"utils.py\" 295)) (\"utils.py\" 295)) (\"utils.py\" 295))) (\"utils.py\" 294)) (result (getLocal \"utils_49\" (\"utils.py\" 297)) (\"utils.py\" 75))))) (math_median (lambda 1 None False \"\" (\"\" -1) ((defineLocal \"utils_51_hist\" (map (\"utils.py\" 83) ) True (\"utils.py\" 83)) (forGroup \"utils_52_x\" (lambdaParams 1 \"\" (\"\" -1) (unknown 158)) ((ifBlock (contains (getLocal \"utils_51_hist\" (\"utils.py\" 85)) (iter \"utils_52_x\" (\"utils.py\" 84)) (\"utils.py\" 85)) ((set (getItem (getLocal \"utils_51_hist\" (\"utils.py\" 86)) (iter \"utils_52_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (add (getItem (getLocal \"utils_51_hist\" (\"utils.py\" 86)) (iter \"utils_52_x\" (\"utils.py\" 84)) (\"utils.py\" 86)) (literal (intOrNat 1) (\"utils.py\" 86)) (\"utils.py\" 86)) (\"utils.py\" 86))) (\"utils.py\" 85)) (elseBlock ((set (getItem (getLocal \"utils_51_hist\" (\"utils.py\" 88)) (iter \"utils_52_x\" (\"utils.py\" 84)) (\"utils.py\" 88)) (literal (intOrNat 1) (\"utils.py\" 88)) (\"utils.py\" 88))))) (\"utils.py\" 84)) (defineLocal \"compute_utils_90\" (size (lambdaParams 1 \"\" (\"\" -1) (unknown 158)) (\"utils.py\" 90)) True (\"utils.py\" 90)) (defineLocal \"utils_53_result\" (literal (nat 0) (\"utils.py\" 91)) True (\"utils.py\" 91)) (defineLocal \"utils_54_half\" (truediv (getLocal \"compute_utils_90\" (\"utils.py\" 90)) (literal (intOrNat 2) (\"utils.py\" 92)) (\"utils.py\" 92)) True (\"utils.py\" 92)) (defineLocal \"utils_55_use_average\" (eq (mul (getLocal \"utils_54_half\" (\"utils.py\" 93)) (literal (intOrNat 2) (\"utils.py\" 93)) (\"utils.py\" 93)) (getLocal \"compute_utils_90\" (\"utils.py\" 90)) (\"utils.py\" 93)) True (\"utils.py\" 93)) (defineLocal \"utils_56_i\" (literal (intOrNat 0) (\"utils.py\" 94)) True (\"utils.py\" 94)) (forGroup \"utils_57_x\" (items (getLocal \"utils_51_hist\" (\"utils.py\" 95)) (\"utils.py\" 95)) ((ifBlock (getLocal \"utils_55_use_average\" (\"utils.py\" 96)) ((ifBlock (lt (getLocal \"utils_56_i\" (\"utils.py\" 97)) (getLocal \"utils_54_half\" (\"utils.py\" 97)) (\"utils.py\" 97)) ((set (getLocal \"utils_53_result\" (\"\" -1)) (attr (iter \"utils_57_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 98)) (set (getLocal \"utils_56_i\" (\"\" -1)) (add (getLocal \"utils_56_i\" (\"utils.py\" 99)) (attr (iter \"utils_57_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 99)) (\"utils.py\" 99)) (ifBlock (gt (getLocal \"utils_56_i\" (\"utils.py\" 100)) (getLocal \"utils_54_half\" (\"utils.py\" 100)) (\"utils.py\" 100)) ((set (getLocal \"utils_55_use_average\" (\"\" -1)) (literal (bool False) (\"utils.py\" 101)) (\"utils.py\" 101))) (\"utils.py\" 100))) (\"utils.py\" 97)) (elseBlock ((set (getLocal \"utils_53_result\" (\"\" -1)) (add (getLocal \"utils_53_result\" (\"utils.py\" 103)) (attr (iter \"utils_57_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 103)) (\"utils.py\" 103)) (set (getLocal \"utils_53_result\" (\"\" -1)) (truediv (getLocal \"utils_53_result\" (\"utils.py\" 104)) (literal (intOrNat 2) (\"utils.py\" 104)) (\"utils.py\" 104)) (\"utils.py\" 104)) (set (getLocal \"utils_55_use_average\" (\"\" -1)) (literal (bool False) (\"utils.py\" 105)) (\"utils.py\" 105)) (set (getLocal \"utils_56_i\" (\"\" -1)) (add (getLocal \"utils_56_i\" (\"utils.py\" 106)) (attr (iter \"utils_57_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 106)) (\"utils.py\" 106))))) (\"utils.py\" 96)) (elseBlock ((ifBlock (le (getLocal \"utils_56_i\" (\"utils.py\" 108)) (getLocal \"utils_54_half\" (\"utils.py\" 108)) (\"utils.py\" 108)) ((set (getLocal \"utils_53_result\" (\"\" -1)) (attr (iter \"utils_57_x\" (\"utils.py\" 95)) \"key\" (\"utils.py\" 98)) (\"utils.py\" 109)) (set (getLocal \"utils_56_i\" (\"\" -1)) (add (getLocal \"utils_56_i\" (\"utils.py\" 110)) (attr (iter \"utils_57_x\" (\"utils.py\" 95)) \"value\" (\"utils.py\" 99)) (\"utils.py\" 110)) (\"utils.py\" 110))) (\"utils.py\" 108))))) (\"utils.py\" 95)) (result (getLocal \"utils_53_result\" (\"utils.py\" 112)) (\"utils.py\" 95))))) (math_pow (lambda 2 None False \"\" (\"\" -1) ((result (call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") (\"utils.py\" 9) (attr (lambdaParams 2 \"\" (\"\" -1) (unknown 165)) \"exponent\" (\"utils.py\" 91)) (attr (lambdaParams 2 \"\" (\"\" -1) (unknown 165)) \"base\" (\"utils.py\" 91)) (literal (intOrNat 1) (\"utils.py\" 9))) (\"utils.py\" 91))))) (string_ends_with (lambda 3 None False \"\" (\"\" -1) ((result (call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 137) (attr (lambdaParams 3 \"\" (\"\" -1) (unknown 166)) \"text\" (\"utils.py\" 87)) (attr (lambdaParams 3 \"\" (\"\" -1) (unknown 166)) \"postfix\" (\"utils.py\" 87))) (\"utils.py\" 87))))) (string_of_int (lambda 4 None False \"\" (\"\" -1) ((defineLocal \"utils_58\" (abs (lambdaParams 4 \"\" (\"\" -1) (unknown 167)) (\"utils.py\" 248)) True (\"utils.py\" 248)) (defineLocal \"utils_59\" (list (\"utils.py\" 249) ) True (\"utils.py\" 249)) (ifBlock (eq (getLocal \"utils_58\" (\"utils.py\" 251)) (literal (intOrNat 0) (\"utils.py\" 251)) (\"utils.py\" 251)) ((set (getLocal \"utils_59\" (\"utils.py\" 252)) (cons (literal (string \"0\") (\"utils.py\" 252)) (getLocal \"utils_59\" (\"utils.py\" 252)) (\"utils.py\" 252)) (\"utils.py\" 252))) (\"utils.py\" 251)) (whileBlock (gt (getLocal \"utils_58\" (\"utils.py\" 253)) (literal (intOrNat 0) (\"utils.py\" 253)) (\"utils.py\" 253)) ((set (getLocal \"utils_59\" (\"utils.py\" 254)) (cons (getItem (map (\"utils.py\" 246) ((literal (intOrNat 0) (\"\" -1)) (literal (string \"0\") (\"\" -1))) ((literal (intOrNat 1) (\"\" -1)) (literal (string \"1\") (\"\" -1))) ((literal (intOrNat 2) (\"\" -1)) (literal (string \"2\") (\"\" -1))) ((literal (intOrNat 3) (\"\" -1)) (literal (string \"3\") (\"\" -1))) ((literal (intOrNat 4) (\"\" -1)) (literal (string \"4\") (\"\" -1))) ((literal (intOrNat 5) (\"\" -1)) (literal (string \"5\") (\"\" -1))) ((literal (intOrNat 6) (\"\" -1)) (literal (string \"6\") (\"\" -1))) ((literal (intOrNat 7) (\"\" -1)) (literal (string \"7\") (\"\" -1))) ((literal (intOrNat 8) (\"\" -1)) (literal (string \"8\") (\"\" -1))) ((literal (intOrNat 9) (\"\" -1)) (literal (string \"9\") (\"\" -1)))) (mod (getLocal \"utils_58\" (\"utils.py\" 254)) (literal (intOrNat 10) (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (getLocal \"utils_59\" (\"utils.py\" 254)) (\"utils.py\" 254)) (\"utils.py\" 254)) (set (getLocal \"utils_58\" (\"\" -1)) (floordiv (getLocal \"utils_58\" (\"utils.py\" 255)) (literal (intOrNat 10) (\"utils.py\" 255)) (\"utils.py\" 255)) (\"utils.py\" 255))) (\"utils.py\" 253)) (defineLocal \"utils_60\" (concat (getLocal \"utils_59\" (\"utils.py\" 257)) (\"utils.py\" 257)) True (\"utils.py\" 257)) (ifBlock (lt (lambdaParams 4 \"\" (\"\" -1) (unknown 167)) (literal (intOrNat 0) (\"utils.py\" 247)) (\"utils.py\" 247)) ((set (getLocal \"utils_60\" (\"\" -1)) (add (literal (string \"-\") (\"utils.py\" 259)) (getLocal \"utils_60\" (\"utils.py\" 259)) (\"utils.py\" 259)) (\"utils.py\" 259))) (\"utils.py\" 258)) (result (getLocal \"utils_60\" (\"utils.py\" 261)) (\"utils.py\" 71))))) (string_split (lambda 5 None False \"\" (\"\" -1) ((defineLocal \"utils_61\" (literal (intOrNat 0) (\"utils.py\" 233)) True (\"utils.py\" 233)) (defineLocal \"utils_62\" (list (\"utils.py\" 234) ) True (\"utils.py\" 234)) (forGroup \"utils_63\" (range (literal (intOrNat 0) (\"utils.py\" 235)) (size (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 171)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 235)) (\"utils.py\" 235)) ((ifBlock (eq (openVariant (slice (iter \"utils_63\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 236)) (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 171)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 236)) \"Some\" \"None\" (\"utils.py\" 236)) (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 171)) \"separator\" (\"utils.py\" 79)) (\"utils.py\" 236)) ((set (getLocal \"utils_62\" (\"utils.py\" 237)) (cons (openVariant (slice (getLocal \"utils_61\" (\"utils.py\" 237)) (openVariant (isNat (sub (iter \"utils_63\" (\"utils.py\" 235)) (getLocal \"utils_61\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 171)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 237)) \"Some\" \"None\" (\"utils.py\" 237)) (getLocal \"utils_62\" (\"utils.py\" 237)) (\"utils.py\" 237)) (\"utils.py\" 237)) (set (getLocal \"utils_61\" (\"\" -1)) (add (iter \"utils_63\" (\"utils.py\" 235)) (literal (intOrNat 1) (\"utils.py\" 238)) (\"utils.py\" 238)) (\"utils.py\" 238))) (\"utils.py\" 236))) (\"utils.py\" 235)) (ifBlock (gt (size (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 171)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 239)) (literal (intOrNat 0) (\"utils.py\" 239)) (\"utils.py\" 239)) ((set (getLocal \"utils_62\" (\"utils.py\" 240)) (cons (openVariant (slice (getLocal \"utils_61\" (\"utils.py\" 240)) (openVariant (isNat (sub (size (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 171)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 240)) (getLocal \"utils_61\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (attr (lambdaParams 5 \"\" (\"\" -1) (unknown 171)) \"text\" (\"utils.py\" 79)) (\"utils.py\" 240)) \"Some\" \"None\" (\"utils.py\" 240)) (getLocal \"utils_62\" (\"utils.py\" 240)) (\"utils.py\" 240)) (\"utils.py\" 240))) (\"utils.py\" 239)) (result (rev (getLocal \"utils_62\" (\"utils.py\" 241)) (\"utils.py\" 241)) (\"utils.py\" 79))))) (string_starts_with (lambda 6 None False \"\" (\"\" -1) ((result (call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") (\"utils.py\" 196) (attr (lambdaParams 6 \"\" (\"\" -1) (unknown 174)) \"prefix\" (\"utils.py\" 83)) (attr (lambdaParams 6 \"\" (\"\" -1) (unknown 174)) \"text\" (\"utils.py\" 83))) (\"utils.py\" 83))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "(static_id 1 (\"smartpy/tests/utils.py\" 146))",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 }
]