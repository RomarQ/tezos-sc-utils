[
 {
  "shortname": "UtilsTester1_test",
  "longname": "UtilsTester1_test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"utils.py\" 150) static_id 0) \nstorage ()\nstorage_type ((unknown 3))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 42) (((\"smartpy_utils.py\" 256) define_local \"utils_18\" ((\"smartpy_utils.py\" 256) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 257) define_local \"utils_19\" ((\"smartpy_utils.py\" 257) list ) True) ((\"smartpy_utils.py\" 259) if_block ((\"smartpy_utils.py\" 259) eq ((\"smartpy_utils.py\" 259) get_local \"utils_18\") ((\"smartpy_utils.py\" 259) literal (intOrNat 0))) (((\"smartpy_utils.py\" 260) set ((\"smartpy_utils.py\" 260) get_local \"utils_19\") ((\"smartpy_utils.py\" 260) cons ((\"smartpy_utils.py\" 260) literal (string \"0\")) ((\"smartpy_utils.py\" 260) get_local \"utils_19\"))))) ((\"smartpy_utils.py\" 261) while_block ((\"smartpy_utils.py\" 261) gt ((\"smartpy_utils.py\" 261) get_local \"utils_18\") ((\"smartpy_utils.py\" 261) literal (intOrNat 0))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_19\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) get_item ((\"smartpy_utils.py\" 254) map (((\"utils.py\" 150) literal (intOrNat 0)) ((\"utils.py\" 150) literal (string \"0\"))) (((\"utils.py\" 150) literal (intOrNat 1)) ((\"utils.py\" 150) literal (string \"1\"))) (((\"utils.py\" 150) literal (intOrNat 2)) ((\"utils.py\" 150) literal (string \"2\"))) (((\"utils.py\" 150) literal (intOrNat 3)) ((\"utils.py\" 150) literal (string \"3\"))) (((\"utils.py\" 150) literal (intOrNat 4)) ((\"utils.py\" 150) literal (string \"4\"))) (((\"utils.py\" 150) literal (intOrNat 5)) ((\"utils.py\" 150) literal (string \"5\"))) (((\"utils.py\" 150) literal (intOrNat 6)) ((\"utils.py\" 150) literal (string \"6\"))) (((\"utils.py\" 150) literal (intOrNat 7)) ((\"utils.py\" 150) literal (string \"7\"))) (((\"utils.py\" 150) literal (intOrNat 8)) ((\"utils.py\" 150) literal (string \"8\"))) (((\"utils.py\" 150) literal (intOrNat 9)) ((\"utils.py\" 150) literal (string \"9\")))) ((\"smartpy_utils.py\" 262) mod ((\"smartpy_utils.py\" 262) get_local \"utils_18\") ((\"smartpy_utils.py\" 262) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 262) get_local \"utils_19\"))) ((\"smartpy_utils.py\" 263) set ((\"utils.py\" 150) get_local \"utils_18\") ((\"smartpy_utils.py\" 263) div ((\"smartpy_utils.py\" 263) get_local \"utils_18\") ((\"smartpy_utils.py\" 263) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 265) define_local \"utils_20\" ((\"smartpy_utils.py\" 265) concat ((\"smartpy_utils.py\" 265) get_local \"utils_19\")) True) ((\"smartpy_utils.py\" 266) if_block ((\"smartpy_utils.py\" 266) literal (bool True)) (((\"smartpy_utils.py\" 267) set ((\"utils.py\" 150) get_local \"utils_20\") ((\"smartpy_utils.py\" 267) add ((\"smartpy_utils.py\" 267) literal (string \"-\")) ((\"smartpy_utils.py\" 267) get_local \"utils_20\"))))) ((\"utils.py\" 43) verify ((\"utils.py\" 43) eq ((\"smartpy_utils.py\" 269) get_local \"utils_20\") ((\"utils.py\" 43) literal (string \"-1\")))) ((\"smartpy_utils.py\" 256) define_local \"utils_21\" ((\"smartpy_utils.py\" 256) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 257) define_local \"utils_22\" ((\"smartpy_utils.py\" 257) list ) True) ((\"smartpy_utils.py\" 259) if_block ((\"smartpy_utils.py\" 259) eq ((\"smartpy_utils.py\" 259) get_local \"utils_21\") ((\"smartpy_utils.py\" 259) literal (intOrNat 0))) (((\"smartpy_utils.py\" 260) set ((\"smartpy_utils.py\" 260) get_local \"utils_22\") ((\"smartpy_utils.py\" 260) cons ((\"smartpy_utils.py\" 260) literal (string \"0\")) ((\"smartpy_utils.py\" 260) get_local \"utils_22\"))))) ((\"smartpy_utils.py\" 261) while_block ((\"smartpy_utils.py\" 261) gt ((\"smartpy_utils.py\" 261) get_local \"utils_21\") ((\"smartpy_utils.py\" 261) literal (intOrNat 0))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_22\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) get_item ((\"smartpy_utils.py\" 254) map (((\"utils.py\" 150) literal (intOrNat 0)) ((\"utils.py\" 150) literal (string \"0\"))) (((\"utils.py\" 150) literal (intOrNat 1)) ((\"utils.py\" 150) literal (string \"1\"))) (((\"utils.py\" 150) literal (intOrNat 2)) ((\"utils.py\" 150) literal (string \"2\"))) (((\"utils.py\" 150) literal (intOrNat 3)) ((\"utils.py\" 150) literal (string \"3\"))) (((\"utils.py\" 150) literal (intOrNat 4)) ((\"utils.py\" 150) literal (string \"4\"))) (((\"utils.py\" 150) literal (intOrNat 5)) ((\"utils.py\" 150) literal (string \"5\"))) (((\"utils.py\" 150) literal (intOrNat 6)) ((\"utils.py\" 150) literal (string \"6\"))) (((\"utils.py\" 150) literal (intOrNat 7)) ((\"utils.py\" 150) literal (string \"7\"))) (((\"utils.py\" 150) literal (intOrNat 8)) ((\"utils.py\" 150) literal (string \"8\"))) (((\"utils.py\" 150) literal (intOrNat 9)) ((\"utils.py\" 150) literal (string \"9\")))) ((\"smartpy_utils.py\" 262) mod ((\"smartpy_utils.py\" 262) get_local \"utils_21\") ((\"smartpy_utils.py\" 262) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 262) get_local \"utils_22\"))) ((\"smartpy_utils.py\" 263) set ((\"utils.py\" 150) get_local \"utils_21\") ((\"smartpy_utils.py\" 263) div ((\"smartpy_utils.py\" 263) get_local \"utils_21\") ((\"smartpy_utils.py\" 263) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 265) define_local \"utils_23\" ((\"smartpy_utils.py\" 265) concat ((\"smartpy_utils.py\" 265) get_local \"utils_22\")) True) ((\"smartpy_utils.py\" 266) if_block ((\"smartpy_utils.py\" 266) literal (bool False)) (((\"smartpy_utils.py\" 267) set ((\"utils.py\" 150) get_local \"utils_23\") ((\"smartpy_utils.py\" 267) add ((\"smartpy_utils.py\" 267) literal (string \"-\")) ((\"smartpy_utils.py\" 267) get_local \"utils_23\"))))) ((\"utils.py\" 44) verify ((\"utils.py\" 44) eq ((\"smartpy_utils.py\" 269) get_local \"utils_23\") ((\"utils.py\" 44) literal (string \"1\")))) ((\"utils.py\" 45) verify ((\"utils.py\" 45) eq ((\"utils.py\" 45) call_lambda ((\"smartpy/tests/utils.py\" 10) private \"string_of_int\") ((\"utils.py\" 45) literal (intOrNat 2))) ((\"utils.py\" 45) literal (string \"2\")))) ((\"smartpy_utils.py\" 294) define_local \"utils_24\" ((\"smartpy_utils.py\" 294) literal (string \"1\")) True) ((\"smartpy_utils.py\" 295) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"smartpy_utils.py\" 204) literal (string \"1\"))) (((\"smartpy_utils.py\" 296) set ((\"utils.py\" 150) get_local \"utils_24\") ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) slice ((\"smartpy_utils.py\" 296) literal (intOrNat 1)) ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) is_nat ((\"smartpy_utils.py\" 296) sub ((\"smartpy_utils.py\" 296) size ((\"smartpy_utils.py\" 296) literal (string \"1\"))) ((\"smartpy_utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 296) literal (string \"1\"))) \"Some\" ((\"smartpy_utils.py\" 296) literal (string \"\")))))) ((\"smartpy_utils.py\" 298) define_local \"utils_25\" ((\"smartpy_utils.py\" 298) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 299) for_group \"utils_26\" ((\"smartpy_utils.py\" 299) range ((\"smartpy_utils.py\" 299) literal (intOrNat 0)) ((\"smartpy_utils.py\" 299) size ((\"smartpy_utils.py\" 299) get_local \"utils_24\")) ((\"smartpy_utils.py\" 299) literal (intOrNat 1))) (((\"smartpy_utils.py\" 300) set ((\"utils.py\" 150) get_local \"utils_25\") ((\"smartpy_utils.py\" 300) add ((\"smartpy_utils.py\" 300) mul_homo ((\"smartpy_utils.py\" 300) literal (intOrNat 10)) ((\"smartpy_utils.py\" 300) get_local \"utils_25\")) ((\"smartpy_utils.py\" 300) get_item ((\"smartpy_utils.py\" 291) map (((\"utils.py\" 150) literal (string \"0\")) ((\"utils.py\" 150) literal (intOrNat 0))) (((\"utils.py\" 150) literal (string \"1\")) ((\"utils.py\" 150) literal (intOrNat 1))) (((\"utils.py\" 150) literal (string \"2\")) ((\"utils.py\" 150) literal (intOrNat 2))) (((\"utils.py\" 150) literal (string \"3\")) ((\"utils.py\" 150) literal (intOrNat 3))) (((\"utils.py\" 150) literal (string \"4\")) ((\"utils.py\" 150) literal (intOrNat 4))) (((\"utils.py\" 150) literal (string \"5\")) ((\"utils.py\" 150) literal (intOrNat 5))) (((\"utils.py\" 150) literal (string \"6\")) ((\"utils.py\" 150) literal (intOrNat 6))) (((\"utils.py\" 150) literal (string \"7\")) ((\"utils.py\" 150) literal (intOrNat 7))) (((\"utils.py\" 150) literal (string \"8\")) ((\"utils.py\" 150) literal (intOrNat 8))) (((\"utils.py\" 150) literal (string \"9\")) ((\"utils.py\" 150) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 300) open_variant ((\"smartpy_utils.py\" 300) slice ((\"smartpy_utils.py\" 299) iter \"utils_26\") ((\"smartpy_utils.py\" 300) literal (intOrNat 1)) ((\"smartpy_utils.py\" 300) get_local \"utils_24\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 302) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"smartpy_utils.py\" 204) literal (string \"1\"))) (((\"smartpy_utils.py\" 303) set ((\"utils.py\" 150) get_local \"utils_25\") ((\"smartpy_utils.py\" 303) mul_homo ((\"smartpy_utils.py\" 303) get_local \"utils_25\") ((\"smartpy_utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 47) verify ((\"utils.py\" 47) eq ((\"smartpy_utils.py\" 305) get_local \"utils_25\") ((\"utils.py\" 47) literal (intOrNat 1)))) ((\"smartpy_utils.py\" 294) define_local \"utils_27\" ((\"smartpy_utils.py\" 294) literal (string \"-1\")) True) ((\"smartpy_utils.py\" 295) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"smartpy_utils.py\" 204) literal (string \"-1\"))) (((\"smartpy_utils.py\" 296) set ((\"utils.py\" 150) get_local \"utils_27\") ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) slice ((\"smartpy_utils.py\" 296) literal (intOrNat 1)) ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) is_nat ((\"smartpy_utils.py\" 296) sub ((\"smartpy_utils.py\" 296) size ((\"smartpy_utils.py\" 296) literal (string \"-1\"))) ((\"smartpy_utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 296) literal (string \"-1\"))) \"Some\" ((\"smartpy_utils.py\" 296) literal (string \"\")))))) ((\"smartpy_utils.py\" 298) define_local \"utils_28\" ((\"smartpy_utils.py\" 298) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 299) for_group \"utils_29\" ((\"smartpy_utils.py\" 299) range ((\"smartpy_utils.py\" 299) literal (intOrNat 0)) ((\"smartpy_utils.py\" 299) size ((\"smartpy_utils.py\" 299) get_local \"utils_27\")) ((\"smartpy_utils.py\" 299) literal (intOrNat 1))) (((\"smartpy_utils.py\" 300) set ((\"utils.py\" 150) get_local \"utils_28\") ((\"smartpy_utils.py\" 300) add ((\"smartpy_utils.py\" 300) mul_homo ((\"smartpy_utils.py\" 300) literal (intOrNat 10)) ((\"smartpy_utils.py\" 300) get_local \"utils_28\")) ((\"smartpy_utils.py\" 300) get_item ((\"smartpy_utils.py\" 291) map (((\"utils.py\" 150) literal (string \"0\")) ((\"utils.py\" 150) literal (intOrNat 0))) (((\"utils.py\" 150) literal (string \"1\")) ((\"utils.py\" 150) literal (intOrNat 1))) (((\"utils.py\" 150) literal (string \"2\")) ((\"utils.py\" 150) literal (intOrNat 2))) (((\"utils.py\" 150) literal (string \"3\")) ((\"utils.py\" 150) literal (intOrNat 3))) (((\"utils.py\" 150) literal (string \"4\")) ((\"utils.py\" 150) literal (intOrNat 4))) (((\"utils.py\" 150) literal (string \"5\")) ((\"utils.py\" 150) literal (intOrNat 5))) (((\"utils.py\" 150) literal (string \"6\")) ((\"utils.py\" 150) literal (intOrNat 6))) (((\"utils.py\" 150) literal (string \"7\")) ((\"utils.py\" 150) literal (intOrNat 7))) (((\"utils.py\" 150) literal (string \"8\")) ((\"utils.py\" 150) literal (intOrNat 8))) (((\"utils.py\" 150) literal (string \"9\")) ((\"utils.py\" 150) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 300) open_variant ((\"smartpy_utils.py\" 300) slice ((\"smartpy_utils.py\" 299) iter \"utils_29\") ((\"smartpy_utils.py\" 300) literal (intOrNat 1)) ((\"smartpy_utils.py\" 300) get_local \"utils_27\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 302) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"smartpy_utils.py\" 204) literal (string \"-1\"))) (((\"smartpy_utils.py\" 303) set ((\"utils.py\" 150) get_local \"utils_28\") ((\"smartpy_utils.py\" 303) mul_homo ((\"smartpy_utils.py\" 303) get_local \"utils_28\") ((\"smartpy_utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 48) verify ((\"utils.py\" 48) eq ((\"smartpy_utils.py\" 305) get_local \"utils_28\") ((\"utils.py\" 48) literal (int -1)))) ((\"utils.py\" 49) verify ((\"utils.py\" 49) eq ((\"utils.py\" 49) call_lambda ((\"smartpy/tests/utils.py\" 14) private \"int_of_string\") ((\"utils.py\" 49) literal (string \"2\"))) ((\"utils.py\" 49) literal (intOrNat 2)))) ((\"utils.py\" 309) define_local \"compute_utils_309\" ((\"utils.py\" 309) size ((\"utils.py\" 50) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 310) define_local \"utils_0\" ((\"utils.py\" 310) literal (nat 0)) True) ((\"utils.py\" 311) for_group \"utils_1\" ((\"utils.py\" 311) range ((\"utils.py\" 311) literal (intOrNat 0)) ((\"utils.py\" 309) get_local \"compute_utils_309\") ((\"utils.py\" 311) literal (intOrNat 1))) (((\"utils.py\" 312) define_local \"compute_utils_312\" ((\"utils.py\" 312) open_variant ((\"utils.py\" 312) slice ((\"utils.py\" 311) iter \"utils_1\") ((\"utils.py\" 312) literal (intOrNat 1)) ((\"utils.py\" 50) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 313) define_local \"compute_utils_313\" ((\"utils.py\" 313) mul_homo ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 309) get_local \"compute_utils_309\") ((\"utils.py\" 313) add ((\"utils.py\" 311) iter \"utils_1\") ((\"utils.py\" 313) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 313) literal (intOrNat 2))) True) ((\"utils.py\" 319) set ((\"utils.py\" 150) get_local \"utils_0\") ((\"utils.py\" 319) add ((\"utils.py\" 319) get_local \"utils_0\") ((\"utils.py\" 319) mul_homo ((\"utils.py\" 319) open_variant ((\"utils.py\" 319) is_nat ((\"utils.py\" 320) to_int ((\"utils.py\" 320) open_variant ((\"utils.py\" 320) unpack ((\"utils.py\" 318) add ((\"utils.py\" 318) add ((\"utils.py\" 318) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 312) get_local \"compute_utils_312\")) ((\"utils.py\" 318) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 313) get_local \"compute_utils_313\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 50) verify ((\"utils.py\" 50) eq ((\"utils.py\" 323) get_local \"utils_0\") ((\"utils.py\" 50) literal (intOrNat 256)))) ((\"utils.py\" 51) verify ((\"utils.py\" 51) eq ((\"utils.py\" 51) call_lambda ((\"smartpy/tests/utils.py\" 18) private \"int_of_bytes\") ((\"utils.py\" 51) literal (bytes \"0x0100\"))) ((\"utils.py\" 51) literal (intOrNat 256)))) ((\"smartpy_utils.py\" 241) define_local \"utils_30\" ((\"smartpy_utils.py\" 241) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 242) define_local \"utils_31\" ((\"smartpy_utils.py\" 242) list ) True) ((\"smartpy_utils.py\" 243) for_group \"utils_32\" ((\"smartpy_utils.py\" 243) range ((\"smartpy_utils.py\" 243) literal (intOrNat 0)) ((\"smartpy_utils.py\" 243) size ((\"smartpy_utils.py\" 243) literal (string \"a b\"))) ((\"smartpy_utils.py\" 243) literal (intOrNat 1))) (((\"smartpy_utils.py\" 244) if_block ((\"smartpy_utils.py\" 244) eq ((\"smartpy_utils.py\" 244) open_variant ((\"smartpy_utils.py\" 244) slice ((\"smartpy_utils.py\" 243) iter \"utils_32\") ((\"smartpy_utils.py\" 244) literal (intOrNat 1)) ((\"smartpy_utils.py\" 244) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 244) literal (string \" \"))) (((\"smartpy_utils.py\" 245) set ((\"smartpy_utils.py\" 245) get_local \"utils_31\") ((\"smartpy_utils.py\" 245) cons ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) slice ((\"smartpy_utils.py\" 245) get_local \"utils_30\") ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) is_nat ((\"smartpy_utils.py\" 245) sub ((\"smartpy_utils.py\" 243) iter \"utils_32\") ((\"smartpy_utils.py\" 245) get_local \"utils_30\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) get_local \"utils_31\"))) ((\"smartpy_utils.py\" 246) set ((\"utils.py\" 150) get_local \"utils_30\") ((\"smartpy_utils.py\" 246) add ((\"smartpy_utils.py\" 243) iter \"utils_32\") ((\"smartpy_utils.py\" 246) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 247) if_block ((\"smartpy_utils.py\" 247) gt ((\"smartpy_utils.py\" 247) size ((\"smartpy_utils.py\" 247) literal (string \"a b\"))) ((\"smartpy_utils.py\" 247) literal (intOrNat 0))) (((\"smartpy_utils.py\" 248) set ((\"smartpy_utils.py\" 248) get_local \"utils_31\") ((\"smartpy_utils.py\" 248) cons ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) slice ((\"smartpy_utils.py\" 248) get_local \"utils_30\") ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) is_nat ((\"smartpy_utils.py\" 248) sub ((\"smartpy_utils.py\" 248) size ((\"smartpy_utils.py\" 248) literal (string \"a b\"))) ((\"smartpy_utils.py\" 248) get_local \"utils_30\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) get_local \"utils_31\"))))) ((\"utils.py\" 53) verify ((\"utils.py\" 53) eq ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"smartpy_utils.py\" 249) rev ((\"smartpy_utils.py\" 249) get_local \"utils_31\")) (unknown 45))) ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"utils.py\" 53) list ((\"utils.py\" 53) literal (string \"a\")) ((\"utils.py\" 53) literal (string \"b\"))) (unknown 45))))) ((\"smartpy_utils.py\" 241) define_local \"utils_33\" ((\"smartpy_utils.py\" 241) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 242) define_local \"utils_34\" ((\"smartpy_utils.py\" 242) list ) True) ((\"smartpy_utils.py\" 243) for_group \"utils_35\" ((\"smartpy_utils.py\" 243) range ((\"smartpy_utils.py\" 243) literal (intOrNat 0)) ((\"smartpy_utils.py\" 243) size ((\"smartpy_utils.py\" 243) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 243) literal (intOrNat 1))) (((\"smartpy_utils.py\" 244) if_block ((\"smartpy_utils.py\" 244) eq ((\"smartpy_utils.py\" 244) open_variant ((\"smartpy_utils.py\" 244) slice ((\"smartpy_utils.py\" 243) iter \"utils_35\") ((\"smartpy_utils.py\" 244) literal (intOrNat 1)) ((\"smartpy_utils.py\" 244) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 244) literal (string \",\"))) (((\"smartpy_utils.py\" 245) set ((\"smartpy_utils.py\" 245) get_local \"utils_34\") ((\"smartpy_utils.py\" 245) cons ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) slice ((\"smartpy_utils.py\" 245) get_local \"utils_33\") ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) is_nat ((\"smartpy_utils.py\" 245) sub ((\"smartpy_utils.py\" 243) iter \"utils_35\") ((\"smartpy_utils.py\" 245) get_local \"utils_33\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) get_local \"utils_34\"))) ((\"smartpy_utils.py\" 246) set ((\"utils.py\" 150) get_local \"utils_33\") ((\"smartpy_utils.py\" 246) add ((\"smartpy_utils.py\" 243) iter \"utils_35\") ((\"smartpy_utils.py\" 246) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 247) if_block ((\"smartpy_utils.py\" 247) gt ((\"smartpy_utils.py\" 247) size ((\"smartpy_utils.py\" 247) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 247) literal (intOrNat 0))) (((\"smartpy_utils.py\" 248) set ((\"smartpy_utils.py\" 248) get_local \"utils_34\") ((\"smartpy_utils.py\" 248) cons ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) slice ((\"smartpy_utils.py\" 248) get_local \"utils_33\") ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) is_nat ((\"smartpy_utils.py\" 248) sub ((\"smartpy_utils.py\" 248) size ((\"smartpy_utils.py\" 248) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 248) get_local \"utils_33\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) get_local \"utils_34\"))))) ((\"utils.py\" 54) verify ((\"utils.py\" 54) eq ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"smartpy_utils.py\" 249) rev ((\"smartpy_utils.py\" 249) get_local \"utils_34\")) (unknown 48))) ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"utils.py\" 54) list ((\"utils.py\" 54) literal (string \"b\")) ((\"utils.py\" 54) literal (string \"a\"))) (unknown 48))))) ((\"utils.py\" 55) verify ((\"utils.py\" 55) eq ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) call_lambda ((\"smartpy/tests/utils.py\" 22) private \"string_split\") ((\"utils.py\" 55) record (separator ((\"utils.py\" 55) literal (string \",,\"))) (text ((\"utils.py\" 55) literal (string \"a,b\"))))) (unknown 49))) ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) list ((\"utils.py\" 55) literal (string \"a,b\"))) (unknown 49))))) ((\"utils.py\" 57) verify ((\"utils.py\" 57) eq ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"a\")) ((\"smartpy_utils.py\" 204) literal (string \"abc\"))) ((\"utils.py\" 57) literal (bool True)))) ((\"utils.py\" 58) verify ((\"utils.py\" 58) eq ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"b\")) ((\"smartpy_utils.py\" 204) literal (string \"abc\"))) ((\"utils.py\" 58) literal (bool False)))) ((\"utils.py\" 59) verify ((\"utils.py\" 59) eq ((\"utils.py\" 59) call_lambda ((\"smartpy/tests/utils.py\" 26) private \"string_starts_with\") ((\"utils.py\" 59) record (prefix ((\"utils.py\" 59) literal (string \"a\"))) (text ((\"utils.py\" 59) literal (string \"abc\"))))) ((\"utils.py\" 59) literal (bool True)))) ((\"utils.py\" 61) verify ((\"utils.py\" 61) eq ((\"smartpy_utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 145) literal (string \"abc\")) ((\"smartpy_utils.py\" 145) literal (string \"c\"))) ((\"utils.py\" 61) literal (bool True)))) ((\"utils.py\" 62) verify ((\"utils.py\" 62) eq ((\"smartpy_utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 145) literal (string \"abc\")) ((\"smartpy_utils.py\" 145) literal (string \"b\"))) ((\"utils.py\" 62) literal (bool False)))) ((\"utils.py\" 63) verify ((\"utils.py\" 63) eq ((\"utils.py\" 63) call_lambda ((\"smartpy/tests/utils.py\" 30) private \"string_ends_with\") ((\"utils.py\" 63) record (postfix ((\"utils.py\" 63) literal (string \"c\"))) (text ((\"utils.py\" 63) literal (string \"abc\"))))) ((\"utils.py\" 63) literal (bool True)))) ((\"smartpy_utils.py\" 83) define_local \"utils_36_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_37_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3)) ((\"smartpy_utils.py\" 84) literal (intOrNat 4)) ((\"smartpy_utils.py\" 84) literal (intOrNat 5))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_36_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_37_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_36_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_37_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_36_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_37_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_36_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_37_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)) ((\"smartpy_utils.py\" 90) literal (intOrNat 4)) ((\"smartpy_utils.py\" 90) literal (intOrNat 5)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_38_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_39_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_40_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_39_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_41_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_42_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_36_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_40_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_39_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 150) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 150) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_39_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 150) get_local \"utils_40_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 150) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 150) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 150) get_local \"utils_40_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 150) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_39_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 150) get_local \"utils_38_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 150) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_41_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_42_x\") \"value\"))))))))) ((\"utils.py\" 65) verify ((\"utils.py\" 65) eq ((\"smartpy_utils.py\" 112) get_local \"utils_38_result\") ((\"utils.py\" 65) literal (intOrNat 3)))) ((\"smartpy_utils.py\" 83) define_local \"utils_43_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_44_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_43_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_44_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_43_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_44_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_43_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_44_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_43_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_44_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90i\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_45_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_46_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_47_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_46_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_48_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_49_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_43_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_47_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_46_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 150) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 150) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_46_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 150) get_local \"utils_47_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 150) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 150) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 150) get_local \"utils_47_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 150) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_46_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 150) get_local \"utils_45_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 150) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_48_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_49_x\") \"value\"))))))))) ((\"utils.py\" 66) verify ((\"utils.py\" 66) eq ((\"smartpy_utils.py\" 112) get_local \"utils_45_result\") ((\"utils.py\" 66) literal (intOrNat 2)))) ((\"utils.py\" 67) verify ((\"utils.py\" 67) eq ((\"utils.py\" 67) call_lambda ((\"smartpy/tests/utils.py\" 38) private \"math_median\") ((\"utils.py\" 67) list ((\"utils.py\" 67) literal (intOrNat 1)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 5)))) ((\"utils.py\" 67) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 131) verify ((\"smartpy_utils.py\" 131) literal (bool True)) ((\"smartpy_utils.py\" 131) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 133) define_local \"utils_50_bytes\" ((\"smartpy_utils.py\" 133) literal (bytes \"0x\")) True) ((\"smartpy_utils.py\" 134) define_local \"utils_51_value\" ((\"smartpy_utils.py\" 134) literal (intOrNat 54)) True) ((\"smartpy_utils.py\" 135) while_block ((\"smartpy_utils.py\" 135) neq ((\"smartpy_utils.py\" 135) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 135) literal (intOrNat 0))) (((\"smartpy_utils.py\" 136) set ((\"utils.py\" 150) get_local \"utils_50_bytes\") ((\"smartpy_utils.py\" 136) add ((\"smartpy_utils.py\" 126) open_variant ((\"smartpy_utils.py\" 126) slice ((\"smartpy_utils.py\" 126) literal (intOrNat 6)) ((\"smartpy_utils.py\" 126) literal (intOrNat 1)) ((\"smartpy_utils.py\" 126) pack ((\"smartpy_utils.py\" 126) MUL ((\"smartpy_utils.py\" 126) to_int ((\"smartpy_utils.py\" 136) get_local \"utils_51_value\")) ((\"smartpy_utils.py\" 126) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 136) get_local \"utils_50_bytes\"))) ((\"smartpy_utils.py\" 137) set ((\"utils.py\" 150) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 137) lsr ((\"smartpy_utils.py\" 137) get_local \"utils_51_value\") ((\"smartpy_utils.py\" 137) literal (intOrNat 8)))))) ((\"utils.py\" 69) verify ((\"utils.py\" 69) eq ((\"smartpy_utils.py\" 139) get_local \"utils_50_bytes\") ((\"utils.py\" 69) literal (bytes \"0x36\")))) ((\"utils.py\" 70) verify ((\"utils.py\" 70) eq ((\"smartpy_utils.py\" 122) open_variant ((\"smartpy_utils.py\" 122) slice ((\"smartpy_utils.py\" 122) literal (intOrNat 6)) ((\"smartpy_utils.py\" 122) open_variant ((\"smartpy_utils.py\" 122) is_nat ((\"smartpy_utils.py\" 122) sub ((\"smartpy_utils.py\" 122) size ((\"smartpy_utils.py\" 117) pack ((\"smartpy_utils.py\" 117) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"smartpy_utils.py\" 122) literal (intOrNat 6)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 117) pack ((\"smartpy_utils.py\" 117) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"smartpy_utils.py\" 122) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 70) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"smartpy_utils.py\" 131) verify ((\"smartpy_utils.py\" 131) lt ((\"smartpy_utils.py\" 275) size ((\"utils.py\" 71) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) ((\"smartpy_utils.py\" 131) literal (intOrNat 28948022309329048855892746252171976963317496166410141009864396001978282409984))) ((\"smartpy_utils.py\" 131) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 133) define_local \"utils_52_bytes\" ((\"smartpy_utils.py\" 133) literal (bytes \"0x\")) True) ((\"smartpy_utils.py\" 134) define_local \"utils_53_value\" ((\"smartpy_utils.py\" 275) size ((\"utils.py\" 71) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) True) ((\"smartpy_utils.py\" 135) while_block ((\"smartpy_utils.py\" 135) neq ((\"smartpy_utils.py\" 135) get_local \"utils_53_value\") ((\"smartpy_utils.py\" 135) literal (intOrNat 0))) (((\"smartpy_utils.py\" 136) set ((\"utils.py\" 150) get_local \"utils_52_bytes\") ((\"smartpy_utils.py\" 136) add ((\"smartpy_utils.py\" 126) open_variant ((\"smartpy_utils.py\" 126) slice ((\"smartpy_utils.py\" 126) literal (intOrNat 6)) ((\"smartpy_utils.py\" 126) literal (intOrNat 1)) ((\"smartpy_utils.py\" 126) pack ((\"smartpy_utils.py\" 126) MUL ((\"smartpy_utils.py\" 126) to_int ((\"smartpy_utils.py\" 136) get_local \"utils_53_value\")) ((\"smartpy_utils.py\" 126) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 136) get_local \"utils_52_bytes\"))) ((\"smartpy_utils.py\" 137) set ((\"utils.py\" 150) get_local \"utils_53_value\") ((\"smartpy_utils.py\" 137) lsr ((\"smartpy_utils.py\" 137) get_local \"utils_53_value\") ((\"smartpy_utils.py\" 137) literal (intOrNat 8)))))) ((\"smartpy_utils.py\" 275) define_local \"lengthBytes\" ((\"smartpy_utils.py\" 139) get_local \"utils_52_bytes\") True) ((\"smartpy_utils.py\" 276) while_block ((\"smartpy_utils.py\" 276) lt ((\"smartpy_utils.py\" 276) size ((\"smartpy_utils.py\" 276) get_local \"lengthBytes\")) ((\"smartpy_utils.py\" 276) literal (intOrNat 4))) (((\"smartpy_utils.py\" 277) set ((\"utils.py\" 150) get_local \"lengthBytes\") ((\"smartpy_utils.py\" 277) add ((\"smartpy_utils.py\" 277) literal (bytes \"0x00\")) ((\"smartpy_utils.py\" 277) get_local \"lengthBytes\"))))) ((\"utils.py\" 71) verify ((\"utils.py\" 71) eq ((\"smartpy_utils.py\" 284) open_variant ((\"smartpy_utils.py\" 284) unpack ((\"smartpy_utils.py\" 283) concat ((\"smartpy_utils.py\" 283) list ((\"smartpy_utils.py\" 283) literal (bytes \"0x05\")) ((\"smartpy_utils.py\" 283) literal (bytes \"0x01\")) ((\"smartpy_utils.py\" 283) get_local \"lengthBytes\") ((\"utils.py\" 71) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"smartpy_utils.py\" 284) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 71) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 73) verify ((\"utils.py\" 73) eq ((\"smartpy_utils.py\" 329) and ((\"smartpy_utils.py\" 329) ge ((\"smartpy_utils.py\" 329) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 73) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"smartpy_utils.py\" 329) le ((\"smartpy_utils.py\" 329) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 73) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 73) literal (bool False)))) ((\"utils.py\" 74) verify ((\"smartpy_utils.py\" 329) and ((\"smartpy_utils.py\" 329) ge ((\"smartpy_utils.py\" 329) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 74) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"smartpy_utils.py\" 329) le ((\"smartpy_utils.py\" 329) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 74) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"utils.py\" 150) lambda 0 None False None \"\" (((\"smartpy_utils.py\" 309) define_local \"compute_smartpy_utils_309\" ((\"smartpy_utils.py\" 309) size ((\"utils.py\" 150) lambda_params 0 \"\" (unknown 4))) True) ((\"smartpy_utils.py\" 310) define_local \"utils_0\" ((\"smartpy_utils.py\" 310) literal (nat 0)) True) ((\"smartpy_utils.py\" 311) for_group \"utils_1\" ((\"smartpy_utils.py\" 311) range ((\"smartpy_utils.py\" 311) literal (intOrNat 0)) ((\"smartpy_utils.py\" 309) get_local \"compute_smartpy_utils_309\") ((\"smartpy_utils.py\" 311) literal (intOrNat 1))) (((\"smartpy_utils.py\" 312) define_local \"compute_smartpy_utils_312\" ((\"smartpy_utils.py\" 312) open_variant ((\"smartpy_utils.py\" 312) slice ((\"smartpy_utils.py\" 311) iter \"utils_1\") ((\"smartpy_utils.py\" 312) literal (intOrNat 1)) ((\"utils.py\" 150) lambda_params 0 \"\" (unknown 4))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 313) define_local \"compute_smartpy_utils_313\" ((\"smartpy_utils.py\" 313) mul_homo ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 309) get_local \"compute_smartpy_utils_309\") ((\"smartpy_utils.py\" 313) add ((\"smartpy_utils.py\" 311) iter \"utils_1\") ((\"smartpy_utils.py\" 313) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 313) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 319) set ((\"utils.py\" 150) get_local \"utils_0\") ((\"smartpy_utils.py\" 319) add ((\"smartpy_utils.py\" 319) get_local \"utils_0\") ((\"smartpy_utils.py\" 319) mul_homo ((\"smartpy_utils.py\" 319) open_variant ((\"smartpy_utils.py\" 319) is_nat ((\"smartpy_utils.py\" 320) to_int ((\"smartpy_utils.py\" 320) open_variant ((\"smartpy_utils.py\" 320) unpack ((\"smartpy_utils.py\" 318) add ((\"smartpy_utils.py\" 318) add ((\"smartpy_utils.py\" 318) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 312) get_local \"compute_smartpy_utils_312\")) ((\"smartpy_utils.py\" 318) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 313) get_local \"compute_smartpy_utils_313\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 19) result ((\"smartpy_utils.py\" 323) get_local \"utils_0\"))))) (int_of_string ((\"utils.py\" 150) lambda 1 None False None \"\" (((\"smartpy_utils.py\" 294) define_local \"utils_2\" ((\"utils.py\" 150) lambda_params 1 \"\" (unknown 9)) True) ((\"smartpy_utils.py\" 295) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 150) lambda_params 1 \"\" (unknown 9))) (((\"smartpy_utils.py\" 296) set ((\"utils.py\" 150) get_local \"utils_2\") ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) slice ((\"smartpy_utils.py\" 296) literal (intOrNat 1)) ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) is_nat ((\"smartpy_utils.py\" 296) sub ((\"smartpy_utils.py\" 296) size ((\"utils.py\" 150) lambda_params 1 \"\" (unknown 9))) ((\"smartpy_utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 150) lambda_params 1 \"\" (unknown 9))) \"Some\" ((\"smartpy_utils.py\" 296) literal (string \"\")))))) ((\"smartpy_utils.py\" 298) define_local \"utils_3\" ((\"smartpy_utils.py\" 298) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 299) for_group \"utils_4\" ((\"smartpy_utils.py\" 299) range ((\"smartpy_utils.py\" 299) literal (intOrNat 0)) ((\"smartpy_utils.py\" 299) size ((\"smartpy_utils.py\" 299) get_local \"utils_2\")) ((\"smartpy_utils.py\" 299) literal (intOrNat 1))) (((\"smartpy_utils.py\" 300) set ((\"utils.py\" 150) get_local \"utils_3\") ((\"smartpy_utils.py\" 300) add ((\"smartpy_utils.py\" 300) mul_homo ((\"smartpy_utils.py\" 300) literal (intOrNat 10)) ((\"smartpy_utils.py\" 300) get_local \"utils_3\")) ((\"smartpy_utils.py\" 300) get_item ((\"smartpy_utils.py\" 291) map (((\"utils.py\" 150) literal (string \"0\")) ((\"utils.py\" 150) literal (intOrNat 0))) (((\"utils.py\" 150) literal (string \"1\")) ((\"utils.py\" 150) literal (intOrNat 1))) (((\"utils.py\" 150) literal (string \"2\")) ((\"utils.py\" 150) literal (intOrNat 2))) (((\"utils.py\" 150) literal (string \"3\")) ((\"utils.py\" 150) literal (intOrNat 3))) (((\"utils.py\" 150) literal (string \"4\")) ((\"utils.py\" 150) literal (intOrNat 4))) (((\"utils.py\" 150) literal (string \"5\")) ((\"utils.py\" 150) literal (intOrNat 5))) (((\"utils.py\" 150) literal (string \"6\")) ((\"utils.py\" 150) literal (intOrNat 6))) (((\"utils.py\" 150) literal (string \"7\")) ((\"utils.py\" 150) literal (intOrNat 7))) (((\"utils.py\" 150) literal (string \"8\")) ((\"utils.py\" 150) literal (intOrNat 8))) (((\"utils.py\" 150) literal (string \"9\")) ((\"utils.py\" 150) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 300) open_variant ((\"smartpy_utils.py\" 300) slice ((\"smartpy_utils.py\" 299) iter \"utils_4\") ((\"smartpy_utils.py\" 300) literal (intOrNat 1)) ((\"smartpy_utils.py\" 300) get_local \"utils_2\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 302) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 150) lambda_params 1 \"\" (unknown 9))) (((\"smartpy_utils.py\" 303) set ((\"utils.py\" 150) get_local \"utils_3\") ((\"smartpy_utils.py\" 303) mul_homo ((\"smartpy_utils.py\" 303) get_local \"utils_3\") ((\"smartpy_utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 15) result ((\"smartpy_utils.py\" 305) get_local \"utils_3\"))))) (math_median ((\"utils.py\" 150) lambda 2 None False None \"\" (((\"smartpy_utils.py\" 83) define_local \"utils_5_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_6_x\" ((\"utils.py\" 150) lambda_params 2 \"\" (unknown 12)) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_5_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_6_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_5_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_6_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_5_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_6_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_5_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_6_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"utils.py\" 150) lambda_params 2 \"\" (unknown 12))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_7_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_8_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_9_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_8_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_10_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_11_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_5_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_9_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_8_half\")) (((\"smartpy_utils.py\" 98) set ((\"utils.py\" 150) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"utils.py\" 150) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_8_half\")) (((\"smartpy_utils.py\" 101) set ((\"utils.py\" 150) get_local \"utils_9_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"utils.py\" 150) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"utils.py\" 150) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"utils.py\" 150) get_local \"utils_9_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"utils.py\" 150) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_8_half\")) (((\"smartpy_utils.py\" 109) set ((\"utils.py\" 150) get_local \"utils_7_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"utils.py\" 150) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_10_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_11_x\") \"value\"))))))))) ((\"utils.py\" 39) result ((\"smartpy_utils.py\" 112) get_local \"utils_7_result\"))))) (math_pow ((\"utils.py\" 150) lambda 3 None False None \"\" (((\"utils.py\" 35) result ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 35) attr ((\"utils.py\" 150) lambda_params 3 \"\" (unknown 19)) \"exponent\") ((\"utils.py\" 35) attr ((\"utils.py\" 150) lambda_params 3 \"\" (unknown 19)) \"base\") ((\"smartpy_utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"utils.py\" 150) lambda 4 None False None \"\" (((\"utils.py\" 31) result ((\"smartpy_utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 31) attr ((\"utils.py\" 150) lambda_params 4 \"\" (unknown 20)) \"text\") ((\"utils.py\" 31) attr ((\"utils.py\" 150) lambda_params 4 \"\" (unknown 20)) \"postfix\")))))) (string_of_int ((\"utils.py\" 150) lambda 5 None False None \"\" (((\"smartpy_utils.py\" 256) define_local \"utils_12\" ((\"smartpy_utils.py\" 256) abs ((\"utils.py\" 150) lambda_params 5 \"\" (unknown 21))) True) ((\"smartpy_utils.py\" 257) define_local \"utils_13\" ((\"smartpy_utils.py\" 257) list ) True) ((\"smartpy_utils.py\" 259) if_block ((\"smartpy_utils.py\" 259) eq ((\"smartpy_utils.py\" 259) get_local \"utils_12\") ((\"smartpy_utils.py\" 259) literal (intOrNat 0))) (((\"smartpy_utils.py\" 260) set ((\"smartpy_utils.py\" 260) get_local \"utils_13\") ((\"smartpy_utils.py\" 260) cons ((\"smartpy_utils.py\" 260) literal (string \"0\")) ((\"smartpy_utils.py\" 260) get_local \"utils_13\"))))) ((\"smartpy_utils.py\" 261) while_block ((\"smartpy_utils.py\" 261) gt ((\"smartpy_utils.py\" 261) get_local \"utils_12\") ((\"smartpy_utils.py\" 261) literal (intOrNat 0))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_13\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) get_item ((\"smartpy_utils.py\" 254) map (((\"utils.py\" 150) literal (intOrNat 0)) ((\"utils.py\" 150) literal (string \"0\"))) (((\"utils.py\" 150) literal (intOrNat 1)) ((\"utils.py\" 150) literal (string \"1\"))) (((\"utils.py\" 150) literal (intOrNat 2)) ((\"utils.py\" 150) literal (string \"2\"))) (((\"utils.py\" 150) literal (intOrNat 3)) ((\"utils.py\" 150) literal (string \"3\"))) (((\"utils.py\" 150) literal (intOrNat 4)) ((\"utils.py\" 150) literal (string \"4\"))) (((\"utils.py\" 150) literal (intOrNat 5)) ((\"utils.py\" 150) literal (string \"5\"))) (((\"utils.py\" 150) literal (intOrNat 6)) ((\"utils.py\" 150) literal (string \"6\"))) (((\"utils.py\" 150) literal (intOrNat 7)) ((\"utils.py\" 150) literal (string \"7\"))) (((\"utils.py\" 150) literal (intOrNat 8)) ((\"utils.py\" 150) literal (string \"8\"))) (((\"utils.py\" 150) literal (intOrNat 9)) ((\"utils.py\" 150) literal (string \"9\")))) ((\"smartpy_utils.py\" 262) mod ((\"smartpy_utils.py\" 262) get_local \"utils_12\") ((\"smartpy_utils.py\" 262) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 262) get_local \"utils_13\"))) ((\"smartpy_utils.py\" 263) set ((\"utils.py\" 150) get_local \"utils_12\") ((\"smartpy_utils.py\" 263) div ((\"smartpy_utils.py\" 263) get_local \"utils_12\") ((\"smartpy_utils.py\" 263) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 265) define_local \"utils_14\" ((\"smartpy_utils.py\" 265) concat ((\"smartpy_utils.py\" 265) get_local \"utils_13\")) True) ((\"smartpy_utils.py\" 266) if_block ((\"smartpy_utils.py\" 255) lt ((\"utils.py\" 150) lambda_params 5 \"\" (unknown 21)) ((\"smartpy_utils.py\" 255) literal (intOrNat 0))) (((\"smartpy_utils.py\" 267) set ((\"utils.py\" 150) get_local \"utils_14\") ((\"smartpy_utils.py\" 267) add ((\"smartpy_utils.py\" 267) literal (string \"-\")) ((\"smartpy_utils.py\" 267) get_local \"utils_14\"))))) ((\"utils.py\" 11) result ((\"smartpy_utils.py\" 269) get_local \"utils_14\"))))) (string_split ((\"utils.py\" 150) lambda 6 None False None \"\" (((\"smartpy_utils.py\" 241) define_local \"utils_15\" ((\"smartpy_utils.py\" 241) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 242) define_local \"utils_16\" ((\"smartpy_utils.py\" 242) list ) True) ((\"smartpy_utils.py\" 243) for_group \"utils_17\" ((\"smartpy_utils.py\" 243) range ((\"smartpy_utils.py\" 243) literal (intOrNat 0)) ((\"smartpy_utils.py\" 243) size ((\"utils.py\" 23) attr ((\"utils.py\" 150) lambda_params 6 \"\" (unknown 25)) \"text\")) ((\"smartpy_utils.py\" 243) literal (intOrNat 1))) (((\"smartpy_utils.py\" 244) if_block ((\"smartpy_utils.py\" 244) eq ((\"smartpy_utils.py\" 244) open_variant ((\"smartpy_utils.py\" 244) slice ((\"smartpy_utils.py\" 243) iter \"utils_17\") ((\"smartpy_utils.py\" 244) literal (intOrNat 1)) ((\"utils.py\" 23) attr ((\"utils.py\" 150) lambda_params 6 \"\" (unknown 25)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 150) lambda_params 6 \"\" (unknown 25)) \"separator\")) (((\"smartpy_utils.py\" 245) set ((\"smartpy_utils.py\" 245) get_local \"utils_16\") ((\"smartpy_utils.py\" 245) cons ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) slice ((\"smartpy_utils.py\" 245) get_local \"utils_15\") ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) is_nat ((\"smartpy_utils.py\" 245) sub ((\"smartpy_utils.py\" 243) iter \"utils_17\") ((\"smartpy_utils.py\" 245) get_local \"utils_15\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 150) lambda_params 6 \"\" (unknown 25)) \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) get_local \"utils_16\"))) ((\"smartpy_utils.py\" 246) set ((\"utils.py\" 150) get_local \"utils_15\") ((\"smartpy_utils.py\" 246) add ((\"smartpy_utils.py\" 243) iter \"utils_17\") ((\"smartpy_utils.py\" 246) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 247) if_block ((\"smartpy_utils.py\" 247) gt ((\"smartpy_utils.py\" 247) size ((\"utils.py\" 23) attr ((\"utils.py\" 150) lambda_params 6 \"\" (unknown 25)) \"text\")) ((\"smartpy_utils.py\" 247) literal (intOrNat 0))) (((\"smartpy_utils.py\" 248) set ((\"smartpy_utils.py\" 248) get_local \"utils_16\") ((\"smartpy_utils.py\" 248) cons ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) slice ((\"smartpy_utils.py\" 248) get_local \"utils_15\") ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) is_nat ((\"smartpy_utils.py\" 248) sub ((\"smartpy_utils.py\" 248) size ((\"utils.py\" 23) attr ((\"utils.py\" 150) lambda_params 6 \"\" (unknown 25)) \"text\")) ((\"smartpy_utils.py\" 248) get_local \"utils_15\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"utils.py\" 150) lambda_params 6 \"\" (unknown 25)) \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) get_local \"utils_16\"))))) ((\"utils.py\" 23) result ((\"smartpy_utils.py\" 249) rev ((\"smartpy_utils.py\" 249) get_local \"utils_16\")))))) (string_starts_with ((\"utils.py\" 150) lambda 7 None False None \"\" (((\"utils.py\" 27) result ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 27) attr ((\"utils.py\" 150) lambda_params 7 \"\" (unknown 28)) \"prefix\") ((\"utils.py\" 27) attr ((\"utils.py\" 150) lambda_params 7 \"\" (unknown 28)) \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"utils.py\" 150) static_id 0)",
    "line_no": "(\"utils.py\" 150)",
    "show": true
   },
   {
    "action": "message",
    "id": "((\"utils.py\" 150) static_id 0)",
    "line_no": "(\"utils.py\" 152)",
    "message": "test",
    "params": "((\"utils.py\" 152) record )"
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "UtilsTester2_test",
  "longname": "UtilsTester2_test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"utils.py\" 159) static_id 0) \nstorage ()\nstorage_type ((unknown 67))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 111) (((\"utils.py\" 256) define_local \"utils_18\" ((\"utils.py\" 256) literal (intOrNat 1)) True) ((\"utils.py\" 257) define_local \"utils_19\" ((\"utils.py\" 257) list ) True) ((\"utils.py\" 259) if_block ((\"utils.py\" 259) eq ((\"utils.py\" 259) get_local \"utils_18\") ((\"utils.py\" 259) literal (intOrNat 0))) (((\"utils.py\" 260) set ((\"utils.py\" 260) get_local \"utils_19\") ((\"utils.py\" 260) cons ((\"utils.py\" 260) literal (string \"0\")) ((\"utils.py\" 260) get_local \"utils_19\"))))) ((\"utils.py\" 261) while_block ((\"utils.py\" 261) gt ((\"utils.py\" 261) get_local \"utils_18\") ((\"utils.py\" 261) literal (intOrNat 0))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_19\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) get_item ((\"utils.py\" 254) map (((\"utils.py\" 159) literal (intOrNat 0)) ((\"utils.py\" 159) literal (string \"0\"))) (((\"utils.py\" 159) literal (intOrNat 1)) ((\"utils.py\" 159) literal (string \"1\"))) (((\"utils.py\" 159) literal (intOrNat 2)) ((\"utils.py\" 159) literal (string \"2\"))) (((\"utils.py\" 159) literal (intOrNat 3)) ((\"utils.py\" 159) literal (string \"3\"))) (((\"utils.py\" 159) literal (intOrNat 4)) ((\"utils.py\" 159) literal (string \"4\"))) (((\"utils.py\" 159) literal (intOrNat 5)) ((\"utils.py\" 159) literal (string \"5\"))) (((\"utils.py\" 159) literal (intOrNat 6)) ((\"utils.py\" 159) literal (string \"6\"))) (((\"utils.py\" 159) literal (intOrNat 7)) ((\"utils.py\" 159) literal (string \"7\"))) (((\"utils.py\" 159) literal (intOrNat 8)) ((\"utils.py\" 159) literal (string \"8\"))) (((\"utils.py\" 159) literal (intOrNat 9)) ((\"utils.py\" 159) literal (string \"9\")))) ((\"utils.py\" 262) mod ((\"utils.py\" 262) get_local \"utils_18\") ((\"utils.py\" 262) literal (intOrNat 10)))) ((\"utils.py\" 262) get_local \"utils_19\"))) ((\"utils.py\" 263) set ((\"utils.py\" 159) get_local \"utils_18\") ((\"utils.py\" 263) div ((\"utils.py\" 263) get_local \"utils_18\") ((\"utils.py\" 263) literal (intOrNat 10)))))) ((\"utils.py\" 265) define_local \"utils_20\" ((\"utils.py\" 265) concat ((\"utils.py\" 265) get_local \"utils_19\")) True) ((\"utils.py\" 266) if_block ((\"utils.py\" 266) literal (bool True)) (((\"utils.py\" 267) set ((\"utils.py\" 159) get_local \"utils_20\") ((\"utils.py\" 267) add ((\"utils.py\" 267) literal (string \"-\")) ((\"utils.py\" 267) get_local \"utils_20\"))))) ((\"utils.py\" 112) verify ((\"utils.py\" 112) eq ((\"utils.py\" 269) get_local \"utils_20\") ((\"utils.py\" 112) literal (string \"-1\")))) ((\"utils.py\" 256) define_local \"utils_21\" ((\"utils.py\" 256) literal (intOrNat 1)) True) ((\"utils.py\" 257) define_local \"utils_22\" ((\"utils.py\" 257) list ) True) ((\"utils.py\" 259) if_block ((\"utils.py\" 259) eq ((\"utils.py\" 259) get_local \"utils_21\") ((\"utils.py\" 259) literal (intOrNat 0))) (((\"utils.py\" 260) set ((\"utils.py\" 260) get_local \"utils_22\") ((\"utils.py\" 260) cons ((\"utils.py\" 260) literal (string \"0\")) ((\"utils.py\" 260) get_local \"utils_22\"))))) ((\"utils.py\" 261) while_block ((\"utils.py\" 261) gt ((\"utils.py\" 261) get_local \"utils_21\") ((\"utils.py\" 261) literal (intOrNat 0))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_22\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) get_item ((\"utils.py\" 254) map (((\"utils.py\" 159) literal (intOrNat 0)) ((\"utils.py\" 159) literal (string \"0\"))) (((\"utils.py\" 159) literal (intOrNat 1)) ((\"utils.py\" 159) literal (string \"1\"))) (((\"utils.py\" 159) literal (intOrNat 2)) ((\"utils.py\" 159) literal (string \"2\"))) (((\"utils.py\" 159) literal (intOrNat 3)) ((\"utils.py\" 159) literal (string \"3\"))) (((\"utils.py\" 159) literal (intOrNat 4)) ((\"utils.py\" 159) literal (string \"4\"))) (((\"utils.py\" 159) literal (intOrNat 5)) ((\"utils.py\" 159) literal (string \"5\"))) (((\"utils.py\" 159) literal (intOrNat 6)) ((\"utils.py\" 159) literal (string \"6\"))) (((\"utils.py\" 159) literal (intOrNat 7)) ((\"utils.py\" 159) literal (string \"7\"))) (((\"utils.py\" 159) literal (intOrNat 8)) ((\"utils.py\" 159) literal (string \"8\"))) (((\"utils.py\" 159) literal (intOrNat 9)) ((\"utils.py\" 159) literal (string \"9\")))) ((\"utils.py\" 262) mod ((\"utils.py\" 262) get_local \"utils_21\") ((\"utils.py\" 262) literal (intOrNat 10)))) ((\"utils.py\" 262) get_local \"utils_22\"))) ((\"utils.py\" 263) set ((\"utils.py\" 159) get_local \"utils_21\") ((\"utils.py\" 263) div ((\"utils.py\" 263) get_local \"utils_21\") ((\"utils.py\" 263) literal (intOrNat 10)))))) ((\"utils.py\" 265) define_local \"utils_23\" ((\"utils.py\" 265) concat ((\"utils.py\" 265) get_local \"utils_22\")) True) ((\"utils.py\" 266) if_block ((\"utils.py\" 266) literal (bool False)) (((\"utils.py\" 267) set ((\"utils.py\" 159) get_local \"utils_23\") ((\"utils.py\" 267) add ((\"utils.py\" 267) literal (string \"-\")) ((\"utils.py\" 267) get_local \"utils_23\"))))) ((\"utils.py\" 113) verify ((\"utils.py\" 113) eq ((\"utils.py\" 269) get_local \"utils_23\") ((\"utils.py\" 113) literal (string \"1\")))) ((\"utils.py\" 114) verify ((\"utils.py\" 114) eq ((\"utils.py\" 114) call_lambda ((\"smartpy/tests/utils.py\" 79) private \"string_of_int\") ((\"utils.py\" 114) literal (intOrNat 2))) ((\"utils.py\" 114) literal (string \"2\")))) ((\"utils.py\" 294) define_local \"utils_24\" ((\"utils.py\" 294) literal (string \"1\")) True) ((\"utils.py\" 295) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 204) literal (string \"1\"))) (((\"utils.py\" 296) set ((\"utils.py\" 159) get_local \"utils_24\") ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) slice ((\"utils.py\" 296) literal (intOrNat 1)) ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) is_nat ((\"utils.py\" 296) sub ((\"utils.py\" 296) size ((\"utils.py\" 296) literal (string \"1\"))) ((\"utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 296) literal (string \"1\"))) \"Some\" ((\"utils.py\" 296) literal (string \"\")))))) ((\"utils.py\" 298) define_local \"utils_25\" ((\"utils.py\" 298) literal (intOrNat 0)) True) ((\"utils.py\" 299) for_group \"utils_26\" ((\"utils.py\" 299) range ((\"utils.py\" 299) literal (intOrNat 0)) ((\"utils.py\" 299) size ((\"utils.py\" 299) get_local \"utils_24\")) ((\"utils.py\" 299) literal (intOrNat 1))) (((\"utils.py\" 300) set ((\"utils.py\" 159) get_local \"utils_25\") ((\"utils.py\" 300) add ((\"utils.py\" 300) mul_homo ((\"utils.py\" 300) literal (intOrNat 10)) ((\"utils.py\" 300) get_local \"utils_25\")) ((\"utils.py\" 300) get_item ((\"utils.py\" 291) map (((\"utils.py\" 159) literal (string \"0\")) ((\"utils.py\" 159) literal (intOrNat 0))) (((\"utils.py\" 159) literal (string \"1\")) ((\"utils.py\" 159) literal (intOrNat 1))) (((\"utils.py\" 159) literal (string \"2\")) ((\"utils.py\" 159) literal (intOrNat 2))) (((\"utils.py\" 159) literal (string \"3\")) ((\"utils.py\" 159) literal (intOrNat 3))) (((\"utils.py\" 159) literal (string \"4\")) ((\"utils.py\" 159) literal (intOrNat 4))) (((\"utils.py\" 159) literal (string \"5\")) ((\"utils.py\" 159) literal (intOrNat 5))) (((\"utils.py\" 159) literal (string \"6\")) ((\"utils.py\" 159) literal (intOrNat 6))) (((\"utils.py\" 159) literal (string \"7\")) ((\"utils.py\" 159) literal (intOrNat 7))) (((\"utils.py\" 159) literal (string \"8\")) ((\"utils.py\" 159) literal (intOrNat 8))) (((\"utils.py\" 159) literal (string \"9\")) ((\"utils.py\" 159) literal (intOrNat 9)))) ((\"utils.py\" 300) open_variant ((\"utils.py\" 300) slice ((\"utils.py\" 299) iter \"utils_26\") ((\"utils.py\" 300) literal (intOrNat 1)) ((\"utils.py\" 300) get_local \"utils_24\")) \"Some\" \"None\")))))) ((\"utils.py\" 302) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 204) literal (string \"1\"))) (((\"utils.py\" 303) set ((\"utils.py\" 159) get_local \"utils_25\") ((\"utils.py\" 303) mul_homo ((\"utils.py\" 303) get_local \"utils_25\") ((\"utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 116) verify ((\"utils.py\" 116) eq ((\"utils.py\" 305) get_local \"utils_25\") ((\"utils.py\" 116) literal (intOrNat 1)))) ((\"utils.py\" 294) define_local \"utils_27\" ((\"utils.py\" 294) literal (string \"-1\")) True) ((\"utils.py\" 295) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 204) literal (string \"-1\"))) (((\"utils.py\" 296) set ((\"utils.py\" 159) get_local \"utils_27\") ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) slice ((\"utils.py\" 296) literal (intOrNat 1)) ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) is_nat ((\"utils.py\" 296) sub ((\"utils.py\" 296) size ((\"utils.py\" 296) literal (string \"-1\"))) ((\"utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 296) literal (string \"-1\"))) \"Some\" ((\"utils.py\" 296) literal (string \"\")))))) ((\"utils.py\" 298) define_local \"utils_28\" ((\"utils.py\" 298) literal (intOrNat 0)) True) ((\"utils.py\" 299) for_group \"utils_29\" ((\"utils.py\" 299) range ((\"utils.py\" 299) literal (intOrNat 0)) ((\"utils.py\" 299) size ((\"utils.py\" 299) get_local \"utils_27\")) ((\"utils.py\" 299) literal (intOrNat 1))) (((\"utils.py\" 300) set ((\"utils.py\" 159) get_local \"utils_28\") ((\"utils.py\" 300) add ((\"utils.py\" 300) mul_homo ((\"utils.py\" 300) literal (intOrNat 10)) ((\"utils.py\" 300) get_local \"utils_28\")) ((\"utils.py\" 300) get_item ((\"utils.py\" 291) map (((\"utils.py\" 159) literal (string \"0\")) ((\"utils.py\" 159) literal (intOrNat 0))) (((\"utils.py\" 159) literal (string \"1\")) ((\"utils.py\" 159) literal (intOrNat 1))) (((\"utils.py\" 159) literal (string \"2\")) ((\"utils.py\" 159) literal (intOrNat 2))) (((\"utils.py\" 159) literal (string \"3\")) ((\"utils.py\" 159) literal (intOrNat 3))) (((\"utils.py\" 159) literal (string \"4\")) ((\"utils.py\" 159) literal (intOrNat 4))) (((\"utils.py\" 159) literal (string \"5\")) ((\"utils.py\" 159) literal (intOrNat 5))) (((\"utils.py\" 159) literal (string \"6\")) ((\"utils.py\" 159) literal (intOrNat 6))) (((\"utils.py\" 159) literal (string \"7\")) ((\"utils.py\" 159) literal (intOrNat 7))) (((\"utils.py\" 159) literal (string \"8\")) ((\"utils.py\" 159) literal (intOrNat 8))) (((\"utils.py\" 159) literal (string \"9\")) ((\"utils.py\" 159) literal (intOrNat 9)))) ((\"utils.py\" 300) open_variant ((\"utils.py\" 300) slice ((\"utils.py\" 299) iter \"utils_29\") ((\"utils.py\" 300) literal (intOrNat 1)) ((\"utils.py\" 300) get_local \"utils_27\")) \"Some\" \"None\")))))) ((\"utils.py\" 302) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 204) literal (string \"-1\"))) (((\"utils.py\" 303) set ((\"utils.py\" 159) get_local \"utils_28\") ((\"utils.py\" 303) mul_homo ((\"utils.py\" 303) get_local \"utils_28\") ((\"utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 117) verify ((\"utils.py\" 117) eq ((\"utils.py\" 305) get_local \"utils_28\") ((\"utils.py\" 117) literal (int -1)))) ((\"utils.py\" 118) verify ((\"utils.py\" 118) eq ((\"utils.py\" 118) call_lambda ((\"smartpy/tests/utils.py\" 83) private \"int_of_string\") ((\"utils.py\" 118) literal (string \"2\"))) ((\"utils.py\" 118) literal (intOrNat 2)))) ((\"utils.py\" 309) define_local \"compute_utils_309\" ((\"utils.py\" 309) size ((\"utils.py\" 119) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 310) define_local \"utils_30\" ((\"utils.py\" 310) literal (nat 0)) True) ((\"utils.py\" 311) for_group \"utils_31\" ((\"utils.py\" 311) range ((\"utils.py\" 311) literal (intOrNat 0)) ((\"utils.py\" 309) get_local \"compute_utils_309\") ((\"utils.py\" 311) literal (intOrNat 1))) (((\"utils.py\" 312) define_local \"compute_utils_312\" ((\"utils.py\" 312) open_variant ((\"utils.py\" 312) slice ((\"utils.py\" 311) iter \"utils_31\") ((\"utils.py\" 312) literal (intOrNat 1)) ((\"utils.py\" 119) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 313) define_local \"compute_utils_313\" ((\"utils.py\" 313) mul_homo ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 309) get_local \"compute_utils_309\") ((\"utils.py\" 313) add ((\"utils.py\" 311) iter \"utils_31\") ((\"utils.py\" 313) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 313) literal (intOrNat 2))) True) ((\"utils.py\" 319) set ((\"utils.py\" 159) get_local \"utils_30\") ((\"utils.py\" 319) add ((\"utils.py\" 319) get_local \"utils_30\") ((\"utils.py\" 319) mul_homo ((\"utils.py\" 319) open_variant ((\"utils.py\" 319) is_nat ((\"utils.py\" 320) to_int ((\"utils.py\" 320) open_variant ((\"utils.py\" 320) unpack ((\"utils.py\" 318) add ((\"utils.py\" 318) add ((\"utils.py\" 318) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 312) get_local \"compute_utils_312\")) ((\"utils.py\" 318) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 313) get_local \"compute_utils_313\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 119) verify ((\"utils.py\" 119) eq ((\"utils.py\" 323) get_local \"utils_30\") ((\"utils.py\" 119) literal (intOrNat 256)))) ((\"utils.py\" 120) verify ((\"utils.py\" 120) eq ((\"utils.py\" 120) call_lambda ((\"smartpy/tests/utils.py\" 87) private \"int_of_bytes\") ((\"utils.py\" 120) literal (bytes \"0x0100\"))) ((\"utils.py\" 120) literal (intOrNat 256)))) ((\"utils.py\" 241) define_local \"utils_32\" ((\"utils.py\" 241) literal (intOrNat 0)) True) ((\"utils.py\" 242) define_local \"utils_33\" ((\"utils.py\" 242) list ) True) ((\"utils.py\" 243) for_group \"utils_34\" ((\"utils.py\" 243) range ((\"utils.py\" 243) literal (intOrNat 0)) ((\"utils.py\" 243) size ((\"utils.py\" 243) literal (string \"a b\"))) ((\"utils.py\" 243) literal (intOrNat 1))) (((\"utils.py\" 244) if_block ((\"utils.py\" 244) eq ((\"utils.py\" 244) open_variant ((\"utils.py\" 244) slice ((\"utils.py\" 243) iter \"utils_34\") ((\"utils.py\" 244) literal (intOrNat 1)) ((\"utils.py\" 244) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 244) literal (string \" \"))) (((\"utils.py\" 245) set ((\"utils.py\" 245) get_local \"utils_33\") ((\"utils.py\" 245) cons ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) slice ((\"utils.py\" 245) get_local \"utils_32\") ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) is_nat ((\"utils.py\" 245) sub ((\"utils.py\" 243) iter \"utils_34\") ((\"utils.py\" 245) get_local \"utils_32\"))) \"Some\" \"None\") ((\"utils.py\" 245) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 245) get_local \"utils_33\"))) ((\"utils.py\" 246) set ((\"utils.py\" 159) get_local \"utils_32\") ((\"utils.py\" 246) add ((\"utils.py\" 243) iter \"utils_34\") ((\"utils.py\" 246) literal (intOrNat 1)))))))) ((\"utils.py\" 247) if_block ((\"utils.py\" 247) gt ((\"utils.py\" 247) size ((\"utils.py\" 247) literal (string \"a b\"))) ((\"utils.py\" 247) literal (intOrNat 0))) (((\"utils.py\" 248) set ((\"utils.py\" 248) get_local \"utils_33\") ((\"utils.py\" 248) cons ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) slice ((\"utils.py\" 248) get_local \"utils_32\") ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) is_nat ((\"utils.py\" 248) sub ((\"utils.py\" 248) size ((\"utils.py\" 248) literal (string \"a b\"))) ((\"utils.py\" 248) get_local \"utils_32\"))) \"Some\" \"None\") ((\"utils.py\" 248) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 248) get_local \"utils_33\"))))) ((\"utils.py\" 122) verify ((\"utils.py\" 122) eq ((\"utils.py\" 122) pack ((\"utils.py\" 122) type_annotation ((\"utils.py\" 249) rev ((\"utils.py\" 249) get_local \"utils_33\")) (unknown 109))) ((\"utils.py\" 122) pack ((\"utils.py\" 122) type_annotation ((\"utils.py\" 122) list ((\"utils.py\" 122) literal (string \"a\")) ((\"utils.py\" 122) literal (string \"b\"))) (unknown 109))))) ((\"utils.py\" 241) define_local \"utils_35\" ((\"utils.py\" 241) literal (intOrNat 0)) True) ((\"utils.py\" 242) define_local \"utils_36\" ((\"utils.py\" 242) list ) True) ((\"utils.py\" 243) for_group \"utils_37\" ((\"utils.py\" 243) range ((\"utils.py\" 243) literal (intOrNat 0)) ((\"utils.py\" 243) size ((\"utils.py\" 243) literal (string \"b,a\"))) ((\"utils.py\" 243) literal (intOrNat 1))) (((\"utils.py\" 244) if_block ((\"utils.py\" 244) eq ((\"utils.py\" 244) open_variant ((\"utils.py\" 244) slice ((\"utils.py\" 243) iter \"utils_37\") ((\"utils.py\" 244) literal (intOrNat 1)) ((\"utils.py\" 244) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 244) literal (string \",\"))) (((\"utils.py\" 245) set ((\"utils.py\" 245) get_local \"utils_36\") ((\"utils.py\" 245) cons ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) slice ((\"utils.py\" 245) get_local \"utils_35\") ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) is_nat ((\"utils.py\" 245) sub ((\"utils.py\" 243) iter \"utils_37\") ((\"utils.py\" 245) get_local \"utils_35\"))) \"Some\" \"None\") ((\"utils.py\" 245) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 245) get_local \"utils_36\"))) ((\"utils.py\" 246) set ((\"utils.py\" 159) get_local \"utils_35\") ((\"utils.py\" 246) add ((\"utils.py\" 243) iter \"utils_37\") ((\"utils.py\" 246) literal (intOrNat 1)))))))) ((\"utils.py\" 247) if_block ((\"utils.py\" 247) gt ((\"utils.py\" 247) size ((\"utils.py\" 247) literal (string \"b,a\"))) ((\"utils.py\" 247) literal (intOrNat 0))) (((\"utils.py\" 248) set ((\"utils.py\" 248) get_local \"utils_36\") ((\"utils.py\" 248) cons ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) slice ((\"utils.py\" 248) get_local \"utils_35\") ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) is_nat ((\"utils.py\" 248) sub ((\"utils.py\" 248) size ((\"utils.py\" 248) literal (string \"b,a\"))) ((\"utils.py\" 248) get_local \"utils_35\"))) \"Some\" \"None\") ((\"utils.py\" 248) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 248) get_local \"utils_36\"))))) ((\"utils.py\" 123) verify ((\"utils.py\" 123) eq ((\"utils.py\" 123) pack ((\"utils.py\" 123) type_annotation ((\"utils.py\" 249) rev ((\"utils.py\" 249) get_local \"utils_36\")) (unknown 112))) ((\"utils.py\" 123) pack ((\"utils.py\" 123) type_annotation ((\"utils.py\" 123) list ((\"utils.py\" 123) literal (string \"b\")) ((\"utils.py\" 123) literal (string \"a\"))) (unknown 112))))) ((\"utils.py\" 124) verify ((\"utils.py\" 124) eq ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 124) call_lambda ((\"smartpy/tests/utils.py\" 91) private \"string_split\") ((\"utils.py\" 124) record (separator ((\"utils.py\" 124) literal (string \",,\"))) (text ((\"utils.py\" 124) literal (string \"a,b\"))))) (unknown 113))) ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 124) list ((\"utils.py\" 124) literal (string \"a,b\"))) (unknown 113))))) ((\"utils.py\" 126) verify ((\"utils.py\" 126) eq ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"a\")) ((\"utils.py\" 204) literal (string \"abc\"))) ((\"utils.py\" 126) literal (bool True)))) ((\"utils.py\" 127) verify ((\"utils.py\" 127) eq ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"b\")) ((\"utils.py\" 204) literal (string \"abc\"))) ((\"utils.py\" 127) literal (bool False)))) ((\"utils.py\" 128) verify ((\"utils.py\" 128) eq ((\"utils.py\" 128) call_lambda ((\"smartpy/tests/utils.py\" 95) private \"string_starts_with\") ((\"utils.py\" 128) record (prefix ((\"utils.py\" 128) literal (string \"a\"))) (text ((\"utils.py\" 128) literal (string \"abc\"))))) ((\"utils.py\" 128) literal (bool True)))) ((\"utils.py\" 130) verify ((\"utils.py\" 130) eq ((\"utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 145) literal (string \"abc\")) ((\"utils.py\" 145) literal (string \"c\"))) ((\"utils.py\" 130) literal (bool True)))) ((\"utils.py\" 131) verify ((\"utils.py\" 131) eq ((\"utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 145) literal (string \"abc\")) ((\"utils.py\" 145) literal (string \"b\"))) ((\"utils.py\" 131) literal (bool False)))) ((\"utils.py\" 132) verify ((\"utils.py\" 132) eq ((\"utils.py\" 132) call_lambda ((\"smartpy/tests/utils.py\" 99) private \"string_ends_with\") ((\"utils.py\" 132) record (postfix ((\"utils.py\" 132) literal (string \"c\"))) (text ((\"utils.py\" 132) literal (string \"abc\"))))) ((\"utils.py\" 132) literal (bool True)))) ((\"utils.py\" 83) define_local \"utils_38_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_39_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3)) ((\"utils.py\" 84) literal (intOrNat 4)) ((\"utils.py\" 84) literal (intOrNat 5))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_38_hist\") ((\"utils.py\" 84) iter \"utils_39_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_38_hist\") ((\"utils.py\" 84) iter \"utils_39_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_38_hist\") ((\"utils.py\" 84) iter \"utils_39_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_38_hist\") ((\"utils.py\" 84) iter \"utils_39_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)) ((\"utils.py\" 90) literal (intOrNat 4)) ((\"utils.py\" 90) literal (intOrNat 5)))) True) ((\"utils.py\" 91) define_local \"utils_40_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_41_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_42_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_41_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_43_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_44_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_38_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_42_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_43_i\") ((\"utils.py\" 97) get_local \"utils_41_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 159) get_local \"utils_40_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_44_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 159) get_local \"utils_43_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_43_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_44_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_43_i\") ((\"utils.py\" 100) get_local \"utils_41_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 159) get_local \"utils_42_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 159) get_local \"utils_40_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_40_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_44_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 159) get_local \"utils_40_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_40_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 159) get_local \"utils_42_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 159) get_local \"utils_43_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_43_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_44_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_43_i\") ((\"utils.py\" 108) get_local \"utils_41_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 159) get_local \"utils_40_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_44_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 159) get_local \"utils_43_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_43_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_44_x\") \"value\"))))))))) ((\"utils.py\" 134) verify ((\"utils.py\" 134) eq ((\"utils.py\" 112) get_local \"utils_40_result\") ((\"utils.py\" 134) literal (intOrNat 3)))) ((\"utils.py\" 83) define_local \"utils_45_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_46_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_45_hist\") ((\"utils.py\" 84) iter \"utils_46_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_45_hist\") ((\"utils.py\" 84) iter \"utils_46_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_45_hist\") ((\"utils.py\" 84) iter \"utils_46_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_45_hist\") ((\"utils.py\" 84) iter \"utils_46_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90i\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)))) True) ((\"utils.py\" 91) define_local \"utils_47_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_48_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90i\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_49_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_48_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90i\")) True) ((\"utils.py\" 94) define_local \"utils_50_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_51_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_45_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_49_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_50_i\") ((\"utils.py\" 97) get_local \"utils_48_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 159) get_local \"utils_47_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_51_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 159) get_local \"utils_50_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_50_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_51_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_50_i\") ((\"utils.py\" 100) get_local \"utils_48_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 159) get_local \"utils_49_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 159) get_local \"utils_47_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_47_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_51_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 159) get_local \"utils_47_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_47_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 159) get_local \"utils_49_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 159) get_local \"utils_50_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_50_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_51_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_50_i\") ((\"utils.py\" 108) get_local \"utils_48_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 159) get_local \"utils_47_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_51_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 159) get_local \"utils_50_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_50_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_51_x\") \"value\"))))))))) ((\"utils.py\" 135) verify ((\"utils.py\" 135) eq ((\"utils.py\" 112) get_local \"utils_47_result\") ((\"utils.py\" 135) literal (intOrNat 2)))) ((\"utils.py\" 136) verify ((\"utils.py\" 136) eq ((\"utils.py\" 136) call_lambda ((\"smartpy/tests/utils.py\" 107) private \"math_median\") ((\"utils.py\" 136) list ((\"utils.py\" 136) literal (intOrNat 1)) ((\"utils.py\" 136) literal (intOrNat 2)) ((\"utils.py\" 136) literal (intOrNat 2)) ((\"utils.py\" 136) literal (intOrNat 5)))) ((\"utils.py\" 136) literal (intOrNat 2)))) ((\"utils.py\" 131) verify ((\"utils.py\" 131) literal (bool True)) ((\"utils.py\" 131) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 133) define_local \"utils_52_bytes\" ((\"utils.py\" 133) literal (bytes \"0x\")) True) ((\"utils.py\" 134) define_local \"utils_53_value\" ((\"utils.py\" 134) literal (intOrNat 54)) True) ((\"utils.py\" 135) while_block ((\"utils.py\" 135) neq ((\"utils.py\" 135) get_local \"utils_53_value\") ((\"utils.py\" 135) literal (intOrNat 0))) (((\"utils.py\" 136) set ((\"utils.py\" 159) get_local \"utils_52_bytes\") ((\"utils.py\" 136) add ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) slice ((\"utils.py\" 126) literal (intOrNat 6)) ((\"utils.py\" 126) literal (intOrNat 1)) ((\"utils.py\" 126) pack ((\"utils.py\" 126) MUL ((\"utils.py\" 126) to_int ((\"utils.py\" 136) get_local \"utils_53_value\")) ((\"utils.py\" 126) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 136) get_local \"utils_52_bytes\"))) ((\"utils.py\" 137) set ((\"utils.py\" 159) get_local \"utils_53_value\") ((\"utils.py\" 137) lsr ((\"utils.py\" 137) get_local \"utils_53_value\") ((\"utils.py\" 137) literal (intOrNat 8)))))) ((\"utils.py\" 138) verify ((\"utils.py\" 138) eq ((\"utils.py\" 139) get_local \"utils_52_bytes\") ((\"utils.py\" 138) literal (bytes \"0x36\")))) ((\"utils.py\" 139) verify ((\"utils.py\" 139) eq ((\"utils.py\" 122) open_variant ((\"utils.py\" 122) slice ((\"utils.py\" 122) literal (intOrNat 6)) ((\"utils.py\" 122) open_variant ((\"utils.py\" 122) is_nat ((\"utils.py\" 122) sub ((\"utils.py\" 122) size ((\"utils.py\" 117) pack ((\"utils.py\" 117) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 122) literal (intOrNat 6)))) \"Some\" \"None\") ((\"utils.py\" 117) pack ((\"utils.py\" 117) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"utils.py\" 122) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 139) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"utils.py\" 131) verify ((\"utils.py\" 131) lt ((\"utils.py\" 275) size ((\"utils.py\" 140) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) ((\"utils.py\" 131) literal (intOrNat 28948022309329048855892746252171976963317496166410141009864396001978282409984))) ((\"utils.py\" 131) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 133) define_local \"utils_54_bytes\" ((\"utils.py\" 133) literal (bytes \"0x\")) True) ((\"utils.py\" 134) define_local \"utils_55_value\" ((\"utils.py\" 275) size ((\"utils.py\" 140) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) True) ((\"utils.py\" 135) while_block ((\"utils.py\" 135) neq ((\"utils.py\" 135) get_local \"utils_55_value\") ((\"utils.py\" 135) literal (intOrNat 0))) (((\"utils.py\" 136) set ((\"utils.py\" 159) get_local \"utils_54_bytes\") ((\"utils.py\" 136) add ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) slice ((\"utils.py\" 126) literal (intOrNat 6)) ((\"utils.py\" 126) literal (intOrNat 1)) ((\"utils.py\" 126) pack ((\"utils.py\" 126) MUL ((\"utils.py\" 126) to_int ((\"utils.py\" 136) get_local \"utils_55_value\")) ((\"utils.py\" 126) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 136) get_local \"utils_54_bytes\"))) ((\"utils.py\" 137) set ((\"utils.py\" 159) get_local \"utils_55_value\") ((\"utils.py\" 137) lsr ((\"utils.py\" 137) get_local \"utils_55_value\") ((\"utils.py\" 137) literal (intOrNat 8)))))) ((\"utils.py\" 275) define_local \"lengthBytes\" ((\"utils.py\" 139) get_local \"utils_54_bytes\") True) ((\"utils.py\" 276) while_block ((\"utils.py\" 276) lt ((\"utils.py\" 276) size ((\"utils.py\" 276) get_local \"lengthBytes\")) ((\"utils.py\" 276) literal (intOrNat 4))) (((\"utils.py\" 277) set ((\"utils.py\" 159) get_local \"lengthBytes\") ((\"utils.py\" 277) add ((\"utils.py\" 277) literal (bytes \"0x00\")) ((\"utils.py\" 277) get_local \"lengthBytes\"))))) ((\"utils.py\" 140) verify ((\"utils.py\" 140) eq ((\"utils.py\" 284) open_variant ((\"utils.py\" 284) unpack ((\"utils.py\" 283) concat ((\"utils.py\" 283) list ((\"utils.py\" 283) literal (bytes \"0x05\")) ((\"utils.py\" 283) literal (bytes \"0x01\")) ((\"utils.py\" 283) get_local \"lengthBytes\") ((\"utils.py\" 140) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"utils.py\" 284) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 140) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 142) verify ((\"utils.py\" 142) eq ((\"utils.py\" 329) and ((\"utils.py\" 329) ge ((\"utils.py\" 329) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 142) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"utils.py\" 329) le ((\"utils.py\" 329) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 142) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 142) literal (bool False)))) ((\"utils.py\" 143) verify ((\"utils.py\" 329) and ((\"utils.py\" 329) ge ((\"utils.py\" 329) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 143) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"utils.py\" 329) le ((\"utils.py\" 329) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 143) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"utils.py\" 159) lambda 0 None False None \"\" (((\"smartpy_utils.py\" 309) define_local \"compute_smartpy_utils_309\" ((\"smartpy_utils.py\" 309) size ((\"utils.py\" 159) lambda_params 0 \"\" (unknown 68))) True) ((\"smartpy_utils.py\" 310) define_local \"utils_54\" ((\"smartpy_utils.py\" 310) literal (nat 0)) True) ((\"smartpy_utils.py\" 311) for_group \"utils_55\" ((\"smartpy_utils.py\" 311) range ((\"smartpy_utils.py\" 311) literal (intOrNat 0)) ((\"smartpy_utils.py\" 309) get_local \"compute_smartpy_utils_309\") ((\"smartpy_utils.py\" 311) literal (intOrNat 1))) (((\"smartpy_utils.py\" 312) define_local \"compute_smartpy_utils_312\" ((\"smartpy_utils.py\" 312) open_variant ((\"smartpy_utils.py\" 312) slice ((\"smartpy_utils.py\" 311) iter \"utils_55\") ((\"smartpy_utils.py\" 312) literal (intOrNat 1)) ((\"utils.py\" 159) lambda_params 0 \"\" (unknown 68))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 313) define_local \"compute_smartpy_utils_313\" ((\"smartpy_utils.py\" 313) mul_homo ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 309) get_local \"compute_smartpy_utils_309\") ((\"smartpy_utils.py\" 313) add ((\"smartpy_utils.py\" 311) iter \"utils_55\") ((\"smartpy_utils.py\" 313) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 313) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 319) set ((\"utils.py\" 159) get_local \"utils_54\") ((\"smartpy_utils.py\" 319) add ((\"smartpy_utils.py\" 319) get_local \"utils_54\") ((\"smartpy_utils.py\" 319) mul_homo ((\"smartpy_utils.py\" 319) open_variant ((\"smartpy_utils.py\" 319) is_nat ((\"smartpy_utils.py\" 320) to_int ((\"smartpy_utils.py\" 320) open_variant ((\"smartpy_utils.py\" 320) unpack ((\"smartpy_utils.py\" 318) add ((\"smartpy_utils.py\" 318) add ((\"smartpy_utils.py\" 318) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 312) get_local \"compute_smartpy_utils_312\")) ((\"smartpy_utils.py\" 318) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 313) get_local \"compute_smartpy_utils_313\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 88) result ((\"smartpy_utils.py\" 323) get_local \"utils_54\"))))) (int_of_string ((\"utils.py\" 159) lambda 1 None False None \"\" (((\"utils.py\" 294) define_local \"utils_2\" ((\"utils.py\" 159) lambda_params 1 \"\" (unknown 73)) True) ((\"utils.py\" 295) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 159) lambda_params 1 \"\" (unknown 73))) (((\"utils.py\" 296) set ((\"utils.py\" 159) get_local \"utils_2\") ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) slice ((\"utils.py\" 296) literal (intOrNat 1)) ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) is_nat ((\"utils.py\" 296) sub ((\"utils.py\" 296) size ((\"utils.py\" 159) lambda_params 1 \"\" (unknown 73))) ((\"utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 159) lambda_params 1 \"\" (unknown 73))) \"Some\" ((\"utils.py\" 296) literal (string \"\")))))) ((\"utils.py\" 298) define_local \"utils_3\" ((\"utils.py\" 298) literal (intOrNat 0)) True) ((\"utils.py\" 299) for_group \"utils_4\" ((\"utils.py\" 299) range ((\"utils.py\" 299) literal (intOrNat 0)) ((\"utils.py\" 299) size ((\"utils.py\" 299) get_local \"utils_2\")) ((\"utils.py\" 299) literal (intOrNat 1))) (((\"utils.py\" 300) set ((\"utils.py\" 159) get_local \"utils_3\") ((\"utils.py\" 300) add ((\"utils.py\" 300) mul_homo ((\"utils.py\" 300) literal (intOrNat 10)) ((\"utils.py\" 300) get_local \"utils_3\")) ((\"utils.py\" 300) get_item ((\"utils.py\" 291) map (((\"utils.py\" 159) literal (string \"0\")) ((\"utils.py\" 159) literal (intOrNat 0))) (((\"utils.py\" 159) literal (string \"1\")) ((\"utils.py\" 159) literal (intOrNat 1))) (((\"utils.py\" 159) literal (string \"2\")) ((\"utils.py\" 159) literal (intOrNat 2))) (((\"utils.py\" 159) literal (string \"3\")) ((\"utils.py\" 159) literal (intOrNat 3))) (((\"utils.py\" 159) literal (string \"4\")) ((\"utils.py\" 159) literal (intOrNat 4))) (((\"utils.py\" 159) literal (string \"5\")) ((\"utils.py\" 159) literal (intOrNat 5))) (((\"utils.py\" 159) literal (string \"6\")) ((\"utils.py\" 159) literal (intOrNat 6))) (((\"utils.py\" 159) literal (string \"7\")) ((\"utils.py\" 159) literal (intOrNat 7))) (((\"utils.py\" 159) literal (string \"8\")) ((\"utils.py\" 159) literal (intOrNat 8))) (((\"utils.py\" 159) literal (string \"9\")) ((\"utils.py\" 159) literal (intOrNat 9)))) ((\"utils.py\" 300) open_variant ((\"utils.py\" 300) slice ((\"utils.py\" 299) iter \"utils_4\") ((\"utils.py\" 300) literal (intOrNat 1)) ((\"utils.py\" 300) get_local \"utils_2\")) \"Some\" \"None\")))))) ((\"utils.py\" 302) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 159) lambda_params 1 \"\" (unknown 73))) (((\"utils.py\" 303) set ((\"utils.py\" 159) get_local \"utils_3\") ((\"utils.py\" 303) mul_homo ((\"utils.py\" 303) get_local \"utils_3\") ((\"utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 84) result ((\"utils.py\" 305) get_local \"utils_3\"))))) (math_median ((\"utils.py\" 159) lambda 2 None False None \"\" (((\"utils.py\" 83) define_local \"utils_5_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_6_x\" ((\"utils.py\" 159) lambda_params 2 \"\" (unknown 76)) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_5_hist\") ((\"utils.py\" 84) iter \"utils_6_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_5_hist\") ((\"utils.py\" 84) iter \"utils_6_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_5_hist\") ((\"utils.py\" 84) iter \"utils_6_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_5_hist\") ((\"utils.py\" 84) iter \"utils_6_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 159) lambda_params 2 \"\" (unknown 76))) True) ((\"utils.py\" 91) define_local \"utils_7_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_8_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_9_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_8_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_10_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_11_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_5_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_9_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_10_i\") ((\"utils.py\" 97) get_local \"utils_8_half\")) (((\"utils.py\" 98) set ((\"utils.py\" 159) get_local \"utils_7_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_11_x\") \"key\")) ((\"utils.py\" 99) set ((\"utils.py\" 159) get_local \"utils_10_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_10_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_11_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_10_i\") ((\"utils.py\" 100) get_local \"utils_8_half\")) (((\"utils.py\" 101) set ((\"utils.py\" 159) get_local \"utils_9_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"utils.py\" 159) get_local \"utils_7_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_7_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_11_x\") \"key\"))) ((\"utils.py\" 104) set ((\"utils.py\" 159) get_local \"utils_7_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_7_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"utils.py\" 159) get_local \"utils_9_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"utils.py\" 159) get_local \"utils_10_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_10_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_11_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_10_i\") ((\"utils.py\" 108) get_local \"utils_8_half\")) (((\"utils.py\" 109) set ((\"utils.py\" 159) get_local \"utils_7_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_11_x\") \"key\")) ((\"utils.py\" 110) set ((\"utils.py\" 159) get_local \"utils_10_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_10_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_11_x\") \"value\"))))))))) ((\"utils.py\" 108) result ((\"utils.py\" 112) get_local \"utils_7_result\"))))) (math_pow ((\"utils.py\" 159) lambda 3 None False None \"\" (((\"utils.py\" 104) result ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 104) attr ((\"utils.py\" 159) lambda_params 3 \"\" (unknown 83)) \"exponent\") ((\"utils.py\" 104) attr ((\"utils.py\" 159) lambda_params 3 \"\" (unknown 83)) \"base\") ((\"utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"utils.py\" 159) lambda 4 None False None \"\" (((\"utils.py\" 100) result ((\"utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 100) attr ((\"utils.py\" 159) lambda_params 4 \"\" (unknown 84)) \"text\") ((\"utils.py\" 100) attr ((\"utils.py\" 159) lambda_params 4 \"\" (unknown 84)) \"postfix\")))))) (string_of_int ((\"utils.py\" 159) lambda 5 None False None \"\" (((\"utils.py\" 256) define_local \"utils_12\" ((\"utils.py\" 256) abs ((\"utils.py\" 159) lambda_params 5 \"\" (unknown 85))) True) ((\"utils.py\" 257) define_local \"utils_13\" ((\"utils.py\" 257) list ) True) ((\"utils.py\" 259) if_block ((\"utils.py\" 259) eq ((\"utils.py\" 259) get_local \"utils_12\") ((\"utils.py\" 259) literal (intOrNat 0))) (((\"utils.py\" 260) set ((\"utils.py\" 260) get_local \"utils_13\") ((\"utils.py\" 260) cons ((\"utils.py\" 260) literal (string \"0\")) ((\"utils.py\" 260) get_local \"utils_13\"))))) ((\"utils.py\" 261) while_block ((\"utils.py\" 261) gt ((\"utils.py\" 261) get_local \"utils_12\") ((\"utils.py\" 261) literal (intOrNat 0))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_13\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) get_item ((\"utils.py\" 254) map (((\"utils.py\" 159) literal (intOrNat 0)) ((\"utils.py\" 159) literal (string \"0\"))) (((\"utils.py\" 159) literal (intOrNat 1)) ((\"utils.py\" 159) literal (string \"1\"))) (((\"utils.py\" 159) literal (intOrNat 2)) ((\"utils.py\" 159) literal (string \"2\"))) (((\"utils.py\" 159) literal (intOrNat 3)) ((\"utils.py\" 159) literal (string \"3\"))) (((\"utils.py\" 159) literal (intOrNat 4)) ((\"utils.py\" 159) literal (string \"4\"))) (((\"utils.py\" 159) literal (intOrNat 5)) ((\"utils.py\" 159) literal (string \"5\"))) (((\"utils.py\" 159) literal (intOrNat 6)) ((\"utils.py\" 159) literal (string \"6\"))) (((\"utils.py\" 159) literal (intOrNat 7)) ((\"utils.py\" 159) literal (string \"7\"))) (((\"utils.py\" 159) literal (intOrNat 8)) ((\"utils.py\" 159) literal (string \"8\"))) (((\"utils.py\" 159) literal (intOrNat 9)) ((\"utils.py\" 159) literal (string \"9\")))) ((\"utils.py\" 262) mod ((\"utils.py\" 262) get_local \"utils_12\") ((\"utils.py\" 262) literal (intOrNat 10)))) ((\"utils.py\" 262) get_local \"utils_13\"))) ((\"utils.py\" 263) set ((\"utils.py\" 159) get_local \"utils_12\") ((\"utils.py\" 263) div ((\"utils.py\" 263) get_local \"utils_12\") ((\"utils.py\" 263) literal (intOrNat 10)))))) ((\"utils.py\" 265) define_local \"utils_14\" ((\"utils.py\" 265) concat ((\"utils.py\" 265) get_local \"utils_13\")) True) ((\"utils.py\" 266) if_block ((\"utils.py\" 255) lt ((\"utils.py\" 159) lambda_params 5 \"\" (unknown 85)) ((\"utils.py\" 255) literal (intOrNat 0))) (((\"utils.py\" 267) set ((\"utils.py\" 159) get_local \"utils_14\") ((\"utils.py\" 267) add ((\"utils.py\" 267) literal (string \"-\")) ((\"utils.py\" 267) get_local \"utils_14\"))))) ((\"utils.py\" 80) result ((\"utils.py\" 269) get_local \"utils_14\"))))) (string_split ((\"utils.py\" 159) lambda 6 None False None \"\" (((\"utils.py\" 241) define_local \"utils_15\" ((\"utils.py\" 241) literal (intOrNat 0)) True) ((\"utils.py\" 242) define_local \"utils_16\" ((\"utils.py\" 242) list ) True) ((\"utils.py\" 243) for_group \"utils_17\" ((\"utils.py\" 243) range ((\"utils.py\" 243) literal (intOrNat 0)) ((\"utils.py\" 243) size ((\"utils.py\" 92) attr ((\"utils.py\" 159) lambda_params 6 \"\" (unknown 89)) \"text\")) ((\"utils.py\" 243) literal (intOrNat 1))) (((\"utils.py\" 244) if_block ((\"utils.py\" 244) eq ((\"utils.py\" 244) open_variant ((\"utils.py\" 244) slice ((\"utils.py\" 243) iter \"utils_17\") ((\"utils.py\" 244) literal (intOrNat 1)) ((\"utils.py\" 92) attr ((\"utils.py\" 159) lambda_params 6 \"\" (unknown 89)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 92) attr ((\"utils.py\" 159) lambda_params 6 \"\" (unknown 89)) \"separator\")) (((\"utils.py\" 245) set ((\"utils.py\" 245) get_local \"utils_16\") ((\"utils.py\" 245) cons ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) slice ((\"utils.py\" 245) get_local \"utils_15\") ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) is_nat ((\"utils.py\" 245) sub ((\"utils.py\" 243) iter \"utils_17\") ((\"utils.py\" 245) get_local \"utils_15\"))) \"Some\" \"None\") ((\"utils.py\" 92) attr ((\"utils.py\" 159) lambda_params 6 \"\" (unknown 89)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 245) get_local \"utils_16\"))) ((\"utils.py\" 246) set ((\"utils.py\" 159) get_local \"utils_15\") ((\"utils.py\" 246) add ((\"utils.py\" 243) iter \"utils_17\") ((\"utils.py\" 246) literal (intOrNat 1)))))))) ((\"utils.py\" 247) if_block ((\"utils.py\" 247) gt ((\"utils.py\" 247) size ((\"utils.py\" 92) attr ((\"utils.py\" 159) lambda_params 6 \"\" (unknown 89)) \"text\")) ((\"utils.py\" 247) literal (intOrNat 0))) (((\"utils.py\" 248) set ((\"utils.py\" 248) get_local \"utils_16\") ((\"utils.py\" 248) cons ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) slice ((\"utils.py\" 248) get_local \"utils_15\") ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) is_nat ((\"utils.py\" 248) sub ((\"utils.py\" 248) size ((\"utils.py\" 92) attr ((\"utils.py\" 159) lambda_params 6 \"\" (unknown 89)) \"text\")) ((\"utils.py\" 248) get_local \"utils_15\"))) \"Some\" \"None\") ((\"utils.py\" 92) attr ((\"utils.py\" 159) lambda_params 6 \"\" (unknown 89)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 248) get_local \"utils_16\"))))) ((\"utils.py\" 92) result ((\"utils.py\" 249) rev ((\"utils.py\" 249) get_local \"utils_16\")))))) (string_starts_with ((\"utils.py\" 159) lambda 7 None False None \"\" (((\"utils.py\" 96) result ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 96) attr ((\"utils.py\" 159) lambda_params 7 \"\" (unknown 92)) \"prefix\") ((\"utils.py\" 96) attr ((\"utils.py\" 159) lambda_params 7 \"\" (unknown 92)) \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"utils.py\" 159) static_id 0)",
    "line_no": "(\"utils.py\" 159)",
    "show": true
   },
   {
    "action": "message",
    "id": "((\"utils.py\" 159) static_id 0)",
    "line_no": "(\"utils.py\" 161)",
    "message": "test",
    "params": "((\"utils.py\" 161) record )"
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "UtilsTester1_compilation",
  "longname": "UtilsTester1_compilation",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"\" -1) static_id 0) \nstorage ()\nstorage_type ((unknown 1))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 42) (((\"smartpy_utils.py\" 256) define_local \"utils_74\" ((\"smartpy_utils.py\" 256) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 257) define_local \"utils_75\" ((\"smartpy_utils.py\" 257) list ) True) ((\"smartpy_utils.py\" 259) if_block ((\"smartpy_utils.py\" 259) eq ((\"smartpy_utils.py\" 259) get_local \"utils_74\") ((\"smartpy_utils.py\" 259) literal (intOrNat 0))) (((\"smartpy_utils.py\" 260) set ((\"smartpy_utils.py\" 260) get_local \"utils_75\") ((\"smartpy_utils.py\" 260) cons ((\"smartpy_utils.py\" 260) literal (string \"0\")) ((\"smartpy_utils.py\" 260) get_local \"utils_75\"))))) ((\"smartpy_utils.py\" 261) while_block ((\"smartpy_utils.py\" 261) gt ((\"smartpy_utils.py\" 261) get_local \"utils_74\") ((\"smartpy_utils.py\" 261) literal (intOrNat 0))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_75\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) get_item ((\"smartpy_utils.py\" 254) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 262) mod ((\"smartpy_utils.py\" 262) get_local \"utils_74\") ((\"smartpy_utils.py\" 262) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 262) get_local \"utils_75\"))) ((\"smartpy_utils.py\" 263) set ((\"\" -1) get_local \"utils_74\") ((\"smartpy_utils.py\" 263) div ((\"smartpy_utils.py\" 263) get_local \"utils_74\") ((\"smartpy_utils.py\" 263) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 265) define_local \"utils_76\" ((\"smartpy_utils.py\" 265) concat ((\"smartpy_utils.py\" 265) get_local \"utils_75\")) True) ((\"smartpy_utils.py\" 266) if_block ((\"smartpy_utils.py\" 266) literal (bool True)) (((\"smartpy_utils.py\" 267) set ((\"\" -1) get_local \"utils_76\") ((\"smartpy_utils.py\" 267) add ((\"smartpy_utils.py\" 267) literal (string \"-\")) ((\"smartpy_utils.py\" 267) get_local \"utils_76\"))))) ((\"utils.py\" 43) verify ((\"utils.py\" 43) eq ((\"smartpy_utils.py\" 269) get_local \"utils_76\") ((\"utils.py\" 43) literal (string \"-1\")))) ((\"smartpy_utils.py\" 256) define_local \"utils_77\" ((\"smartpy_utils.py\" 256) literal (intOrNat 1)) True) ((\"smartpy_utils.py\" 257) define_local \"utils_78\" ((\"smartpy_utils.py\" 257) list ) True) ((\"smartpy_utils.py\" 259) if_block ((\"smartpy_utils.py\" 259) eq ((\"smartpy_utils.py\" 259) get_local \"utils_77\") ((\"smartpy_utils.py\" 259) literal (intOrNat 0))) (((\"smartpy_utils.py\" 260) set ((\"smartpy_utils.py\" 260) get_local \"utils_78\") ((\"smartpy_utils.py\" 260) cons ((\"smartpy_utils.py\" 260) literal (string \"0\")) ((\"smartpy_utils.py\" 260) get_local \"utils_78\"))))) ((\"smartpy_utils.py\" 261) while_block ((\"smartpy_utils.py\" 261) gt ((\"smartpy_utils.py\" 261) get_local \"utils_77\") ((\"smartpy_utils.py\" 261) literal (intOrNat 0))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_78\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) get_item ((\"smartpy_utils.py\" 254) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 262) mod ((\"smartpy_utils.py\" 262) get_local \"utils_77\") ((\"smartpy_utils.py\" 262) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 262) get_local \"utils_78\"))) ((\"smartpy_utils.py\" 263) set ((\"\" -1) get_local \"utils_77\") ((\"smartpy_utils.py\" 263) div ((\"smartpy_utils.py\" 263) get_local \"utils_77\") ((\"smartpy_utils.py\" 263) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 265) define_local \"utils_79\" ((\"smartpy_utils.py\" 265) concat ((\"smartpy_utils.py\" 265) get_local \"utils_78\")) True) ((\"smartpy_utils.py\" 266) if_block ((\"smartpy_utils.py\" 266) literal (bool False)) (((\"smartpy_utils.py\" 267) set ((\"\" -1) get_local \"utils_79\") ((\"smartpy_utils.py\" 267) add ((\"smartpy_utils.py\" 267) literal (string \"-\")) ((\"smartpy_utils.py\" 267) get_local \"utils_79\"))))) ((\"utils.py\" 44) verify ((\"utils.py\" 44) eq ((\"smartpy_utils.py\" 269) get_local \"utils_79\") ((\"utils.py\" 44) literal (string \"1\")))) ((\"utils.py\" 45) verify ((\"utils.py\" 45) eq ((\"utils.py\" 45) call_lambda ((\"smartpy/tests/utils.py\" 10) private \"string_of_int\") ((\"utils.py\" 45) literal (intOrNat 2))) ((\"utils.py\" 45) literal (string \"2\")))) ((\"smartpy_utils.py\" 294) define_local \"utils_80\" ((\"smartpy_utils.py\" 294) literal (string \"1\")) True) ((\"smartpy_utils.py\" 295) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"smartpy_utils.py\" 204) literal (string \"1\"))) (((\"smartpy_utils.py\" 296) set ((\"\" -1) get_local \"utils_80\") ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) slice ((\"smartpy_utils.py\" 296) literal (intOrNat 1)) ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) is_nat ((\"smartpy_utils.py\" 296) sub ((\"smartpy_utils.py\" 296) size ((\"smartpy_utils.py\" 296) literal (string \"1\"))) ((\"smartpy_utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 296) literal (string \"1\"))) \"Some\" ((\"smartpy_utils.py\" 296) literal (string \"\")))))) ((\"smartpy_utils.py\" 298) define_local \"utils_81\" ((\"smartpy_utils.py\" 298) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 299) for_group \"utils_82\" ((\"smartpy_utils.py\" 299) range ((\"smartpy_utils.py\" 299) literal (intOrNat 0)) ((\"smartpy_utils.py\" 299) size ((\"smartpy_utils.py\" 299) get_local \"utils_80\")) ((\"smartpy_utils.py\" 299) literal (intOrNat 1))) (((\"smartpy_utils.py\" 300) set ((\"\" -1) get_local \"utils_81\") ((\"smartpy_utils.py\" 300) add ((\"smartpy_utils.py\" 300) mul_homo ((\"smartpy_utils.py\" 300) literal (intOrNat 10)) ((\"smartpy_utils.py\" 300) get_local \"utils_81\")) ((\"smartpy_utils.py\" 300) get_item ((\"smartpy_utils.py\" 291) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 300) open_variant ((\"smartpy_utils.py\" 300) slice ((\"smartpy_utils.py\" 299) iter \"utils_82\") ((\"smartpy_utils.py\" 300) literal (intOrNat 1)) ((\"smartpy_utils.py\" 300) get_local \"utils_80\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 302) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"smartpy_utils.py\" 204) literal (string \"1\"))) (((\"smartpy_utils.py\" 303) set ((\"\" -1) get_local \"utils_81\") ((\"smartpy_utils.py\" 303) mul_homo ((\"smartpy_utils.py\" 303) get_local \"utils_81\") ((\"smartpy_utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 47) verify ((\"utils.py\" 47) eq ((\"smartpy_utils.py\" 305) get_local \"utils_81\") ((\"utils.py\" 47) literal (intOrNat 1)))) ((\"smartpy_utils.py\" 294) define_local \"utils_83\" ((\"smartpy_utils.py\" 294) literal (string \"-1\")) True) ((\"smartpy_utils.py\" 295) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"smartpy_utils.py\" 204) literal (string \"-1\"))) (((\"smartpy_utils.py\" 296) set ((\"\" -1) get_local \"utils_83\") ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) slice ((\"smartpy_utils.py\" 296) literal (intOrNat 1)) ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) is_nat ((\"smartpy_utils.py\" 296) sub ((\"smartpy_utils.py\" 296) size ((\"smartpy_utils.py\" 296) literal (string \"-1\"))) ((\"smartpy_utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 296) literal (string \"-1\"))) \"Some\" ((\"smartpy_utils.py\" 296) literal (string \"\")))))) ((\"smartpy_utils.py\" 298) define_local \"utils_84\" ((\"smartpy_utils.py\" 298) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 299) for_group \"utils_85\" ((\"smartpy_utils.py\" 299) range ((\"smartpy_utils.py\" 299) literal (intOrNat 0)) ((\"smartpy_utils.py\" 299) size ((\"smartpy_utils.py\" 299) get_local \"utils_83\")) ((\"smartpy_utils.py\" 299) literal (intOrNat 1))) (((\"smartpy_utils.py\" 300) set ((\"\" -1) get_local \"utils_84\") ((\"smartpy_utils.py\" 300) add ((\"smartpy_utils.py\" 300) mul_homo ((\"smartpy_utils.py\" 300) literal (intOrNat 10)) ((\"smartpy_utils.py\" 300) get_local \"utils_84\")) ((\"smartpy_utils.py\" 300) get_item ((\"smartpy_utils.py\" 291) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 300) open_variant ((\"smartpy_utils.py\" 300) slice ((\"smartpy_utils.py\" 299) iter \"utils_85\") ((\"smartpy_utils.py\" 300) literal (intOrNat 1)) ((\"smartpy_utils.py\" 300) get_local \"utils_83\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 302) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"smartpy_utils.py\" 204) literal (string \"-1\"))) (((\"smartpy_utils.py\" 303) set ((\"\" -1) get_local \"utils_84\") ((\"smartpy_utils.py\" 303) mul_homo ((\"smartpy_utils.py\" 303) get_local \"utils_84\") ((\"smartpy_utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 48) verify ((\"utils.py\" 48) eq ((\"smartpy_utils.py\" 305) get_local \"utils_84\") ((\"utils.py\" 48) literal (int -1)))) ((\"utils.py\" 49) verify ((\"utils.py\" 49) eq ((\"utils.py\" 49) call_lambda ((\"smartpy/tests/utils.py\" 14) private \"int_of_string\") ((\"utils.py\" 49) literal (string \"2\"))) ((\"utils.py\" 49) literal (intOrNat 2)))) ((\"utils.py\" 309) define_local \"compute_utils_309\" ((\"utils.py\" 309) size ((\"utils.py\" 50) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 310) define_local \"utils_56\" ((\"utils.py\" 310) literal (nat 0)) True) ((\"utils.py\" 311) for_group \"utils_57\" ((\"utils.py\" 311) range ((\"utils.py\" 311) literal (intOrNat 0)) ((\"utils.py\" 309) get_local \"compute_utils_309\") ((\"utils.py\" 311) literal (intOrNat 1))) (((\"utils.py\" 312) define_local \"compute_utils_312\" ((\"utils.py\" 312) open_variant ((\"utils.py\" 312) slice ((\"utils.py\" 311) iter \"utils_57\") ((\"utils.py\" 312) literal (intOrNat 1)) ((\"utils.py\" 50) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 313) define_local \"compute_utils_313\" ((\"utils.py\" 313) mul_homo ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 309) get_local \"compute_utils_309\") ((\"utils.py\" 313) add ((\"utils.py\" 311) iter \"utils_57\") ((\"utils.py\" 313) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 313) literal (intOrNat 2))) True) ((\"utils.py\" 319) set ((\"\" -1) get_local \"utils_56\") ((\"utils.py\" 319) add ((\"utils.py\" 319) get_local \"utils_56\") ((\"utils.py\" 319) mul_homo ((\"utils.py\" 319) open_variant ((\"utils.py\" 319) is_nat ((\"utils.py\" 320) to_int ((\"utils.py\" 320) open_variant ((\"utils.py\" 320) unpack ((\"utils.py\" 318) add ((\"utils.py\" 318) add ((\"utils.py\" 318) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 312) get_local \"compute_utils_312\")) ((\"utils.py\" 318) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 313) get_local \"compute_utils_313\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 50) verify ((\"utils.py\" 50) eq ((\"utils.py\" 323) get_local \"utils_56\") ((\"utils.py\" 50) literal (intOrNat 256)))) ((\"utils.py\" 51) verify ((\"utils.py\" 51) eq ((\"utils.py\" 51) call_lambda ((\"smartpy/tests/utils.py\" 18) private \"int_of_bytes\") ((\"utils.py\" 51) literal (bytes \"0x0100\"))) ((\"utils.py\" 51) literal (intOrNat 256)))) ((\"smartpy_utils.py\" 241) define_local \"utils_86\" ((\"smartpy_utils.py\" 241) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 242) define_local \"utils_87\" ((\"smartpy_utils.py\" 242) list ) True) ((\"smartpy_utils.py\" 243) for_group \"utils_88\" ((\"smartpy_utils.py\" 243) range ((\"smartpy_utils.py\" 243) literal (intOrNat 0)) ((\"smartpy_utils.py\" 243) size ((\"smartpy_utils.py\" 243) literal (string \"a b\"))) ((\"smartpy_utils.py\" 243) literal (intOrNat 1))) (((\"smartpy_utils.py\" 244) if_block ((\"smartpy_utils.py\" 244) eq ((\"smartpy_utils.py\" 244) open_variant ((\"smartpy_utils.py\" 244) slice ((\"smartpy_utils.py\" 243) iter \"utils_88\") ((\"smartpy_utils.py\" 244) literal (intOrNat 1)) ((\"smartpy_utils.py\" 244) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 244) literal (string \" \"))) (((\"smartpy_utils.py\" 245) set ((\"smartpy_utils.py\" 245) get_local \"utils_87\") ((\"smartpy_utils.py\" 245) cons ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) slice ((\"smartpy_utils.py\" 245) get_local \"utils_86\") ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) is_nat ((\"smartpy_utils.py\" 245) sub ((\"smartpy_utils.py\" 243) iter \"utils_88\") ((\"smartpy_utils.py\" 245) get_local \"utils_86\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) get_local \"utils_87\"))) ((\"smartpy_utils.py\" 246) set ((\"\" -1) get_local \"utils_86\") ((\"smartpy_utils.py\" 246) add ((\"smartpy_utils.py\" 243) iter \"utils_88\") ((\"smartpy_utils.py\" 246) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 247) if_block ((\"smartpy_utils.py\" 247) gt ((\"smartpy_utils.py\" 247) size ((\"smartpy_utils.py\" 247) literal (string \"a b\"))) ((\"smartpy_utils.py\" 247) literal (intOrNat 0))) (((\"smartpy_utils.py\" 248) set ((\"smartpy_utils.py\" 248) get_local \"utils_87\") ((\"smartpy_utils.py\" 248) cons ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) slice ((\"smartpy_utils.py\" 248) get_local \"utils_86\") ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) is_nat ((\"smartpy_utils.py\" 248) sub ((\"smartpy_utils.py\" 248) size ((\"smartpy_utils.py\" 248) literal (string \"a b\"))) ((\"smartpy_utils.py\" 248) get_local \"utils_86\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) literal (string \"a b\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) get_local \"utils_87\"))))) ((\"utils.py\" 53) verify ((\"utils.py\" 53) eq ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"smartpy_utils.py\" 249) rev ((\"smartpy_utils.py\" 249) get_local \"utils_87\")) (unknown 172))) ((\"utils.py\" 53) pack ((\"utils.py\" 53) type_annotation ((\"utils.py\" 53) list ((\"utils.py\" 53) literal (string \"a\")) ((\"utils.py\" 53) literal (string \"b\"))) (unknown 172))))) ((\"smartpy_utils.py\" 241) define_local \"utils_89\" ((\"smartpy_utils.py\" 241) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 242) define_local \"utils_90\" ((\"smartpy_utils.py\" 242) list ) True) ((\"smartpy_utils.py\" 243) for_group \"utils_91\" ((\"smartpy_utils.py\" 243) range ((\"smartpy_utils.py\" 243) literal (intOrNat 0)) ((\"smartpy_utils.py\" 243) size ((\"smartpy_utils.py\" 243) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 243) literal (intOrNat 1))) (((\"smartpy_utils.py\" 244) if_block ((\"smartpy_utils.py\" 244) eq ((\"smartpy_utils.py\" 244) open_variant ((\"smartpy_utils.py\" 244) slice ((\"smartpy_utils.py\" 243) iter \"utils_91\") ((\"smartpy_utils.py\" 244) literal (intOrNat 1)) ((\"smartpy_utils.py\" 244) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 244) literal (string \",\"))) (((\"smartpy_utils.py\" 245) set ((\"smartpy_utils.py\" 245) get_local \"utils_90\") ((\"smartpy_utils.py\" 245) cons ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) slice ((\"smartpy_utils.py\" 245) get_local \"utils_89\") ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) is_nat ((\"smartpy_utils.py\" 245) sub ((\"smartpy_utils.py\" 243) iter \"utils_91\") ((\"smartpy_utils.py\" 245) get_local \"utils_89\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) get_local \"utils_90\"))) ((\"smartpy_utils.py\" 246) set ((\"\" -1) get_local \"utils_89\") ((\"smartpy_utils.py\" 246) add ((\"smartpy_utils.py\" 243) iter \"utils_91\") ((\"smartpy_utils.py\" 246) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 247) if_block ((\"smartpy_utils.py\" 247) gt ((\"smartpy_utils.py\" 247) size ((\"smartpy_utils.py\" 247) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 247) literal (intOrNat 0))) (((\"smartpy_utils.py\" 248) set ((\"smartpy_utils.py\" 248) get_local \"utils_90\") ((\"smartpy_utils.py\" 248) cons ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) slice ((\"smartpy_utils.py\" 248) get_local \"utils_89\") ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) is_nat ((\"smartpy_utils.py\" 248) sub ((\"smartpy_utils.py\" 248) size ((\"smartpy_utils.py\" 248) literal (string \"b,a\"))) ((\"smartpy_utils.py\" 248) get_local \"utils_89\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) literal (string \"b,a\"))) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) get_local \"utils_90\"))))) ((\"utils.py\" 54) verify ((\"utils.py\" 54) eq ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"smartpy_utils.py\" 249) rev ((\"smartpy_utils.py\" 249) get_local \"utils_90\")) (unknown 175))) ((\"utils.py\" 54) pack ((\"utils.py\" 54) type_annotation ((\"utils.py\" 54) list ((\"utils.py\" 54) literal (string \"b\")) ((\"utils.py\" 54) literal (string \"a\"))) (unknown 175))))) ((\"utils.py\" 55) verify ((\"utils.py\" 55) eq ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) call_lambda ((\"smartpy/tests/utils.py\" 22) private \"string_split\") ((\"utils.py\" 55) record (separator ((\"utils.py\" 55) literal (string \",,\"))) (text ((\"utils.py\" 55) literal (string \"a,b\"))))) (unknown 176))) ((\"utils.py\" 55) pack ((\"utils.py\" 55) type_annotation ((\"utils.py\" 55) list ((\"utils.py\" 55) literal (string \"a,b\"))) (unknown 176))))) ((\"utils.py\" 57) verify ((\"utils.py\" 57) eq ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"a\")) ((\"smartpy_utils.py\" 204) literal (string \"abc\"))) ((\"utils.py\" 57) literal (bool True)))) ((\"utils.py\" 58) verify ((\"utils.py\" 58) eq ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"b\")) ((\"smartpy_utils.py\" 204) literal (string \"abc\"))) ((\"utils.py\" 58) literal (bool False)))) ((\"utils.py\" 59) verify ((\"utils.py\" 59) eq ((\"utils.py\" 59) call_lambda ((\"smartpy/tests/utils.py\" 26) private \"string_starts_with\") ((\"utils.py\" 59) record (prefix ((\"utils.py\" 59) literal (string \"a\"))) (text ((\"utils.py\" 59) literal (string \"abc\"))))) ((\"utils.py\" 59) literal (bool True)))) ((\"utils.py\" 61) verify ((\"utils.py\" 61) eq ((\"smartpy_utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 145) literal (string \"abc\")) ((\"smartpy_utils.py\" 145) literal (string \"c\"))) ((\"utils.py\" 61) literal (bool True)))) ((\"utils.py\" 62) verify ((\"utils.py\" 62) eq ((\"smartpy_utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 145) literal (string \"abc\")) ((\"smartpy_utils.py\" 145) literal (string \"b\"))) ((\"utils.py\" 62) literal (bool False)))) ((\"utils.py\" 63) verify ((\"utils.py\" 63) eq ((\"utils.py\" 63) call_lambda ((\"smartpy/tests/utils.py\" 30) private \"string_ends_with\") ((\"utils.py\" 63) record (postfix ((\"utils.py\" 63) literal (string \"c\"))) (text ((\"utils.py\" 63) literal (string \"abc\"))))) ((\"utils.py\" 63) literal (bool True)))) ((\"smartpy_utils.py\" 83) define_local \"utils_92_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_93_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3)) ((\"smartpy_utils.py\" 84) literal (intOrNat 4)) ((\"smartpy_utils.py\" 84) literal (intOrNat 5))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_92_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_93_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_92_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_93_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_92_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_93_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_92_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_93_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)) ((\"smartpy_utils.py\" 90) literal (intOrNat 4)) ((\"smartpy_utils.py\" 90) literal (intOrNat 5)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_94_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_95_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_96_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_95_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_97_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_98_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_92_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_96_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_95_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_95_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_96_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_96_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_95_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_94_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_97_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_98_x\") \"value\"))))))))) ((\"utils.py\" 65) verify ((\"utils.py\" 65) eq ((\"smartpy_utils.py\" 112) get_local \"utils_94_result\") ((\"utils.py\" 65) literal (intOrNat 3)))) ((\"smartpy_utils.py\" 83) define_local \"utils_99_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_100_x\" ((\"smartpy_utils.py\" 84) list ((\"smartpy_utils.py\" 84) literal (intOrNat 1)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 2)) ((\"smartpy_utils.py\" 84) literal (intOrNat 3))) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_99_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_100_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_99_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_100_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_99_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_100_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_99_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_100_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90i\" ((\"smartpy_utils.py\" 90) size ((\"smartpy_utils.py\" 90) list ((\"smartpy_utils.py\" 90) literal (intOrNat 1)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 2)) ((\"smartpy_utils.py\" 90) literal (intOrNat 3)))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_101_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_102_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_103_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_102_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90i\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_104_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_105_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_99_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_103_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_102_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_102_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_103_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_103_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_102_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_101_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_104_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_105_x\") \"value\"))))))))) ((\"utils.py\" 66) verify ((\"utils.py\" 66) eq ((\"smartpy_utils.py\" 112) get_local \"utils_101_result\") ((\"utils.py\" 66) literal (intOrNat 2)))) ((\"utils.py\" 67) verify ((\"utils.py\" 67) eq ((\"utils.py\" 67) call_lambda ((\"smartpy/tests/utils.py\" 38) private \"math_median\") ((\"utils.py\" 67) list ((\"utils.py\" 67) literal (intOrNat 1)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 2)) ((\"utils.py\" 67) literal (intOrNat 5)))) ((\"utils.py\" 67) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 131) verify ((\"smartpy_utils.py\" 131) literal (bool True)) ((\"smartpy_utils.py\" 131) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 133) define_local \"utils_106_bytes\" ((\"smartpy_utils.py\" 133) literal (bytes \"0x\")) True) ((\"smartpy_utils.py\" 134) define_local \"utils_107_value\" ((\"smartpy_utils.py\" 134) literal (intOrNat 54)) True) ((\"smartpy_utils.py\" 135) while_block ((\"smartpy_utils.py\" 135) neq ((\"smartpy_utils.py\" 135) get_local \"utils_107_value\") ((\"smartpy_utils.py\" 135) literal (intOrNat 0))) (((\"smartpy_utils.py\" 136) set ((\"\" -1) get_local \"utils_106_bytes\") ((\"smartpy_utils.py\" 136) add ((\"smartpy_utils.py\" 126) open_variant ((\"smartpy_utils.py\" 126) slice ((\"smartpy_utils.py\" 126) literal (intOrNat 6)) ((\"smartpy_utils.py\" 126) literal (intOrNat 1)) ((\"smartpy_utils.py\" 126) pack ((\"smartpy_utils.py\" 126) MUL ((\"smartpy_utils.py\" 126) to_int ((\"smartpy_utils.py\" 136) get_local \"utils_107_value\")) ((\"smartpy_utils.py\" 126) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 136) get_local \"utils_106_bytes\"))) ((\"smartpy_utils.py\" 137) set ((\"\" -1) get_local \"utils_107_value\") ((\"smartpy_utils.py\" 137) lsr ((\"smartpy_utils.py\" 137) get_local \"utils_107_value\") ((\"smartpy_utils.py\" 137) literal (intOrNat 8)))))) ((\"utils.py\" 69) verify ((\"utils.py\" 69) eq ((\"smartpy_utils.py\" 139) get_local \"utils_106_bytes\") ((\"utils.py\" 69) literal (bytes \"0x36\")))) ((\"utils.py\" 70) verify ((\"utils.py\" 70) eq ((\"smartpy_utils.py\" 122) open_variant ((\"smartpy_utils.py\" 122) slice ((\"smartpy_utils.py\" 122) literal (intOrNat 6)) ((\"smartpy_utils.py\" 122) open_variant ((\"smartpy_utils.py\" 122) is_nat ((\"smartpy_utils.py\" 122) sub ((\"smartpy_utils.py\" 122) size ((\"smartpy_utils.py\" 117) pack ((\"smartpy_utils.py\" 117) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"smartpy_utils.py\" 122) literal (intOrNat 6)))) \"Some\" \"None\") ((\"smartpy_utils.py\" 117) pack ((\"smartpy_utils.py\" 117) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"smartpy_utils.py\" 122) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 70) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"smartpy_utils.py\" 131) verify ((\"smartpy_utils.py\" 131) lt ((\"smartpy_utils.py\" 275) size ((\"utils.py\" 71) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) ((\"smartpy_utils.py\" 131) literal (intOrNat 28948022309329048855892746252171976963317496166410141009864396001978282409984))) ((\"smartpy_utils.py\" 131) literal (string \"NUMBER_TOO_BIG\"))) ((\"smartpy_utils.py\" 133) define_local \"utils_108_bytes\" ((\"smartpy_utils.py\" 133) literal (bytes \"0x\")) True) ((\"smartpy_utils.py\" 134) define_local \"utils_109_value\" ((\"smartpy_utils.py\" 275) size ((\"utils.py\" 71) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) True) ((\"smartpy_utils.py\" 135) while_block ((\"smartpy_utils.py\" 135) neq ((\"smartpy_utils.py\" 135) get_local \"utils_109_value\") ((\"smartpy_utils.py\" 135) literal (intOrNat 0))) (((\"smartpy_utils.py\" 136) set ((\"\" -1) get_local \"utils_108_bytes\") ((\"smartpy_utils.py\" 136) add ((\"smartpy_utils.py\" 126) open_variant ((\"smartpy_utils.py\" 126) slice ((\"smartpy_utils.py\" 126) literal (intOrNat 6)) ((\"smartpy_utils.py\" 126) literal (intOrNat 1)) ((\"smartpy_utils.py\" 126) pack ((\"smartpy_utils.py\" 126) MUL ((\"smartpy_utils.py\" 126) to_int ((\"smartpy_utils.py\" 136) get_local \"utils_109_value\")) ((\"smartpy_utils.py\" 126) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 136) get_local \"utils_108_bytes\"))) ((\"smartpy_utils.py\" 137) set ((\"\" -1) get_local \"utils_109_value\") ((\"smartpy_utils.py\" 137) lsr ((\"smartpy_utils.py\" 137) get_local \"utils_109_value\") ((\"smartpy_utils.py\" 137) literal (intOrNat 8)))))) ((\"smartpy_utils.py\" 275) define_local \"lengthBytes\" ((\"smartpy_utils.py\" 139) get_local \"utils_108_bytes\") True) ((\"smartpy_utils.py\" 276) while_block ((\"smartpy_utils.py\" 276) lt ((\"smartpy_utils.py\" 276) size ((\"smartpy_utils.py\" 276) get_local \"lengthBytes\")) ((\"smartpy_utils.py\" 276) literal (intOrNat 4))) (((\"smartpy_utils.py\" 277) set ((\"\" -1) get_local \"lengthBytes\") ((\"smartpy_utils.py\" 277) add ((\"smartpy_utils.py\" 277) literal (bytes \"0x00\")) ((\"smartpy_utils.py\" 277) get_local \"lengthBytes\"))))) ((\"utils.py\" 71) verify ((\"utils.py\" 71) eq ((\"smartpy_utils.py\" 284) open_variant ((\"smartpy_utils.py\" 284) unpack ((\"smartpy_utils.py\" 283) concat ((\"smartpy_utils.py\" 283) list ((\"smartpy_utils.py\" 283) literal (bytes \"0x05\")) ((\"smartpy_utils.py\" 283) literal (bytes \"0x01\")) ((\"smartpy_utils.py\" 283) get_local \"lengthBytes\") ((\"utils.py\" 71) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"smartpy_utils.py\" 284) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 71) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 73) verify ((\"utils.py\" 73) eq ((\"smartpy_utils.py\" 329) and ((\"smartpy_utils.py\" 329) ge ((\"smartpy_utils.py\" 329) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 73) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"smartpy_utils.py\" 329) le ((\"smartpy_utils.py\" 329) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 73) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 73) literal (bool False)))) ((\"utils.py\" 74) verify ((\"smartpy_utils.py\" 329) and ((\"smartpy_utils.py\" 329) ge ((\"smartpy_utils.py\" 329) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 74) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"smartpy_utils.py\" 329) le ((\"smartpy_utils.py\" 329) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 74) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"\" -1) lambda 0 None False None \"\" (((\"smartpy_utils.py\" 309) define_local \"compute_smartpy_utils_309\" ((\"smartpy_utils.py\" 309) size ((\"\" -1) lambda_params 0 \"\" (unknown 131))) True) ((\"smartpy_utils.py\" 310) define_local \"utils_56\" ((\"smartpy_utils.py\" 310) literal (nat 0)) True) ((\"smartpy_utils.py\" 311) for_group \"utils_57\" ((\"smartpy_utils.py\" 311) range ((\"smartpy_utils.py\" 311) literal (intOrNat 0)) ((\"smartpy_utils.py\" 309) get_local \"compute_smartpy_utils_309\") ((\"smartpy_utils.py\" 311) literal (intOrNat 1))) (((\"smartpy_utils.py\" 312) define_local \"compute_smartpy_utils_312\" ((\"smartpy_utils.py\" 312) open_variant ((\"smartpy_utils.py\" 312) slice ((\"smartpy_utils.py\" 311) iter \"utils_57\") ((\"smartpy_utils.py\" 312) literal (intOrNat 1)) ((\"\" -1) lambda_params 0 \"\" (unknown 131))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 313) define_local \"compute_smartpy_utils_313\" ((\"smartpy_utils.py\" 313) mul_homo ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 309) get_local \"compute_smartpy_utils_309\") ((\"smartpy_utils.py\" 313) add ((\"smartpy_utils.py\" 311) iter \"utils_57\") ((\"smartpy_utils.py\" 313) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 313) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 319) set ((\"\" -1) get_local \"utils_56\") ((\"smartpy_utils.py\" 319) add ((\"smartpy_utils.py\" 319) get_local \"utils_56\") ((\"smartpy_utils.py\" 319) mul_homo ((\"smartpy_utils.py\" 319) open_variant ((\"smartpy_utils.py\" 319) is_nat ((\"smartpy_utils.py\" 320) to_int ((\"smartpy_utils.py\" 320) open_variant ((\"smartpy_utils.py\" 320) unpack ((\"smartpy_utils.py\" 318) add ((\"smartpy_utils.py\" 318) add ((\"smartpy_utils.py\" 318) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 312) get_local \"compute_smartpy_utils_312\")) ((\"smartpy_utils.py\" 318) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 313) get_local \"compute_smartpy_utils_313\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 19) result ((\"smartpy_utils.py\" 323) get_local \"utils_56\"))))) (int_of_string ((\"\" -1) lambda 1 None False None \"\" (((\"smartpy_utils.py\" 294) define_local \"utils_58\" ((\"\" -1) lambda_params 1 \"\" (unknown 136)) True) ((\"smartpy_utils.py\" 295) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"\" -1) lambda_params 1 \"\" (unknown 136))) (((\"smartpy_utils.py\" 296) set ((\"\" -1) get_local \"utils_58\") ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) slice ((\"smartpy_utils.py\" 296) literal (intOrNat 1)) ((\"smartpy_utils.py\" 296) open_variant ((\"smartpy_utils.py\" 296) is_nat ((\"smartpy_utils.py\" 296) sub ((\"smartpy_utils.py\" 296) size ((\"\" -1) lambda_params 1 \"\" (unknown 136))) ((\"smartpy_utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"\" -1) lambda_params 1 \"\" (unknown 136))) \"Some\" ((\"smartpy_utils.py\" 296) literal (string \"\")))))) ((\"smartpy_utils.py\" 298) define_local \"utils_59\" ((\"smartpy_utils.py\" 298) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 299) for_group \"utils_60\" ((\"smartpy_utils.py\" 299) range ((\"smartpy_utils.py\" 299) literal (intOrNat 0)) ((\"smartpy_utils.py\" 299) size ((\"smartpy_utils.py\" 299) get_local \"utils_58\")) ((\"smartpy_utils.py\" 299) literal (intOrNat 1))) (((\"smartpy_utils.py\" 300) set ((\"\" -1) get_local \"utils_59\") ((\"smartpy_utils.py\" 300) add ((\"smartpy_utils.py\" 300) mul_homo ((\"smartpy_utils.py\" 300) literal (intOrNat 10)) ((\"smartpy_utils.py\" 300) get_local \"utils_59\")) ((\"smartpy_utils.py\" 300) get_item ((\"smartpy_utils.py\" 291) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"smartpy_utils.py\" 300) open_variant ((\"smartpy_utils.py\" 300) slice ((\"smartpy_utils.py\" 299) iter \"utils_60\") ((\"smartpy_utils.py\" 300) literal (intOrNat 1)) ((\"smartpy_utils.py\" 300) get_local \"utils_58\")) \"Some\" \"None\")))))) ((\"smartpy_utils.py\" 302) if_block ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"smartpy_utils.py\" 204) literal (string \"-\")) ((\"\" -1) lambda_params 1 \"\" (unknown 136))) (((\"smartpy_utils.py\" 303) set ((\"\" -1) get_local \"utils_59\") ((\"smartpy_utils.py\" 303) mul_homo ((\"smartpy_utils.py\" 303) get_local \"utils_59\") ((\"smartpy_utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 15) result ((\"smartpy_utils.py\" 305) get_local \"utils_59\"))))) (math_median ((\"\" -1) lambda 2 None False None \"\" (((\"smartpy_utils.py\" 83) define_local \"utils_61_hist\" ((\"smartpy_utils.py\" 83) map ) True) ((\"smartpy_utils.py\" 84) for_group \"utils_62_x\" ((\"\" -1) lambda_params 2 \"\" (unknown 139)) (((\"smartpy_utils.py\" 85) if_block ((\"smartpy_utils.py\" 85) contains ((\"smartpy_utils.py\" 85) get_local \"utils_61_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_62_x\")) (((\"smartpy_utils.py\" 86) set ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_61_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_62_x\")) ((\"smartpy_utils.py\" 86) add ((\"smartpy_utils.py\" 86) get_item ((\"smartpy_utils.py\" 86) get_local \"utils_61_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_62_x\")) ((\"smartpy_utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"smartpy_utils.py\" 88) set ((\"smartpy_utils.py\" 88) get_item ((\"smartpy_utils.py\" 88) get_local \"utils_61_hist\") ((\"smartpy_utils.py\" 84) iter \"utils_62_x\")) ((\"smartpy_utils.py\" 88) literal (intOrNat 1))))))) ((\"smartpy_utils.py\" 90) define_local \"compute_smartpy_utils_90\" ((\"smartpy_utils.py\" 90) size ((\"\" -1) lambda_params 2 \"\" (unknown 139))) True) ((\"smartpy_utils.py\" 91) define_local \"utils_63_result\" ((\"smartpy_utils.py\" 91) literal (nat 0)) True) ((\"smartpy_utils.py\" 92) define_local \"utils_64_half\" ((\"smartpy_utils.py\" 92) div ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\") ((\"smartpy_utils.py\" 92) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 93) define_local \"utils_65_use_average\" ((\"smartpy_utils.py\" 93) eq ((\"smartpy_utils.py\" 93) mul_homo ((\"smartpy_utils.py\" 93) get_local \"utils_64_half\") ((\"smartpy_utils.py\" 93) literal (intOrNat 2))) ((\"smartpy_utils.py\" 90) get_local \"compute_smartpy_utils_90\")) True) ((\"smartpy_utils.py\" 94) define_local \"utils_66_i\" ((\"smartpy_utils.py\" 94) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 95) for_group \"utils_67_x\" ((\"smartpy_utils.py\" 95) items ((\"smartpy_utils.py\" 95) get_local \"utils_61_hist\")) (((\"smartpy_utils.py\" 96) if_block ((\"smartpy_utils.py\" 96) get_local \"utils_65_use_average\") (((\"smartpy_utils.py\" 97) if_block ((\"smartpy_utils.py\" 97) lt ((\"smartpy_utils.py\" 97) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 97) get_local \"utils_64_half\")) (((\"smartpy_utils.py\" 98) set ((\"\" -1) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"key\")) ((\"smartpy_utils.py\" 99) set ((\"\" -1) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 99) add ((\"smartpy_utils.py\" 99) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"value\"))) ((\"smartpy_utils.py\" 100) if_block ((\"smartpy_utils.py\" 100) gt ((\"smartpy_utils.py\" 100) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 100) get_local \"utils_64_half\")) (((\"smartpy_utils.py\" 101) set ((\"\" -1) get_local \"utils_65_use_average\") ((\"smartpy_utils.py\" 101) literal (bool False))))))) (else_block (((\"smartpy_utils.py\" 103) set ((\"\" -1) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 103) add ((\"smartpy_utils.py\" 103) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"key\"))) ((\"smartpy_utils.py\" 104) set ((\"\" -1) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 104) div ((\"smartpy_utils.py\" 104) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 104) literal (intOrNat 2)))) ((\"smartpy_utils.py\" 105) set ((\"\" -1) get_local \"utils_65_use_average\") ((\"smartpy_utils.py\" 105) literal (bool False))) ((\"smartpy_utils.py\" 106) set ((\"\" -1) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 106) add ((\"smartpy_utils.py\" 106) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"value\"))))))) (else_block (((\"smartpy_utils.py\" 108) if_block ((\"smartpy_utils.py\" 108) le ((\"smartpy_utils.py\" 108) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 108) get_local \"utils_64_half\")) (((\"smartpy_utils.py\" 109) set ((\"\" -1) get_local \"utils_63_result\") ((\"smartpy_utils.py\" 98) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"key\")) ((\"smartpy_utils.py\" 110) set ((\"\" -1) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 110) add ((\"smartpy_utils.py\" 110) get_local \"utils_66_i\") ((\"smartpy_utils.py\" 99) attr ((\"smartpy_utils.py\" 95) iter \"utils_67_x\") \"value\"))))))))) ((\"utils.py\" 39) result ((\"smartpy_utils.py\" 112) get_local \"utils_63_result\"))))) (math_pow ((\"\" -1) lambda 3 None False None \"\" (((\"utils.py\" 35) result ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 35) attr ((\"\" -1) lambda_params 3 \"\" (unknown 146)) \"exponent\") ((\"utils.py\" 35) attr ((\"\" -1) lambda_params 3 \"\" (unknown 146)) \"base\") ((\"smartpy_utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"\" -1) lambda 4 None False None \"\" (((\"utils.py\" 31) result ((\"smartpy_utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 31) attr ((\"\" -1) lambda_params 4 \"\" (unknown 147)) \"text\") ((\"utils.py\" 31) attr ((\"\" -1) lambda_params 4 \"\" (unknown 147)) \"postfix\")))))) (string_of_int ((\"\" -1) lambda 5 None False None \"\" (((\"smartpy_utils.py\" 256) define_local \"utils_68\" ((\"smartpy_utils.py\" 256) abs ((\"\" -1) lambda_params 5 \"\" (unknown 148))) True) ((\"smartpy_utils.py\" 257) define_local \"utils_69\" ((\"smartpy_utils.py\" 257) list ) True) ((\"smartpy_utils.py\" 259) if_block ((\"smartpy_utils.py\" 259) eq ((\"smartpy_utils.py\" 259) get_local \"utils_68\") ((\"smartpy_utils.py\" 259) literal (intOrNat 0))) (((\"smartpy_utils.py\" 260) set ((\"smartpy_utils.py\" 260) get_local \"utils_69\") ((\"smartpy_utils.py\" 260) cons ((\"smartpy_utils.py\" 260) literal (string \"0\")) ((\"smartpy_utils.py\" 260) get_local \"utils_69\"))))) ((\"smartpy_utils.py\" 261) while_block ((\"smartpy_utils.py\" 261) gt ((\"smartpy_utils.py\" 261) get_local \"utils_68\") ((\"smartpy_utils.py\" 261) literal (intOrNat 0))) (((\"smartpy_utils.py\" 262) set ((\"smartpy_utils.py\" 262) get_local \"utils_69\") ((\"smartpy_utils.py\" 262) cons ((\"smartpy_utils.py\" 262) get_item ((\"smartpy_utils.py\" 254) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"smartpy_utils.py\" 262) mod ((\"smartpy_utils.py\" 262) get_local \"utils_68\") ((\"smartpy_utils.py\" 262) literal (intOrNat 10)))) ((\"smartpy_utils.py\" 262) get_local \"utils_69\"))) ((\"smartpy_utils.py\" 263) set ((\"\" -1) get_local \"utils_68\") ((\"smartpy_utils.py\" 263) div ((\"smartpy_utils.py\" 263) get_local \"utils_68\") ((\"smartpy_utils.py\" 263) literal (intOrNat 10)))))) ((\"smartpy_utils.py\" 265) define_local \"utils_70\" ((\"smartpy_utils.py\" 265) concat ((\"smartpy_utils.py\" 265) get_local \"utils_69\")) True) ((\"smartpy_utils.py\" 266) if_block ((\"smartpy_utils.py\" 255) lt ((\"\" -1) lambda_params 5 \"\" (unknown 148)) ((\"smartpy_utils.py\" 255) literal (intOrNat 0))) (((\"smartpy_utils.py\" 267) set ((\"\" -1) get_local \"utils_70\") ((\"smartpy_utils.py\" 267) add ((\"smartpy_utils.py\" 267) literal (string \"-\")) ((\"smartpy_utils.py\" 267) get_local \"utils_70\"))))) ((\"utils.py\" 11) result ((\"smartpy_utils.py\" 269) get_local \"utils_70\"))))) (string_split ((\"\" -1) lambda 6 None False None \"\" (((\"smartpy_utils.py\" 241) define_local \"utils_71\" ((\"smartpy_utils.py\" 241) literal (intOrNat 0)) True) ((\"smartpy_utils.py\" 242) define_local \"utils_72\" ((\"smartpy_utils.py\" 242) list ) True) ((\"smartpy_utils.py\" 243) for_group \"utils_73\" ((\"smartpy_utils.py\" 243) range ((\"smartpy_utils.py\" 243) literal (intOrNat 0)) ((\"smartpy_utils.py\" 243) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 152)) \"text\")) ((\"smartpy_utils.py\" 243) literal (intOrNat 1))) (((\"smartpy_utils.py\" 244) if_block ((\"smartpy_utils.py\" 244) eq ((\"smartpy_utils.py\" 244) open_variant ((\"smartpy_utils.py\" 244) slice ((\"smartpy_utils.py\" 243) iter \"utils_73\") ((\"smartpy_utils.py\" 244) literal (intOrNat 1)) ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 152)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 152)) \"separator\")) (((\"smartpy_utils.py\" 245) set ((\"smartpy_utils.py\" 245) get_local \"utils_72\") ((\"smartpy_utils.py\" 245) cons ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) slice ((\"smartpy_utils.py\" 245) get_local \"utils_71\") ((\"smartpy_utils.py\" 245) open_variant ((\"smartpy_utils.py\" 245) is_nat ((\"smartpy_utils.py\" 245) sub ((\"smartpy_utils.py\" 243) iter \"utils_73\") ((\"smartpy_utils.py\" 245) get_local \"utils_71\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 152)) \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 245) get_local \"utils_72\"))) ((\"smartpy_utils.py\" 246) set ((\"\" -1) get_local \"utils_71\") ((\"smartpy_utils.py\" 246) add ((\"smartpy_utils.py\" 243) iter \"utils_73\") ((\"smartpy_utils.py\" 246) literal (intOrNat 1)))))))) ((\"smartpy_utils.py\" 247) if_block ((\"smartpy_utils.py\" 247) gt ((\"smartpy_utils.py\" 247) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 152)) \"text\")) ((\"smartpy_utils.py\" 247) literal (intOrNat 0))) (((\"smartpy_utils.py\" 248) set ((\"smartpy_utils.py\" 248) get_local \"utils_72\") ((\"smartpy_utils.py\" 248) cons ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) slice ((\"smartpy_utils.py\" 248) get_local \"utils_71\") ((\"smartpy_utils.py\" 248) open_variant ((\"smartpy_utils.py\" 248) is_nat ((\"smartpy_utils.py\" 248) sub ((\"smartpy_utils.py\" 248) size ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 152)) \"text\")) ((\"smartpy_utils.py\" 248) get_local \"utils_71\"))) \"Some\" \"None\") ((\"utils.py\" 23) attr ((\"\" -1) lambda_params 6 \"\" (unknown 152)) \"text\")) \"Some\" \"None\") ((\"smartpy_utils.py\" 248) get_local \"utils_72\"))))) ((\"utils.py\" 23) result ((\"smartpy_utils.py\" 249) rev ((\"smartpy_utils.py\" 249) get_local \"utils_72\")))))) (string_starts_with ((\"\" -1) lambda 7 None False None \"\" (((\"utils.py\" 27) result ((\"smartpy_utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 27) attr ((\"\" -1) lambda_params 7 \"\" (unknown 155)) \"prefix\") ((\"utils.py\" 27) attr ((\"\" -1) lambda_params 7 \"\" (unknown 155)) \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"\" -1) static_id 0)",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 },
 {
  "shortname": "UtilsTester2_compilation",
  "longname": "UtilsTester2_compilation",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"\" -1) static_id 0) \nstorage ()\nstorage_type ((unknown 2))\nentry_points ((test True None None None False None (\"smartpy/tests/utils.py\" 111) (((\"utils.py\" 256) define_local \"utils_74\" ((\"utils.py\" 256) literal (intOrNat 1)) True) ((\"utils.py\" 257) define_local \"utils_75\" ((\"utils.py\" 257) list ) True) ((\"utils.py\" 259) if_block ((\"utils.py\" 259) eq ((\"utils.py\" 259) get_local \"utils_74\") ((\"utils.py\" 259) literal (intOrNat 0))) (((\"utils.py\" 260) set ((\"utils.py\" 260) get_local \"utils_75\") ((\"utils.py\" 260) cons ((\"utils.py\" 260) literal (string \"0\")) ((\"utils.py\" 260) get_local \"utils_75\"))))) ((\"utils.py\" 261) while_block ((\"utils.py\" 261) gt ((\"utils.py\" 261) get_local \"utils_74\") ((\"utils.py\" 261) literal (intOrNat 0))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_75\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) get_item ((\"utils.py\" 254) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 262) mod ((\"utils.py\" 262) get_local \"utils_74\") ((\"utils.py\" 262) literal (intOrNat 10)))) ((\"utils.py\" 262) get_local \"utils_75\"))) ((\"utils.py\" 263) set ((\"\" -1) get_local \"utils_74\") ((\"utils.py\" 263) div ((\"utils.py\" 263) get_local \"utils_74\") ((\"utils.py\" 263) literal (intOrNat 10)))))) ((\"utils.py\" 265) define_local \"utils_76\" ((\"utils.py\" 265) concat ((\"utils.py\" 265) get_local \"utils_75\")) True) ((\"utils.py\" 266) if_block ((\"utils.py\" 266) literal (bool True)) (((\"utils.py\" 267) set ((\"\" -1) get_local \"utils_76\") ((\"utils.py\" 267) add ((\"utils.py\" 267) literal (string \"-\")) ((\"utils.py\" 267) get_local \"utils_76\"))))) ((\"utils.py\" 112) verify ((\"utils.py\" 112) eq ((\"utils.py\" 269) get_local \"utils_76\") ((\"utils.py\" 112) literal (string \"-1\")))) ((\"utils.py\" 256) define_local \"utils_77\" ((\"utils.py\" 256) literal (intOrNat 1)) True) ((\"utils.py\" 257) define_local \"utils_78\" ((\"utils.py\" 257) list ) True) ((\"utils.py\" 259) if_block ((\"utils.py\" 259) eq ((\"utils.py\" 259) get_local \"utils_77\") ((\"utils.py\" 259) literal (intOrNat 0))) (((\"utils.py\" 260) set ((\"utils.py\" 260) get_local \"utils_78\") ((\"utils.py\" 260) cons ((\"utils.py\" 260) literal (string \"0\")) ((\"utils.py\" 260) get_local \"utils_78\"))))) ((\"utils.py\" 261) while_block ((\"utils.py\" 261) gt ((\"utils.py\" 261) get_local \"utils_77\") ((\"utils.py\" 261) literal (intOrNat 0))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_78\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) get_item ((\"utils.py\" 254) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 262) mod ((\"utils.py\" 262) get_local \"utils_77\") ((\"utils.py\" 262) literal (intOrNat 10)))) ((\"utils.py\" 262) get_local \"utils_78\"))) ((\"utils.py\" 263) set ((\"\" -1) get_local \"utils_77\") ((\"utils.py\" 263) div ((\"utils.py\" 263) get_local \"utils_77\") ((\"utils.py\" 263) literal (intOrNat 10)))))) ((\"utils.py\" 265) define_local \"utils_79\" ((\"utils.py\" 265) concat ((\"utils.py\" 265) get_local \"utils_78\")) True) ((\"utils.py\" 266) if_block ((\"utils.py\" 266) literal (bool False)) (((\"utils.py\" 267) set ((\"\" -1) get_local \"utils_79\") ((\"utils.py\" 267) add ((\"utils.py\" 267) literal (string \"-\")) ((\"utils.py\" 267) get_local \"utils_79\"))))) ((\"utils.py\" 113) verify ((\"utils.py\" 113) eq ((\"utils.py\" 269) get_local \"utils_79\") ((\"utils.py\" 113) literal (string \"1\")))) ((\"utils.py\" 114) verify ((\"utils.py\" 114) eq ((\"utils.py\" 114) call_lambda ((\"smartpy/tests/utils.py\" 79) private \"string_of_int\") ((\"utils.py\" 114) literal (intOrNat 2))) ((\"utils.py\" 114) literal (string \"2\")))) ((\"utils.py\" 294) define_local \"utils_80\" ((\"utils.py\" 294) literal (string \"1\")) True) ((\"utils.py\" 295) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 204) literal (string \"1\"))) (((\"utils.py\" 296) set ((\"\" -1) get_local \"utils_80\") ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) slice ((\"utils.py\" 296) literal (intOrNat 1)) ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) is_nat ((\"utils.py\" 296) sub ((\"utils.py\" 296) size ((\"utils.py\" 296) literal (string \"1\"))) ((\"utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 296) literal (string \"1\"))) \"Some\" ((\"utils.py\" 296) literal (string \"\")))))) ((\"utils.py\" 298) define_local \"utils_81\" ((\"utils.py\" 298) literal (intOrNat 0)) True) ((\"utils.py\" 299) for_group \"utils_82\" ((\"utils.py\" 299) range ((\"utils.py\" 299) literal (intOrNat 0)) ((\"utils.py\" 299) size ((\"utils.py\" 299) get_local \"utils_80\")) ((\"utils.py\" 299) literal (intOrNat 1))) (((\"utils.py\" 300) set ((\"\" -1) get_local \"utils_81\") ((\"utils.py\" 300) add ((\"utils.py\" 300) mul_homo ((\"utils.py\" 300) literal (intOrNat 10)) ((\"utils.py\" 300) get_local \"utils_81\")) ((\"utils.py\" 300) get_item ((\"utils.py\" 291) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 300) open_variant ((\"utils.py\" 300) slice ((\"utils.py\" 299) iter \"utils_82\") ((\"utils.py\" 300) literal (intOrNat 1)) ((\"utils.py\" 300) get_local \"utils_80\")) \"Some\" \"None\")))))) ((\"utils.py\" 302) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 204) literal (string \"1\"))) (((\"utils.py\" 303) set ((\"\" -1) get_local \"utils_81\") ((\"utils.py\" 303) mul_homo ((\"utils.py\" 303) get_local \"utils_81\") ((\"utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 116) verify ((\"utils.py\" 116) eq ((\"utils.py\" 305) get_local \"utils_81\") ((\"utils.py\" 116) literal (intOrNat 1)))) ((\"utils.py\" 294) define_local \"utils_83\" ((\"utils.py\" 294) literal (string \"-1\")) True) ((\"utils.py\" 295) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 204) literal (string \"-1\"))) (((\"utils.py\" 296) set ((\"\" -1) get_local \"utils_83\") ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) slice ((\"utils.py\" 296) literal (intOrNat 1)) ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) is_nat ((\"utils.py\" 296) sub ((\"utils.py\" 296) size ((\"utils.py\" 296) literal (string \"-1\"))) ((\"utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"utils.py\" 296) literal (string \"-1\"))) \"Some\" ((\"utils.py\" 296) literal (string \"\")))))) ((\"utils.py\" 298) define_local \"utils_84\" ((\"utils.py\" 298) literal (intOrNat 0)) True) ((\"utils.py\" 299) for_group \"utils_85\" ((\"utils.py\" 299) range ((\"utils.py\" 299) literal (intOrNat 0)) ((\"utils.py\" 299) size ((\"utils.py\" 299) get_local \"utils_83\")) ((\"utils.py\" 299) literal (intOrNat 1))) (((\"utils.py\" 300) set ((\"\" -1) get_local \"utils_84\") ((\"utils.py\" 300) add ((\"utils.py\" 300) mul_homo ((\"utils.py\" 300) literal (intOrNat 10)) ((\"utils.py\" 300) get_local \"utils_84\")) ((\"utils.py\" 300) get_item ((\"utils.py\" 291) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 300) open_variant ((\"utils.py\" 300) slice ((\"utils.py\" 299) iter \"utils_85\") ((\"utils.py\" 300) literal (intOrNat 1)) ((\"utils.py\" 300) get_local \"utils_83\")) \"Some\" \"None\")))))) ((\"utils.py\" 302) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"utils.py\" 204) literal (string \"-1\"))) (((\"utils.py\" 303) set ((\"\" -1) get_local \"utils_84\") ((\"utils.py\" 303) mul_homo ((\"utils.py\" 303) get_local \"utils_84\") ((\"utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 117) verify ((\"utils.py\" 117) eq ((\"utils.py\" 305) get_local \"utils_84\") ((\"utils.py\" 117) literal (int -1)))) ((\"utils.py\" 118) verify ((\"utils.py\" 118) eq ((\"utils.py\" 118) call_lambda ((\"smartpy/tests/utils.py\" 83) private \"int_of_string\") ((\"utils.py\" 118) literal (string \"2\"))) ((\"utils.py\" 118) literal (intOrNat 2)))) ((\"utils.py\" 309) define_local \"compute_utils_309\" ((\"utils.py\" 309) size ((\"utils.py\" 119) literal (bytes \"0x0100\"))) True) ((\"utils.py\" 310) define_local \"utils_86\" ((\"utils.py\" 310) literal (nat 0)) True) ((\"utils.py\" 311) for_group \"utils_87\" ((\"utils.py\" 311) range ((\"utils.py\" 311) literal (intOrNat 0)) ((\"utils.py\" 309) get_local \"compute_utils_309\") ((\"utils.py\" 311) literal (intOrNat 1))) (((\"utils.py\" 312) define_local \"compute_utils_312\" ((\"utils.py\" 312) open_variant ((\"utils.py\" 312) slice ((\"utils.py\" 311) iter \"utils_87\") ((\"utils.py\" 312) literal (intOrNat 1)) ((\"utils.py\" 119) literal (bytes \"0x0100\"))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"utils.py\" 313) define_local \"compute_utils_313\" ((\"utils.py\" 313) mul_homo ((\"utils.py\" 313) open_variant ((\"utils.py\" 313) is_nat ((\"utils.py\" 313) sub ((\"utils.py\" 309) get_local \"compute_utils_309\") ((\"utils.py\" 313) add ((\"utils.py\" 311) iter \"utils_87\") ((\"utils.py\" 313) literal (intOrNat 1))))) \"Some\" \"None\") ((\"utils.py\" 313) literal (intOrNat 2))) True) ((\"utils.py\" 319) set ((\"\" -1) get_local \"utils_86\") ((\"utils.py\" 319) add ((\"utils.py\" 319) get_local \"utils_86\") ((\"utils.py\" 319) mul_homo ((\"utils.py\" 319) open_variant ((\"utils.py\" 319) is_nat ((\"utils.py\" 320) to_int ((\"utils.py\" 320) open_variant ((\"utils.py\" 320) unpack ((\"utils.py\" 318) add ((\"utils.py\" 318) add ((\"utils.py\" 318) literal (bytes \"0x050a00000020\")) ((\"utils.py\" 312) get_local \"compute_utils_312\")) ((\"utils.py\" 318) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 313) get_local \"compute_utils_313\") ((\"utils.py\" 9) literal (intOrNat 16)) ((\"utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 119) verify ((\"utils.py\" 119) eq ((\"utils.py\" 323) get_local \"utils_86\") ((\"utils.py\" 119) literal (intOrNat 256)))) ((\"utils.py\" 120) verify ((\"utils.py\" 120) eq ((\"utils.py\" 120) call_lambda ((\"smartpy/tests/utils.py\" 87) private \"int_of_bytes\") ((\"utils.py\" 120) literal (bytes \"0x0100\"))) ((\"utils.py\" 120) literal (intOrNat 256)))) ((\"utils.py\" 241) define_local \"utils_88\" ((\"utils.py\" 241) literal (intOrNat 0)) True) ((\"utils.py\" 242) define_local \"utils_89\" ((\"utils.py\" 242) list ) True) ((\"utils.py\" 243) for_group \"utils_90\" ((\"utils.py\" 243) range ((\"utils.py\" 243) literal (intOrNat 0)) ((\"utils.py\" 243) size ((\"utils.py\" 243) literal (string \"a b\"))) ((\"utils.py\" 243) literal (intOrNat 1))) (((\"utils.py\" 244) if_block ((\"utils.py\" 244) eq ((\"utils.py\" 244) open_variant ((\"utils.py\" 244) slice ((\"utils.py\" 243) iter \"utils_90\") ((\"utils.py\" 244) literal (intOrNat 1)) ((\"utils.py\" 244) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 244) literal (string \" \"))) (((\"utils.py\" 245) set ((\"utils.py\" 245) get_local \"utils_89\") ((\"utils.py\" 245) cons ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) slice ((\"utils.py\" 245) get_local \"utils_88\") ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) is_nat ((\"utils.py\" 245) sub ((\"utils.py\" 243) iter \"utils_90\") ((\"utils.py\" 245) get_local \"utils_88\"))) \"Some\" \"None\") ((\"utils.py\" 245) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 245) get_local \"utils_89\"))) ((\"utils.py\" 246) set ((\"\" -1) get_local \"utils_88\") ((\"utils.py\" 246) add ((\"utils.py\" 243) iter \"utils_90\") ((\"utils.py\" 246) literal (intOrNat 1)))))))) ((\"utils.py\" 247) if_block ((\"utils.py\" 247) gt ((\"utils.py\" 247) size ((\"utils.py\" 247) literal (string \"a b\"))) ((\"utils.py\" 247) literal (intOrNat 0))) (((\"utils.py\" 248) set ((\"utils.py\" 248) get_local \"utils_89\") ((\"utils.py\" 248) cons ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) slice ((\"utils.py\" 248) get_local \"utils_88\") ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) is_nat ((\"utils.py\" 248) sub ((\"utils.py\" 248) size ((\"utils.py\" 248) literal (string \"a b\"))) ((\"utils.py\" 248) get_local \"utils_88\"))) \"Some\" \"None\") ((\"utils.py\" 248) literal (string \"a b\"))) \"Some\" \"None\") ((\"utils.py\" 248) get_local \"utils_89\"))))) ((\"utils.py\" 122) verify ((\"utils.py\" 122) eq ((\"utils.py\" 122) pack ((\"utils.py\" 122) type_annotation ((\"utils.py\" 249) rev ((\"utils.py\" 249) get_local \"utils_89\")) (unknown 235))) ((\"utils.py\" 122) pack ((\"utils.py\" 122) type_annotation ((\"utils.py\" 122) list ((\"utils.py\" 122) literal (string \"a\")) ((\"utils.py\" 122) literal (string \"b\"))) (unknown 235))))) ((\"utils.py\" 241) define_local \"utils_91\" ((\"utils.py\" 241) literal (intOrNat 0)) True) ((\"utils.py\" 242) define_local \"utils_92\" ((\"utils.py\" 242) list ) True) ((\"utils.py\" 243) for_group \"utils_93\" ((\"utils.py\" 243) range ((\"utils.py\" 243) literal (intOrNat 0)) ((\"utils.py\" 243) size ((\"utils.py\" 243) literal (string \"b,a\"))) ((\"utils.py\" 243) literal (intOrNat 1))) (((\"utils.py\" 244) if_block ((\"utils.py\" 244) eq ((\"utils.py\" 244) open_variant ((\"utils.py\" 244) slice ((\"utils.py\" 243) iter \"utils_93\") ((\"utils.py\" 244) literal (intOrNat 1)) ((\"utils.py\" 244) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 244) literal (string \",\"))) (((\"utils.py\" 245) set ((\"utils.py\" 245) get_local \"utils_92\") ((\"utils.py\" 245) cons ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) slice ((\"utils.py\" 245) get_local \"utils_91\") ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) is_nat ((\"utils.py\" 245) sub ((\"utils.py\" 243) iter \"utils_93\") ((\"utils.py\" 245) get_local \"utils_91\"))) \"Some\" \"None\") ((\"utils.py\" 245) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 245) get_local \"utils_92\"))) ((\"utils.py\" 246) set ((\"\" -1) get_local \"utils_91\") ((\"utils.py\" 246) add ((\"utils.py\" 243) iter \"utils_93\") ((\"utils.py\" 246) literal (intOrNat 1)))))))) ((\"utils.py\" 247) if_block ((\"utils.py\" 247) gt ((\"utils.py\" 247) size ((\"utils.py\" 247) literal (string \"b,a\"))) ((\"utils.py\" 247) literal (intOrNat 0))) (((\"utils.py\" 248) set ((\"utils.py\" 248) get_local \"utils_92\") ((\"utils.py\" 248) cons ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) slice ((\"utils.py\" 248) get_local \"utils_91\") ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) is_nat ((\"utils.py\" 248) sub ((\"utils.py\" 248) size ((\"utils.py\" 248) literal (string \"b,a\"))) ((\"utils.py\" 248) get_local \"utils_91\"))) \"Some\" \"None\") ((\"utils.py\" 248) literal (string \"b,a\"))) \"Some\" \"None\") ((\"utils.py\" 248) get_local \"utils_92\"))))) ((\"utils.py\" 123) verify ((\"utils.py\" 123) eq ((\"utils.py\" 123) pack ((\"utils.py\" 123) type_annotation ((\"utils.py\" 249) rev ((\"utils.py\" 249) get_local \"utils_92\")) (unknown 238))) ((\"utils.py\" 123) pack ((\"utils.py\" 123) type_annotation ((\"utils.py\" 123) list ((\"utils.py\" 123) literal (string \"b\")) ((\"utils.py\" 123) literal (string \"a\"))) (unknown 238))))) ((\"utils.py\" 124) verify ((\"utils.py\" 124) eq ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 124) call_lambda ((\"smartpy/tests/utils.py\" 91) private \"string_split\") ((\"utils.py\" 124) record (separator ((\"utils.py\" 124) literal (string \",,\"))) (text ((\"utils.py\" 124) literal (string \"a,b\"))))) (unknown 239))) ((\"utils.py\" 124) pack ((\"utils.py\" 124) type_annotation ((\"utils.py\" 124) list ((\"utils.py\" 124) literal (string \"a,b\"))) (unknown 239))))) ((\"utils.py\" 126) verify ((\"utils.py\" 126) eq ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"a\")) ((\"utils.py\" 204) literal (string \"abc\"))) ((\"utils.py\" 126) literal (bool True)))) ((\"utils.py\" 127) verify ((\"utils.py\" 127) eq ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"b\")) ((\"utils.py\" 204) literal (string \"abc\"))) ((\"utils.py\" 127) literal (bool False)))) ((\"utils.py\" 128) verify ((\"utils.py\" 128) eq ((\"utils.py\" 128) call_lambda ((\"smartpy/tests/utils.py\" 95) private \"string_starts_with\") ((\"utils.py\" 128) record (prefix ((\"utils.py\" 128) literal (string \"a\"))) (text ((\"utils.py\" 128) literal (string \"abc\"))))) ((\"utils.py\" 128) literal (bool True)))) ((\"utils.py\" 130) verify ((\"utils.py\" 130) eq ((\"utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 145) literal (string \"abc\")) ((\"utils.py\" 145) literal (string \"c\"))) ((\"utils.py\" 130) literal (bool True)))) ((\"utils.py\" 131) verify ((\"utils.py\" 131) eq ((\"utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 145) literal (string \"abc\")) ((\"utils.py\" 145) literal (string \"b\"))) ((\"utils.py\" 131) literal (bool False)))) ((\"utils.py\" 132) verify ((\"utils.py\" 132) eq ((\"utils.py\" 132) call_lambda ((\"smartpy/tests/utils.py\" 99) private \"string_ends_with\") ((\"utils.py\" 132) record (postfix ((\"utils.py\" 132) literal (string \"c\"))) (text ((\"utils.py\" 132) literal (string \"abc\"))))) ((\"utils.py\" 132) literal (bool True)))) ((\"utils.py\" 83) define_local \"utils_94_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_95_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3)) ((\"utils.py\" 84) literal (intOrNat 4)) ((\"utils.py\" 84) literal (intOrNat 5))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_94_hist\") ((\"utils.py\" 84) iter \"utils_95_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_94_hist\") ((\"utils.py\" 84) iter \"utils_95_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_94_hist\") ((\"utils.py\" 84) iter \"utils_95_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_94_hist\") ((\"utils.py\" 84) iter \"utils_95_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)) ((\"utils.py\" 90) literal (intOrNat 4)) ((\"utils.py\" 90) literal (intOrNat 5)))) True) ((\"utils.py\" 91) define_local \"utils_96_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_97_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_98_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_97_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_99_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_100_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_94_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_98_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_99_i\") ((\"utils.py\" 97) get_local \"utils_97_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_96_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_100_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_99_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_99_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_100_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_99_i\") ((\"utils.py\" 100) get_local \"utils_97_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_98_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_96_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_96_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_100_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_96_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_96_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_98_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_99_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_99_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_100_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_99_i\") ((\"utils.py\" 108) get_local \"utils_97_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_96_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_100_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_99_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_99_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_100_x\") \"value\"))))))))) ((\"utils.py\" 134) verify ((\"utils.py\" 134) eq ((\"utils.py\" 112) get_local \"utils_96_result\") ((\"utils.py\" 134) literal (intOrNat 3)))) ((\"utils.py\" 83) define_local \"utils_101_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_102_x\" ((\"utils.py\" 84) list ((\"utils.py\" 84) literal (intOrNat 1)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 2)) ((\"utils.py\" 84) literal (intOrNat 3))) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_101_hist\") ((\"utils.py\" 84) iter \"utils_102_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_101_hist\") ((\"utils.py\" 84) iter \"utils_102_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_101_hist\") ((\"utils.py\" 84) iter \"utils_102_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_101_hist\") ((\"utils.py\" 84) iter \"utils_102_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90i\" ((\"utils.py\" 90) size ((\"utils.py\" 90) list ((\"utils.py\" 90) literal (intOrNat 1)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 2)) ((\"utils.py\" 90) literal (intOrNat 3)))) True) ((\"utils.py\" 91) define_local \"utils_103_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_104_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90i\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_105_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_104_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90i\")) True) ((\"utils.py\" 94) define_local \"utils_106_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_107_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_101_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_105_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_106_i\") ((\"utils.py\" 97) get_local \"utils_104_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_103_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_107_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_106_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_106_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_107_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_106_i\") ((\"utils.py\" 100) get_local \"utils_104_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_105_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_103_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_103_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_107_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_103_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_103_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_105_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_106_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_106_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_107_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_106_i\") ((\"utils.py\" 108) get_local \"utils_104_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_103_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_107_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_106_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_106_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_107_x\") \"value\"))))))))) ((\"utils.py\" 135) verify ((\"utils.py\" 135) eq ((\"utils.py\" 112) get_local \"utils_103_result\") ((\"utils.py\" 135) literal (intOrNat 2)))) ((\"utils.py\" 136) verify ((\"utils.py\" 136) eq ((\"utils.py\" 136) call_lambda ((\"smartpy/tests/utils.py\" 107) private \"math_median\") ((\"utils.py\" 136) list ((\"utils.py\" 136) literal (intOrNat 1)) ((\"utils.py\" 136) literal (intOrNat 2)) ((\"utils.py\" 136) literal (intOrNat 2)) ((\"utils.py\" 136) literal (intOrNat 5)))) ((\"utils.py\" 136) literal (intOrNat 2)))) ((\"utils.py\" 131) verify ((\"utils.py\" 131) literal (bool True)) ((\"utils.py\" 131) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 133) define_local \"utils_108_bytes\" ((\"utils.py\" 133) literal (bytes \"0x\")) True) ((\"utils.py\" 134) define_local \"utils_109_value\" ((\"utils.py\" 134) literal (intOrNat 54)) True) ((\"utils.py\" 135) while_block ((\"utils.py\" 135) neq ((\"utils.py\" 135) get_local \"utils_109_value\") ((\"utils.py\" 135) literal (intOrNat 0))) (((\"utils.py\" 136) set ((\"\" -1) get_local \"utils_108_bytes\") ((\"utils.py\" 136) add ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) slice ((\"utils.py\" 126) literal (intOrNat 6)) ((\"utils.py\" 126) literal (intOrNat 1)) ((\"utils.py\" 126) pack ((\"utils.py\" 126) MUL ((\"utils.py\" 126) to_int ((\"utils.py\" 136) get_local \"utils_109_value\")) ((\"utils.py\" 126) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 136) get_local \"utils_108_bytes\"))) ((\"utils.py\" 137) set ((\"\" -1) get_local \"utils_109_value\") ((\"utils.py\" 137) lsr ((\"utils.py\" 137) get_local \"utils_109_value\") ((\"utils.py\" 137) literal (intOrNat 8)))))) ((\"utils.py\" 138) verify ((\"utils.py\" 138) eq ((\"utils.py\" 139) get_local \"utils_108_bytes\") ((\"utils.py\" 138) literal (bytes \"0x36\")))) ((\"utils.py\" 139) verify ((\"utils.py\" 139) eq ((\"utils.py\" 122) open_variant ((\"utils.py\" 122) slice ((\"utils.py\" 122) literal (intOrNat 6)) ((\"utils.py\" 122) open_variant ((\"utils.py\" 122) is_nat ((\"utils.py\" 122) sub ((\"utils.py\" 122) size ((\"utils.py\" 117) pack ((\"utils.py\" 117) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 122) literal (intOrNat 6)))) \"Some\" \"None\") ((\"utils.py\" 117) pack ((\"utils.py\" 117) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) \"Some\" ((\"utils.py\" 122) literal (string \"Could not encode string to bytes.\"))) ((\"utils.py\" 139) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) ((\"utils.py\" 131) verify ((\"utils.py\" 131) lt ((\"utils.py\" 275) size ((\"utils.py\" 140) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) ((\"utils.py\" 131) literal (intOrNat 28948022309329048855892746252171976963317496166410141009864396001978282409984))) ((\"utils.py\" 131) literal (string \"NUMBER_TOO_BIG\"))) ((\"utils.py\" 133) define_local \"utils_110_bytes\" ((\"utils.py\" 133) literal (bytes \"0x\")) True) ((\"utils.py\" 134) define_local \"utils_111_value\" ((\"utils.py\" 275) size ((\"utils.py\" 140) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\"))) True) ((\"utils.py\" 135) while_block ((\"utils.py\" 135) neq ((\"utils.py\" 135) get_local \"utils_111_value\") ((\"utils.py\" 135) literal (intOrNat 0))) (((\"utils.py\" 136) set ((\"\" -1) get_local \"utils_110_bytes\") ((\"utils.py\" 136) add ((\"utils.py\" 126) open_variant ((\"utils.py\" 126) slice ((\"utils.py\" 126) literal (intOrNat 6)) ((\"utils.py\" 126) literal (intOrNat 1)) ((\"utils.py\" 126) pack ((\"utils.py\" 126) MUL ((\"utils.py\" 126) to_int ((\"utils.py\" 136) get_local \"utils_111_value\")) ((\"utils.py\" 126) literal (bls12_381_fr \"0x01\"))))) \"Some\" \"None\") ((\"utils.py\" 136) get_local \"utils_110_bytes\"))) ((\"utils.py\" 137) set ((\"\" -1) get_local \"utils_111_value\") ((\"utils.py\" 137) lsr ((\"utils.py\" 137) get_local \"utils_111_value\") ((\"utils.py\" 137) literal (intOrNat 8)))))) ((\"utils.py\" 275) define_local \"lengthBytes\" ((\"utils.py\" 139) get_local \"utils_110_bytes\") True) ((\"utils.py\" 276) while_block ((\"utils.py\" 276) lt ((\"utils.py\" 276) size ((\"utils.py\" 276) get_local \"lengthBytes\")) ((\"utils.py\" 276) literal (intOrNat 4))) (((\"utils.py\" 277) set ((\"\" -1) get_local \"lengthBytes\") ((\"utils.py\" 277) add ((\"utils.py\" 277) literal (bytes \"0x00\")) ((\"utils.py\" 277) get_local \"lengthBytes\"))))) ((\"utils.py\" 140) verify ((\"utils.py\" 140) eq ((\"utils.py\" 284) open_variant ((\"utils.py\" 284) unpack ((\"utils.py\" 283) concat ((\"utils.py\" 283) list ((\"utils.py\" 283) literal (bytes \"0x05\")) ((\"utils.py\" 283) literal (bytes \"0x01\")) ((\"utils.py\" 283) get_local \"lengthBytes\") ((\"utils.py\" 140) literal (bytes \"0x544553545f535452494e475f585858585858585858585858585858585858585858585858585858585858585858585858585858585858\")))) \"string\") \"Some\" ((\"utils.py\" 284) literal (string \"Could not decode bytes to string\"))) ((\"utils.py\" 140) literal (string \"TEST_STRING_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")))) ((\"utils.py\" 142) verify ((\"utils.py\" 142) eq ((\"utils.py\" 329) and ((\"utils.py\" 329) ge ((\"utils.py\" 329) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 142) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\"))) ((\"utils.py\" 329) le ((\"utils.py\" 329) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 142) literal (address \"tz28QJHLyqvaY2rXAoFZTbxrXeD88NA8wscC\")))) ((\"utils.py\" 142) literal (bool False)))) ((\"utils.py\" 143) verify ((\"utils.py\" 329) and ((\"utils.py\" 329) ge ((\"utils.py\" 329) literal (address \"KT1XvNYseNDJJ6Kw27qhSEDF8ys8JhDopzfG\")) ((\"utils.py\" 143) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))) ((\"utils.py\" 329) le ((\"utils.py\" 329) literal (address \"KT18amZmM5W7qDWVt2pH6uj7sCEd3kbzLrHT\")) ((\"utils.py\" 143) literal (address \"KT18hYjnko76SBVv6TaCT4kU6B32mJk6JWLZ\"))))))))\nflags ()\nprivates ((int_of_bytes ((\"\" -1) lambda 0 None False None \"\" (((\"smartpy_utils.py\" 309) define_local \"compute_smartpy_utils_309\" ((\"smartpy_utils.py\" 309) size ((\"\" -1) lambda_params 0 \"\" (unknown 194))) True) ((\"smartpy_utils.py\" 310) define_local \"utils_110\" ((\"smartpy_utils.py\" 310) literal (nat 0)) True) ((\"smartpy_utils.py\" 311) for_group \"utils_111\" ((\"smartpy_utils.py\" 311) range ((\"smartpy_utils.py\" 311) literal (intOrNat 0)) ((\"smartpy_utils.py\" 309) get_local \"compute_smartpy_utils_309\") ((\"smartpy_utils.py\" 311) literal (intOrNat 1))) (((\"smartpy_utils.py\" 312) define_local \"compute_smartpy_utils_312\" ((\"smartpy_utils.py\" 312) open_variant ((\"smartpy_utils.py\" 312) slice ((\"smartpy_utils.py\" 311) iter \"utils_111\") ((\"smartpy_utils.py\" 312) literal (intOrNat 1)) ((\"\" -1) lambda_params 0 \"\" (unknown 194))) \"Some\" ((\"\" -1) literal (unit))) True) ((\"smartpy_utils.py\" 313) define_local \"compute_smartpy_utils_313\" ((\"smartpy_utils.py\" 313) mul_homo ((\"smartpy_utils.py\" 313) open_variant ((\"smartpy_utils.py\" 313) is_nat ((\"smartpy_utils.py\" 313) sub ((\"smartpy_utils.py\" 309) get_local \"compute_smartpy_utils_309\") ((\"smartpy_utils.py\" 313) add ((\"smartpy_utils.py\" 311) iter \"utils_111\") ((\"smartpy_utils.py\" 313) literal (intOrNat 1))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 313) literal (intOrNat 2))) True) ((\"smartpy_utils.py\" 319) set ((\"\" -1) get_local \"utils_110\") ((\"smartpy_utils.py\" 319) add ((\"smartpy_utils.py\" 319) get_local \"utils_110\") ((\"smartpy_utils.py\" 319) mul_homo ((\"smartpy_utils.py\" 319) open_variant ((\"smartpy_utils.py\" 319) is_nat ((\"smartpy_utils.py\" 320) to_int ((\"smartpy_utils.py\" 320) open_variant ((\"smartpy_utils.py\" 320) unpack ((\"smartpy_utils.py\" 318) add ((\"smartpy_utils.py\" 318) add ((\"smartpy_utils.py\" 318) literal (bytes \"0x050a00000020\")) ((\"smartpy_utils.py\" 312) get_local \"compute_smartpy_utils_312\")) ((\"smartpy_utils.py\" 318) literal (bytes \"0x00000000000000000000000000000000000000000000000000000000000000\"))) \"bls12_381_fr\") \"Some\" ((\"\" -1) literal (unit))))) \"Some\" \"None\") ((\"smartpy_utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"smartpy_utils.py\" 313) get_local \"compute_smartpy_utils_313\") ((\"smartpy_utils.py\" 9) literal (intOrNat 16)) ((\"smartpy_utils.py\" 9) literal (intOrNat 1)))))))) ((\"utils.py\" 88) result ((\"smartpy_utils.py\" 323) get_local \"utils_110\"))))) (int_of_string ((\"\" -1) lambda 1 None False None \"\" (((\"utils.py\" 294) define_local \"utils_58\" ((\"\" -1) lambda_params 1 \"\" (unknown 199)) True) ((\"utils.py\" 295) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"\" -1) lambda_params 1 \"\" (unknown 199))) (((\"utils.py\" 296) set ((\"\" -1) get_local \"utils_58\") ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) slice ((\"utils.py\" 296) literal (intOrNat 1)) ((\"utils.py\" 296) open_variant ((\"utils.py\" 296) is_nat ((\"utils.py\" 296) sub ((\"utils.py\" 296) size ((\"\" -1) lambda_params 1 \"\" (unknown 199))) ((\"utils.py\" 296) literal (intOrNat 1)))) \"Some\" \"None\") ((\"\" -1) lambda_params 1 \"\" (unknown 199))) \"Some\" ((\"utils.py\" 296) literal (string \"\")))))) ((\"utils.py\" 298) define_local \"utils_59\" ((\"utils.py\" 298) literal (intOrNat 0)) True) ((\"utils.py\" 299) for_group \"utils_60\" ((\"utils.py\" 299) range ((\"utils.py\" 299) literal (intOrNat 0)) ((\"utils.py\" 299) size ((\"utils.py\" 299) get_local \"utils_58\")) ((\"utils.py\" 299) literal (intOrNat 1))) (((\"utils.py\" 300) set ((\"\" -1) get_local \"utils_59\") ((\"utils.py\" 300) add ((\"utils.py\" 300) mul_homo ((\"utils.py\" 300) literal (intOrNat 10)) ((\"utils.py\" 300) get_local \"utils_59\")) ((\"utils.py\" 300) get_item ((\"utils.py\" 291) map (((\"\" -1) literal (string \"0\")) ((\"\" -1) literal (intOrNat 0))) (((\"\" -1) literal (string \"1\")) ((\"\" -1) literal (intOrNat 1))) (((\"\" -1) literal (string \"2\")) ((\"\" -1) literal (intOrNat 2))) (((\"\" -1) literal (string \"3\")) ((\"\" -1) literal (intOrNat 3))) (((\"\" -1) literal (string \"4\")) ((\"\" -1) literal (intOrNat 4))) (((\"\" -1) literal (string \"5\")) ((\"\" -1) literal (intOrNat 5))) (((\"\" -1) literal (string \"6\")) ((\"\" -1) literal (intOrNat 6))) (((\"\" -1) literal (string \"7\")) ((\"\" -1) literal (intOrNat 7))) (((\"\" -1) literal (string \"8\")) ((\"\" -1) literal (intOrNat 8))) (((\"\" -1) literal (string \"9\")) ((\"\" -1) literal (intOrNat 9)))) ((\"utils.py\" 300) open_variant ((\"utils.py\" 300) slice ((\"utils.py\" 299) iter \"utils_60\") ((\"utils.py\" 300) literal (intOrNat 1)) ((\"utils.py\" 300) get_local \"utils_58\")) \"Some\" \"None\")))))) ((\"utils.py\" 302) if_block ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 204) literal (string \"-\")) ((\"\" -1) lambda_params 1 \"\" (unknown 199))) (((\"utils.py\" 303) set ((\"\" -1) get_local \"utils_59\") ((\"utils.py\" 303) mul_homo ((\"utils.py\" 303) get_local \"utils_59\") ((\"utils.py\" 303) literal (int -1)))))) ((\"utils.py\" 84) result ((\"utils.py\" 305) get_local \"utils_59\"))))) (math_median ((\"\" -1) lambda 2 None False None \"\" (((\"utils.py\" 83) define_local \"utils_61_hist\" ((\"utils.py\" 83) map ) True) ((\"utils.py\" 84) for_group \"utils_62_x\" ((\"\" -1) lambda_params 2 \"\" (unknown 202)) (((\"utils.py\" 85) if_block ((\"utils.py\" 85) contains ((\"utils.py\" 85) get_local \"utils_61_hist\") ((\"utils.py\" 84) iter \"utils_62_x\")) (((\"utils.py\" 86) set ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_61_hist\") ((\"utils.py\" 84) iter \"utils_62_x\")) ((\"utils.py\" 86) add ((\"utils.py\" 86) get_item ((\"utils.py\" 86) get_local \"utils_61_hist\") ((\"utils.py\" 84) iter \"utils_62_x\")) ((\"utils.py\" 86) literal (intOrNat 1)))))) (else_block (((\"utils.py\" 88) set ((\"utils.py\" 88) get_item ((\"utils.py\" 88) get_local \"utils_61_hist\") ((\"utils.py\" 84) iter \"utils_62_x\")) ((\"utils.py\" 88) literal (intOrNat 1))))))) ((\"utils.py\" 90) define_local \"compute_utils_90\" ((\"utils.py\" 90) size ((\"\" -1) lambda_params 2 \"\" (unknown 202))) True) ((\"utils.py\" 91) define_local \"utils_63_result\" ((\"utils.py\" 91) literal (nat 0)) True) ((\"utils.py\" 92) define_local \"utils_64_half\" ((\"utils.py\" 92) div ((\"utils.py\" 90) get_local \"compute_utils_90\") ((\"utils.py\" 92) literal (intOrNat 2))) True) ((\"utils.py\" 93) define_local \"utils_65_use_average\" ((\"utils.py\" 93) eq ((\"utils.py\" 93) mul_homo ((\"utils.py\" 93) get_local \"utils_64_half\") ((\"utils.py\" 93) literal (intOrNat 2))) ((\"utils.py\" 90) get_local \"compute_utils_90\")) True) ((\"utils.py\" 94) define_local \"utils_66_i\" ((\"utils.py\" 94) literal (intOrNat 0)) True) ((\"utils.py\" 95) for_group \"utils_67_x\" ((\"utils.py\" 95) items ((\"utils.py\" 95) get_local \"utils_61_hist\")) (((\"utils.py\" 96) if_block ((\"utils.py\" 96) get_local \"utils_65_use_average\") (((\"utils.py\" 97) if_block ((\"utils.py\" 97) lt ((\"utils.py\" 97) get_local \"utils_66_i\") ((\"utils.py\" 97) get_local \"utils_64_half\")) (((\"utils.py\" 98) set ((\"\" -1) get_local \"utils_63_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_67_x\") \"key\")) ((\"utils.py\" 99) set ((\"\" -1) get_local \"utils_66_i\") ((\"utils.py\" 99) add ((\"utils.py\" 99) get_local \"utils_66_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_67_x\") \"value\"))) ((\"utils.py\" 100) if_block ((\"utils.py\" 100) gt ((\"utils.py\" 100) get_local \"utils_66_i\") ((\"utils.py\" 100) get_local \"utils_64_half\")) (((\"utils.py\" 101) set ((\"\" -1) get_local \"utils_65_use_average\") ((\"utils.py\" 101) literal (bool False))))))) (else_block (((\"utils.py\" 103) set ((\"\" -1) get_local \"utils_63_result\") ((\"utils.py\" 103) add ((\"utils.py\" 103) get_local \"utils_63_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_67_x\") \"key\"))) ((\"utils.py\" 104) set ((\"\" -1) get_local \"utils_63_result\") ((\"utils.py\" 104) div ((\"utils.py\" 104) get_local \"utils_63_result\") ((\"utils.py\" 104) literal (intOrNat 2)))) ((\"utils.py\" 105) set ((\"\" -1) get_local \"utils_65_use_average\") ((\"utils.py\" 105) literal (bool False))) ((\"utils.py\" 106) set ((\"\" -1) get_local \"utils_66_i\") ((\"utils.py\" 106) add ((\"utils.py\" 106) get_local \"utils_66_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_67_x\") \"value\"))))))) (else_block (((\"utils.py\" 108) if_block ((\"utils.py\" 108) le ((\"utils.py\" 108) get_local \"utils_66_i\") ((\"utils.py\" 108) get_local \"utils_64_half\")) (((\"utils.py\" 109) set ((\"\" -1) get_local \"utils_63_result\") ((\"utils.py\" 98) attr ((\"utils.py\" 95) iter \"utils_67_x\") \"key\")) ((\"utils.py\" 110) set ((\"\" -1) get_local \"utils_66_i\") ((\"utils.py\" 110) add ((\"utils.py\" 110) get_local \"utils_66_i\") ((\"utils.py\" 99) attr ((\"utils.py\" 95) iter \"utils_67_x\") \"value\"))))))))) ((\"utils.py\" 108) result ((\"utils.py\" 112) get_local \"utils_63_result\"))))) (math_pow ((\"\" -1) lambda 3 None False None \"\" (((\"utils.py\" 104) result ((\"utils.py\" 9) call_michelson (op \"\n            DUP;\n            PUSH nat 0;\n            COMPARE;\n            NEQ;\n            LOOP\n            {\n                PUSH nat 0;\n                PUSH nat 2;\n                DUP 3;\n                EDIV;\n                IF_NONE\n                {\n                    UNIT;\n                    FAILWITH;\n                }\n                {\n                    CDR;\n                };\n                COMPARE;\n                NEQ;\n                IF\n                {\n                    SWAP;\n                    DUP;\n                    DUG 2;\n                    DIG 3;\n                    MUL;\n                    DUG 2;\n                }\n                {};\n                PUSH nat 1;\n                SWAP;\n                LSR;\n                SWAP;\n                DUP;\n                MUL;\n                SWAP;\n                DUP;\n                PUSH nat 0;\n                COMPARE;\n                NEQ;\n            };\n            DROP 2;\n            \" \"nat\" \"nat\" \"nat\" \"out\" \"nat\") ((\"utils.py\" 104) attr ((\"\" -1) lambda_params 3 \"\" (unknown 209)) \"exponent\") ((\"utils.py\" 104) attr ((\"\" -1) lambda_params 3 \"\" (unknown 209)) \"base\") ((\"utils.py\" 9) literal (intOrNat 1))))))) (string_ends_with ((\"\" -1) lambda 4 None False None \"\" (((\"utils.py\" 100) result ((\"utils.py\" 145) call_michelson (op \"\n            DUP;\n            SIZE;\n            DUP 3;\n            SIZE;\n            SWAP;\n            PAIR;\n            DUP;\n            UNPAIR;\n            COMPARE;\n            GE;\n            IF\n            {\n                UNPAIR;\n                DUP 2;\n                SWAP;\n                SUB;\n                ABS; # ABS is secure here because we already validated that (text length is greater or equal to postfix)\n                SLICE;\n                IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            }\n            {\n                DROP 3;\n                PUSH bool False;\n            };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 100) attr ((\"\" -1) lambda_params 4 \"\" (unknown 210)) \"text\") ((\"utils.py\" 100) attr ((\"\" -1) lambda_params 4 \"\" (unknown 210)) \"postfix\")))))) (string_of_int ((\"\" -1) lambda 5 None False None \"\" (((\"utils.py\" 256) define_local \"utils_68\" ((\"utils.py\" 256) abs ((\"\" -1) lambda_params 5 \"\" (unknown 211))) True) ((\"utils.py\" 257) define_local \"utils_69\" ((\"utils.py\" 257) list ) True) ((\"utils.py\" 259) if_block ((\"utils.py\" 259) eq ((\"utils.py\" 259) get_local \"utils_68\") ((\"utils.py\" 259) literal (intOrNat 0))) (((\"utils.py\" 260) set ((\"utils.py\" 260) get_local \"utils_69\") ((\"utils.py\" 260) cons ((\"utils.py\" 260) literal (string \"0\")) ((\"utils.py\" 260) get_local \"utils_69\"))))) ((\"utils.py\" 261) while_block ((\"utils.py\" 261) gt ((\"utils.py\" 261) get_local \"utils_68\") ((\"utils.py\" 261) literal (intOrNat 0))) (((\"utils.py\" 262) set ((\"utils.py\" 262) get_local \"utils_69\") ((\"utils.py\" 262) cons ((\"utils.py\" 262) get_item ((\"utils.py\" 254) map (((\"\" -1) literal (intOrNat 0)) ((\"\" -1) literal (string \"0\"))) (((\"\" -1) literal (intOrNat 1)) ((\"\" -1) literal (string \"1\"))) (((\"\" -1) literal (intOrNat 2)) ((\"\" -1) literal (string \"2\"))) (((\"\" -1) literal (intOrNat 3)) ((\"\" -1) literal (string \"3\"))) (((\"\" -1) literal (intOrNat 4)) ((\"\" -1) literal (string \"4\"))) (((\"\" -1) literal (intOrNat 5)) ((\"\" -1) literal (string \"5\"))) (((\"\" -1) literal (intOrNat 6)) ((\"\" -1) literal (string \"6\"))) (((\"\" -1) literal (intOrNat 7)) ((\"\" -1) literal (string \"7\"))) (((\"\" -1) literal (intOrNat 8)) ((\"\" -1) literal (string \"8\"))) (((\"\" -1) literal (intOrNat 9)) ((\"\" -1) literal (string \"9\")))) ((\"utils.py\" 262) mod ((\"utils.py\" 262) get_local \"utils_68\") ((\"utils.py\" 262) literal (intOrNat 10)))) ((\"utils.py\" 262) get_local \"utils_69\"))) ((\"utils.py\" 263) set ((\"\" -1) get_local \"utils_68\") ((\"utils.py\" 263) div ((\"utils.py\" 263) get_local \"utils_68\") ((\"utils.py\" 263) literal (intOrNat 10)))))) ((\"utils.py\" 265) define_local \"utils_70\" ((\"utils.py\" 265) concat ((\"utils.py\" 265) get_local \"utils_69\")) True) ((\"utils.py\" 266) if_block ((\"utils.py\" 255) lt ((\"\" -1) lambda_params 5 \"\" (unknown 211)) ((\"utils.py\" 255) literal (intOrNat 0))) (((\"utils.py\" 267) set ((\"\" -1) get_local \"utils_70\") ((\"utils.py\" 267) add ((\"utils.py\" 267) literal (string \"-\")) ((\"utils.py\" 267) get_local \"utils_70\"))))) ((\"utils.py\" 80) result ((\"utils.py\" 269) get_local \"utils_70\"))))) (string_split ((\"\" -1) lambda 6 None False None \"\" (((\"utils.py\" 241) define_local \"utils_71\" ((\"utils.py\" 241) literal (intOrNat 0)) True) ((\"utils.py\" 242) define_local \"utils_72\" ((\"utils.py\" 242) list ) True) ((\"utils.py\" 243) for_group \"utils_73\" ((\"utils.py\" 243) range ((\"utils.py\" 243) literal (intOrNat 0)) ((\"utils.py\" 243) size ((\"utils.py\" 92) attr ((\"\" -1) lambda_params 6 \"\" (unknown 215)) \"text\")) ((\"utils.py\" 243) literal (intOrNat 1))) (((\"utils.py\" 244) if_block ((\"utils.py\" 244) eq ((\"utils.py\" 244) open_variant ((\"utils.py\" 244) slice ((\"utils.py\" 243) iter \"utils_73\") ((\"utils.py\" 244) literal (intOrNat 1)) ((\"utils.py\" 92) attr ((\"\" -1) lambda_params 6 \"\" (unknown 215)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 92) attr ((\"\" -1) lambda_params 6 \"\" (unknown 215)) \"separator\")) (((\"utils.py\" 245) set ((\"utils.py\" 245) get_local \"utils_72\") ((\"utils.py\" 245) cons ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) slice ((\"utils.py\" 245) get_local \"utils_71\") ((\"utils.py\" 245) open_variant ((\"utils.py\" 245) is_nat ((\"utils.py\" 245) sub ((\"utils.py\" 243) iter \"utils_73\") ((\"utils.py\" 245) get_local \"utils_71\"))) \"Some\" \"None\") ((\"utils.py\" 92) attr ((\"\" -1) lambda_params 6 \"\" (unknown 215)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 245) get_local \"utils_72\"))) ((\"utils.py\" 246) set ((\"\" -1) get_local \"utils_71\") ((\"utils.py\" 246) add ((\"utils.py\" 243) iter \"utils_73\") ((\"utils.py\" 246) literal (intOrNat 1)))))))) ((\"utils.py\" 247) if_block ((\"utils.py\" 247) gt ((\"utils.py\" 247) size ((\"utils.py\" 92) attr ((\"\" -1) lambda_params 6 \"\" (unknown 215)) \"text\")) ((\"utils.py\" 247) literal (intOrNat 0))) (((\"utils.py\" 248) set ((\"utils.py\" 248) get_local \"utils_72\") ((\"utils.py\" 248) cons ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) slice ((\"utils.py\" 248) get_local \"utils_71\") ((\"utils.py\" 248) open_variant ((\"utils.py\" 248) is_nat ((\"utils.py\" 248) sub ((\"utils.py\" 248) size ((\"utils.py\" 92) attr ((\"\" -1) lambda_params 6 \"\" (unknown 215)) \"text\")) ((\"utils.py\" 248) get_local \"utils_71\"))) \"Some\" \"None\") ((\"utils.py\" 92) attr ((\"\" -1) lambda_params 6 \"\" (unknown 215)) \"text\")) \"Some\" \"None\") ((\"utils.py\" 248) get_local \"utils_72\"))))) ((\"utils.py\" 92) result ((\"utils.py\" 249) rev ((\"utils.py\" 249) get_local \"utils_72\")))))) (string_starts_with ((\"\" -1) lambda 7 None False None \"\" (((\"utils.py\" 96) result ((\"utils.py\" 204) call_michelson (op \"\n            DUP;\n            SIZE;\n            DIG 2;\n            SWAP;\n            PUSH nat 0;\n            SLICE;\n            IF_NONE\n                {\n                    DROP;\n                    PUSH bool False;\n                }\n                {\n                    COMPARE;\n                    EQ;\n                };\n            \" \"string\" \"string\" \"out\" \"bool\") ((\"utils.py\" 96) attr ((\"\" -1) lambda_params 7 \"\" (unknown 218)) \"prefix\") ((\"utils.py\" 96) attr ((\"\" -1) lambda_params 7 \"\" (unknown 218)) \"text\")))))))\nviews ()\nentry_points_layout ()\ninitial_metadata ()\nbalance ())",
    "id": "((\"\" -1) static_id 0)",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 }
]